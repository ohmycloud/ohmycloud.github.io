<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>
            
            
            焉知非鱼</title>
        <link>https://ohmyweekly.github.io/</link>
        <description>Recent content 
            on 焉知非鱼</description>
        <language>en-us</language>
        <lastBuildDate>Wed, 19 Aug 2020 10:54:04 +0800</lastBuildDate>
        <generator>Hugo -- gohugo.io</generator>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
            <atom:link href="https://ohmyweekly.github.io/index.xml" rel="self" type="application/rss&#43;xml" />
        
            
            <item>
                <title>Flink 操作游乐场</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-17-flink-operations-playground/</link>
                
                
                <description>&lt;blockquote&gt;Flink Operations Playground&lt;/blockquote&gt;&lt;h2 id=&#34;flink-操作游乐场&#34;&gt;Flink 操作游乐场&lt;/h2&gt;
&lt;p&gt;在各种环境中部署和操作 Apache Flink 的方法有很多。无论这种多样性如何，Flink 集群的基本构件保持不变，类似的操作原则也适用。&lt;/p&gt;
&lt;p&gt;在这个操场上，你将学习如何管理和运行 Flink Jobs。您将看到如何部署和监控应用程序，体验 Flink 如何从 Job 故障中恢复，并执行日常操作任务，如升级和重新缩放。&lt;/p&gt;
&lt;h3 id=&#34;这个游乐场的解剖&#34;&gt;这个游乐场的解剖&lt;/h3&gt;
&lt;p&gt;这个游乐场由一个持久的 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-session-cluster&#34;&gt;Flink Session Cluster&lt;/a&gt;和一个 Kafka Cluster 组成。&lt;/p&gt;
&lt;p&gt;一个 Flink Cluster 总是由一个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-jobmanager&#34;&gt;JobManager&lt;/a&gt; 和一个或多个 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-taskmanager&#34;&gt;Flink TaskManager&lt;/a&gt; 组成。JobManager 负责处理 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#flink-job&#34;&gt;Job&lt;/a&gt; 提交，监督 Job 以及资源管理。Flink TaskManager 是 worker 进程，负责执行构成 Flink Job 的实际&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/concepts/glossary.html#task&#34;&gt;任务&lt;/a&gt;。在这个游戏场中，你将从一个单一的 TaskManager 开始，但以后会扩展到更多的 TaskManager。此外，这个游乐场还带有一个专门的客户端容器，我们使用它来提交 Flink Job，并在以后执行各种操作任务。客户端容器不是 Flink Cluster 本身需要的，只是为了方便使用才包含在里面。&lt;/p&gt;
&lt;p&gt;Kafka 集群由一个 Zookeeper 服务器和一个 Kafka Broker 组成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/flink-docker-playground.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当游乐场启动时，一个名为 Flink Event Count 的 Flink Job 将被提交给 JobManager。此外，还会创建两个 Kafka 主题 &lt;em&gt;input&lt;/em&gt; 和 &lt;em&gt;output&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/click-event-count-example.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;该作业从 &lt;em&gt;input&lt;/em&gt; 主题中消耗点击事件(&lt;strong&gt;ClickEvent&lt;/strong&gt;)，每个点击事件(&lt;strong&gt;ClickEvent&lt;/strong&gt;)都有一个时间戳(&lt;strong&gt;timestamp&lt;/strong&gt;)和一个页面(&lt;strong&gt;page&lt;/strong&gt;)。然后按页面对事件进行分组(&lt;strong&gt;keyed by&lt;/strong&gt;)，并在 15 秒的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html&#34;&gt;窗口&lt;/a&gt;中进行计数。结果被写入 &lt;em&gt;output&lt;/em&gt; 主题。&lt;/p&gt;
&lt;p&gt;有6个不同的页面，我们在每个页面和15秒内产生1000个点击事件。因此，Flink 作业的输出应该显示每个页面和窗口有1000个浏览量。&lt;/p&gt;
&lt;h3 id=&#34;启动游乐场&#34;&gt;启动游乐场&lt;/h3&gt;
&lt;p&gt;游戏场环境的设置只需几步。我们将引导你完成必要的命令，并展示如何验证一切都在正确运行。&lt;/p&gt;
&lt;p&gt;我们假设你的机器上安装了 &lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker&lt;/a&gt;（1.12+）和 &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt;（2.1+）。&lt;/p&gt;
&lt;p&gt;所需的配置文件可以在 &lt;a href=&#34;https://github.com/apache/flink-playgrounds&#34;&gt;flink-playgrounds&lt;/a&gt; 仓库中找到。检查一下，然后对齐环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone --branch release-1.11 https://github.com/apache/flink-playgrounds.git
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; flink-playgrounds/operations-playground
docker-compose build
docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，你可以用以下命令检查正在运行的 Docker 容器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose ps

                    Name                                  Command               State                   Ports                
-----------------------------------------------------------------------------------------------------------------------------
operations-playground_clickevent-generator_1   /docker-entrypoint.sh java ...   Up       6123/tcp, 8081/tcp                  
operations-playground_client_1                 /docker-entrypoint.sh flin ...   Exit &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;                                       
operations-playground_jobmanager_1             /docker-entrypoint.sh jobm ...   Up       6123/tcp, 0.0.0.0:8081-&amp;gt;8081/tcp    
operations-playground_kafka_1                  start-kafka.sh                   Up       0.0.0.0:9094-&amp;gt;9094/tcp              
operations-playground_taskmanager_1            /docker-entrypoint.sh task ...   Up       6123/tcp, 8081/tcp                  
operations-playground_zookeeper_1              /bin/sh -c /usr/sbin/sshd  ...   Up       2181/tcp, 22/tcp, 2888/tcp, 3888/tcp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这表明客户端容器已经成功提交了 Flink Job（Exit 0），所有集群组件以及数据生成器都在运行（Up）。&lt;/p&gt;
&lt;p&gt;您可以通过调用来停止游乐场环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose down -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;进入游乐场&#34;&gt;进入游乐场&lt;/h3&gt;
&lt;p&gt;在这个游乐场中，有很多东西你可以尝试和检查。在下面的两节中，我们将向您展示如何与 Flink 集群进行交互，并展示 Flink 的一些关键功能。&lt;/p&gt;
&lt;h4 id=&#34;flink-webui&#34;&gt;Flink WebUI&lt;/h4&gt;
&lt;p&gt;观察你的 Flink 集群最自然的出发点是在 &lt;a href=&#34;http://localhost:8081/&#34;&gt;http://localhost:8081&lt;/a&gt; 下暴露的 WebUI。如果一切顺利，你会看到集群最初由一个任务管理器组成，并执行一个名为 Click Event Count 的 Job。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Flink WebUI 包含了很多关于 Flink 集群和它的工作的有用和有趣的信息（JobGraph, Metrics, Checkpointing Statistics, TaskManager Status, &amp;hellip;）。&lt;/p&gt;
&lt;h4 id=&#34;日志&#34;&gt;日志&lt;/h4&gt;
&lt;h5 id=&#34;jobmanager&#34;&gt;JobManager&lt;/h5&gt;
&lt;p&gt;可以通过 &lt;code&gt;docker-compose&lt;/code&gt; 对 JobManager 日志进行跟踪。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose logs -f jobmanager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在初始启动后，你应该主要看到每一个检查点完成的日志信息。&lt;/p&gt;
&lt;h5 id=&#34;taskmanager&#34;&gt;TaskManager&lt;/h5&gt;
&lt;p&gt;TaskManager 的日志也可以用同样的方式进行 tail。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose logs -f taskmanager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在初始启动后，你应该主要看到每个检查点完成的日志信息。&lt;/p&gt;
&lt;h4 id=&#34;flink-cli&#34;&gt;Flink CLI&lt;/h4&gt;
&lt;p&gt;Flink CLI 可以在客户端容器中使用。例如，要打印 Flink CLI 的帮助信息，你可以运行以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose run --no-deps client flink --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;flink-rest-api&#34;&gt;Flink REST API&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api&#34;&gt;Flink REST API&lt;/a&gt; 通过主机上的 localhost:8081 或客户端容器中的 jobmanager:8081 暴露出来，例如，要列出所有当前正在运行的作业，你可以运行:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl localhost:8081/jobs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;kafka-topics&#34;&gt;Kafka Topics&lt;/h4&gt;
&lt;p&gt;你可以通过运行以下命令来查看写入 Kafka 主题的记录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;//input topic &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt; records/s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; kafka kafka-console-consumer.sh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --bootstrap-server localhost:9092 --topic input

//output topic &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; records/min&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; kafka kafka-console-consumer.sh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --bootstrap-server localhost:9092 --topic output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;time-to-play&#34;&gt;Time to Play!&lt;/h4&gt;
&lt;p&gt;现在你已经学会了如何与 Flink 和 Docker 容器进行交互，让我们来看看一些常见的操作任务，你可以在我们的游乐场上尝试一下。所有这些任务都是相互独立的，即你可以以任何顺序执行它们。大多数任务可以通过 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-cli&#34;&gt;CLI&lt;/a&gt; 和 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#flink-rest-api&#34;&gt;REST API&lt;/a&gt; 来执行。&lt;/p&gt;
&lt;h5 id=&#34;列出正在运行的-job&#34;&gt;列出正在运行的 Job&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose run --no-deps client flink list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;期望的输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Waiting for response...
------------------ Running/Restarting Jobs -------------------
16.07.2019 16:37:55 : &amp;lt;job-id&amp;gt; : Click Event Count (RUNNING)
--------------------------------------------------------------
No scheduled jobs.
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl localhost:8081/jobs
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;期待的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;jobs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;job-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JobID 在提交时被分配给作业(Job)，并且需要通过 CLI 或 REST API 对作业(Job)执行操作。&lt;/p&gt;
&lt;h5 id=&#34;观察故障和恢复&#34;&gt;观察故障和恢复&lt;/h5&gt;
&lt;p&gt;Flink 在(部分)失败下提供了精确的一次处理保证。在这个游乐场中，你可以观察并在一定程度上验证这种行为。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤1：观察输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#anatomy-of-this-playground&#34;&gt;如上所述&lt;/a&gt;，在这个游乐场中的事件是这样生成的，每个窗口正好包含一千条记录。因此，为了验证 Flink 是否成功地从 TaskManager 故障中恢复，而没有数据丢失或重复，你可以跟踪 &lt;em&gt;output&lt;/em&gt; 主题，并检查恢复后所有的窗口都存在，而且计数是正确的。&lt;/p&gt;
&lt;p&gt;为此，从 &lt;em&gt;output&lt;/em&gt; 主题开始读取，并让这个命令运行到恢复后（步骤3）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; kafka kafka-console-consumer.sh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --bootstrap-server localhost:9092 --topic output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第二步：引入故障&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了模拟部分故障，你可以杀死一个 TaskManager，在生产设置中，这可能对应于 TaskManager 进程、TaskManager 机器的丢失，或者仅仅是框架或用户代码抛出的瞬时异常（例如由于暂时不可用）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; taskmanager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;几秒钟后，JobManager 会注意到 TaskManager 的丢失，取消受影响的 Job，并立即重新提交它进行恢复。当 Job 被重新启动后，其任务仍处于 &lt;strong&gt;SCHEDULED&lt;/strong&gt; 状态，由紫色的方块表示（见下面的截图）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/playground-webui-failure.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意：即使作业(Job)的任务(Task)处于 &lt;strong&gt;SCHEDULED&lt;/strong&gt; 状态而不是 &lt;strong&gt;RUNNING&lt;/strong&gt; 状态，作业(Job)的整体状态也会显示为 &lt;strong&gt;RUNNING&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;此时，Job 的任务(Task)不能从 &lt;strong&gt;SCHEDULED&lt;/strong&gt; 状态转为 &lt;strong&gt;RUNNING&lt;/strong&gt; 状态，因为没有资源(&lt;strong&gt;TaskManager&lt;/strong&gt; 提供的 &lt;strong&gt;TaskSlots&lt;/strong&gt;）来运行这些任务。在新的 TaskManager 可用之前，Job 将经历一个取消和重新提交的循环。&lt;/p&gt;
&lt;p&gt;同时，数据生成器会不断地将 ClickEvents 推送到 &lt;em&gt;input&lt;/em&gt; 主题中。这类似于真正的生产设置，在生产数据的同时，要处理数据的 Job 却宕机了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤3：恢复&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一旦你重新启动 TaskManager，它就会重新连接到 JobManager。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose up -d taskmanager
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 JobManager 被通知到新的 TaskManager 时，它将恢复中的 Job 的任务(tasks)调度到新的可用 TaskSlots。重新启动后，任务会从故障前最后一次成功的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html&#34;&gt;检查点&lt;/a&gt;恢复其状态，并切换到 RUNNING 状态。&lt;/p&gt;
&lt;p&gt;Job 将快速处理来自 Kafka 的全部积压输入事件(在故障期间积累的)，并以更高的速度(&amp;gt;24条记录/分钟)产生输出，直到到达流的头部。在输出中，你会看到所有的键(页面)都存在于所有的时间窗口中，而且每个计数都是精确的 1000。由于我们是在&amp;quot;至少一次&amp;quot;模式下使用 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/connectors/kafka.html#kafka-producers-and-fault-tolerance&#34;&gt;FlinkKafkaProducer&lt;/a&gt;，所以你有可能会看到一些重复的输出记录。&lt;/p&gt;
&lt;p&gt;注意：大多数生产设置依赖于资源管理器(Kubernetes、Yarn、Mesos)来自动重启失败的进程。&lt;/p&gt;
&lt;h5 id=&#34;升级和重新缩放作业&#34;&gt;升级和重新缩放作业&lt;/h5&gt;
&lt;p&gt;升级 Flink 作业总是涉及两个步骤。首先，用一个&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/state/savepoints.html&#34;&gt;保存点&lt;/a&gt;优雅地停止 Flink Job。保存点是在一个明确定义的、全局一致的时间点(类似于检查点)上的完整应用状态的一致快照。其次，升级后的 Flink Job 从 Savepoint 开始。在这种情况下，&amp;ldquo;升级&amp;quot;可以意味着不同的事情，包括以下内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置的升级（包括作业的并行性）。&lt;/li&gt;
&lt;li&gt;对 Job 的拓扑结构进行升级（增加/删除 Operator）。&lt;/li&gt;
&lt;li&gt;对 Job 的用户定义的函数进行升级。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在开始升级之前，你可能要开始 tailing &lt;em&gt;output&lt;/em&gt; 主题，以观察在升级过程中没有数据丢失或损坏。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; kafka kafka-console-consumer.sh &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --bootstrap-server localhost:9092 --topic output
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第一步：停止工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;要优雅地停止作业，您需要使用 CLI 或 REST API 的 &amp;ldquo;stop&amp;rdquo; 命令。为此，您需要该作业的 JobID，您可以通过&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#listing-running-jobs&#34;&gt;列出所有正在运行的 Job&lt;/a&gt; 或从 WebUI 中获得。有了 JobID，您就可以继续停止该作业:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose run --no-deps client flink stop &amp;lt;job-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Suspending job &amp;quot;&amp;lt;job-id&amp;gt;&amp;quot; with a savepoint.
Suspended job &amp;quot;&amp;lt;job-id&amp;gt;&amp;quot; with a savepoint.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Savepoint 已经被存储到 flink-conf.yaml 中配置的 state.savepoint.dir 中，它被安装在本地机器的 /tmp/flink-savepoints-directory/ 下。在下一步中，你将需要这个 Savepoint 的路径。在 REST API 的情况下，这个路径已经是响应的一部分，你将需要直接查看文件系统。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ls -lia /tmp/flink-savepoints-directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的输出&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;total &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; drwxr-xr-x   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; root root   &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; jul 17:05 .
   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; drwxrwxrwt &lt;span class=&#34;m&#34;&gt;135&lt;/span&gt; root root &lt;span class=&#34;m&#34;&gt;3420&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; jul 17:09 ..
&lt;span class=&#34;m&#34;&gt;1002&lt;/span&gt; drwxr-xr-x   &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; root root  &lt;span class=&#34;m&#34;&gt;140&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;17&lt;/span&gt; jul 17:05 savepoint-&amp;lt;short-job-id&amp;gt;-&amp;lt;uuid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# triggering stop&lt;/span&gt;
curl -X POST localhost:8081/jobs/&amp;lt;job-id&amp;gt;/stop -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;drain&amp;#34;: false}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;request-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;trigger-id&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# check status of stop action and retrieve savepoint path&lt;/span&gt;
curl localhost:8081/jobs/&amp;lt;job-id&amp;gt;/savepoints/&amp;lt;trigger-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;COMPLETED&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;operation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;location&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;savepoint-path&amp;gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;步骤2a: 重启 Job，不做任何改变&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在您可以从该保存点重新启动升级后的作业(Job)。为了简单起见，您可以在不做任何更改的情况下重新启动它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;命令&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose run --no-deps client flink run -s &amp;lt;savepoint-path&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -d /opt/ClickCountJob.jar &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --bootstrap.servers kafka:9092 --checkpointing --event-time
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Starting execution of program
Job has been submitted with JobID &amp;lt;job-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Uploading the JAR from the Client container&lt;/span&gt;
docker-compose run --no-deps client curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Expect:&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -F &lt;span class=&#34;s2&#34;&gt;&amp;#34;jarfile=@/opt/ClickCountJob.jar&amp;#34;&lt;/span&gt; http://jobmanager:8081/jars/upload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/flink-web-&amp;lt;uuid&amp;gt;/flink-web-upload/&amp;lt;jar-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Submitting the Job&lt;/span&gt;
curl -X POST http://localhost:8081/jars/&amp;lt;jar-id&amp;gt;/run &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;programArgs&amp;#34;: &amp;#34;--bootstrap.servers kafka:9092 --checkpointing --event-time&amp;#34;, &amp;#34;savepointPath&amp;#34;: &amp;#34;&amp;lt;savepoint-path&amp;gt;&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的输出&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;jobid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;job-id&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;一旦 Job 再次 RUNNING，你会在 &lt;em&gt;output&lt;/em&gt; 主题中看到，当 Job 在处理中断期间积累的积压时，记录以较高的速度产生。此外，你会看到在升级过程中没有丢失任何数据：所有窗口都存在，数量正好是 1000。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤2b: 用不同的并行度重新启动作业（重新缩放）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另外，您也可以在重新提交时通过传递不同的并行性，从这个保存点重新缩放作业。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose run --no-deps client flink run -p &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -s &amp;lt;savepoint-path&amp;gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -d /opt/ClickCountJob.jar &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --bootstrap.servers kafka:9092 --checkpointing --event-time
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的输出&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Starting execution of program
Job has been submitted with JobID &amp;lt;job-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;REST API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Uploading the JAR from the Client container&lt;/span&gt;
docker-compose run --no-deps client curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Expect:&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -F &lt;span class=&#34;s2&#34;&gt;&amp;#34;jarfile=@/opt/ClickCountJob.jar&amp;#34;&lt;/span&gt; http://jobmanager:8081/jars/upload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/flink-web-&amp;lt;uuid&amp;gt;/flink-web-upload/&amp;lt;jar-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Submitting the Job&lt;/span&gt;
curl -X POST http://localhost:8081/jars/&amp;lt;jar-id&amp;gt;/run &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;parallelism&amp;#34;: 3, &amp;#34;programArgs&amp;#34;: &amp;#34;--bootstrap.servers kafka:9092 --checkpointing --event-time&amp;#34;, &amp;#34;savepointPath&amp;#34;: &amp;#34;&amp;lt;savepoint-path&amp;gt;&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;jobid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;job-id&amp;gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在，作业(Job)已经被重新提交，但它不会启动，因为没有足够的 TaskSlots 在增加的并行度下执行它（2个可用，需要3个）。使用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker-compose scale &lt;span class=&#34;nv&#34;&gt;taskmanager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以在 Flink 集群中添加一个带有两个 TaskSlots 的第二个 TaskManager，它将自动注册到 JobManager 中。添加 TaskManager 后不久，该任务(Job)应该再次开始运行。&lt;/p&gt;
&lt;p&gt;一旦 Job 再次 &amp;ldquo;RUNNING&amp;rdquo;，你会在 &lt;em&gt;output&lt;/em&gt; Topic 中看到在重新缩放过程中没有丢失数据：所有的窗口都存在，计数正好是 1000。&lt;/p&gt;
&lt;h5 id=&#34;查询作业job的指标&#34;&gt;查询作业(Job)的指标&lt;/h5&gt;
&lt;p&gt;JobManager 通过其 REST API 公开系统和用户&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html&#34;&gt;指标&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;端点取决于这些指标的范围。可以通过 &lt;code&gt;jobs/&amp;lt;job-id&amp;gt;/metrics&lt;/code&gt; 来列出一个作业的范围内的度量。指标的实际值可以通过 get query 参数进行查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shells&#34; data-lang=&#34;shells&#34;&gt;curl &amp;quot;localhost:8081/jobs/&amp;lt;jod-id&amp;gt;/metrics?get=lastCheckpointSize&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印; 没有占位符)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;lastCheckpointSize&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;9378&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;REST API 不仅可以用来查询指标，还可以检索运行中的作业状态的详细信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;请求&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# find the vertex-id of the vertex of interest&lt;/span&gt;
curl localhost:8081/jobs/&amp;lt;jod-id&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;预期的响应(美化了打印)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;jid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;job-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Click Event Count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;isStoppable&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;start-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066026&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;end-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;374793&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;now&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467440819&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;timestamps&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066026&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;FINISHED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;SUSPENDED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELLING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RECONCILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066126&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RESTARTING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;vertices&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClickEvent Source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066423&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;374396&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FINISHED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;DEPLOYING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RECONCILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;SCHEDULED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;metrics&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5033461&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;166351&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Timestamps/Watermarks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066441&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;374378&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FINISHED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;DEPLOYING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RECONCILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;SCHEDULED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;metrics&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5066280&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5033496&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;166349&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;166349&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClickEvent Counter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066469&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;374350&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FINISHED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;DEPLOYING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RECONCILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;SCHEDULED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;metrics&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5085332&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;316&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;166305&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClickEventStatistics Sink&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;status&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;start-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1564467066476&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;end-time&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;duration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;374343&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;tasks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FINISHED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;DEPLOYING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;RECONCILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;SCHEDULED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nt&#34;&gt;&amp;#34;metrics&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20668&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-bytes-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;read-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;write-records-complete&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;status-counts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CREATED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;FINISHED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;DEPLOYING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RUNNING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;FAILED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CANCELED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RECONCILING&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;SCHEDULED&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;#34;plan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;jid&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;job-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Click Event Count&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;#34;nodes&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClickEventStatistics Sink&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;inputs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;ship_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;FORWARD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;exchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pipelined_bounded&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;optimizer_properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClickEvent Counter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;inputs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;ship_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HASH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;exchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pipelined_bounded&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;optimizer_properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Timestamps/Watermarks&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;inputs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;num&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;ship_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;FORWARD&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;#34;exchange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;pipelined_bounded&amp;#34;&lt;/span&gt;
          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;optimizer_properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;vertex-id&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;parallelism&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;operator_strategy&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ClickEvent Source&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;#34;optimizer_properties&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请查阅 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/rest_api.html#api&#34;&gt;REST API 参考资料&lt;/a&gt;，了解可能查询的完整列表，包括如何查询不同作用域的指标（如 TaskManager 指标）。&lt;/p&gt;
&lt;h4 id=&#34;变体&#34;&gt;变体&lt;/h4&gt;
&lt;p&gt;你可能已经注意到，Click Event Count 应用程序总是以 &lt;code&gt;--checkpointing&lt;/code&gt; 和 &lt;code&gt;--event-time&lt;/code&gt; 程序参数启动。通过在 docker-compose.yaml 的客户端容器的命令中省略这些，你可以改变 Job 的行为。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--checkpointing&lt;/code&gt; 启用了 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/learn-flink/fault_tolerance.html&#34;&gt;checkpoint&lt;/a&gt;，这是 Flink 的容错机制。如果你在没有它的情况下运行，并通过&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/try-flink/flink-operations-playground.html#observing-failure--recovery&#34;&gt;故障和恢复&lt;/a&gt;，你应该会看到数据实际上已经丢失了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--event-time&lt;/code&gt; 启用了你的 Job 的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/event_time.html&#34;&gt;事件时间语义&lt;/a&gt;。当禁用时，作业将根据挂钟时间而不是 ClickEvent 的时间戳将事件分配给窗口。因此，每个窗口的事件数量将不再是精确的 1000。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Click Event Count 应用程序还有另一个选项，默认情况下是关闭的，你可以启用这个选项来探索这个作业在背压下的行为。你可以在 &lt;code&gt;docker-compose.yaml&lt;/code&gt; 的客户端容器的命令中添加这个选项。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--backpressure&lt;/code&gt; 在作业中间增加了一个额外的 operator，在偶数分钟内会造成严重的背压（例如，在10:12期间，但在10:13期间不会）。这可以通过检查各种&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/metrics.html#default-shuffle-service&#34;&gt;网络指标&lt;/a&gt;（如 outputQueueLength 和 outPoolUsage）和/或使用 WebUI 中的&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/monitoring/back_pressure.html#monitoring-back-pressure&#34;&gt;背压监控&lt;/a&gt;来观察。&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flink">Flink</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/playground">Playground</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-17-flink-operations-playground/</guid>
                <pubDate>Mon, 17 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Python API 指南</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-17-python-api-tutorial/</link>
                
                
                <description>&lt;blockquote&gt;Python API Tutorial&lt;/blockquote&gt;&lt;h2 id=&#34;python-api-指南&#34;&gt;Python API 指南&lt;/h2&gt;
&lt;p&gt;本演练将快速让你开始构建一个纯 Python Flink 项目。&lt;/p&gt;
&lt;p&gt;关于如何设置 Python 执行环境，请参考 Python Table API &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/python/installation.html&#34;&gt;安装指南&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;设置一个-python-项目&#34;&gt;设置一个 Python 项目&lt;/h3&gt;
&lt;p&gt;您可以先创建一个 Python 项目，然后按照&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/python/installation.html#installation-of-pyflink&#34;&gt;安装指南&lt;/a&gt;安装 PyFlink 包。&lt;/p&gt;
&lt;h3 id=&#34;编写一个-flink-python-table-api-程序&#34;&gt;编写一个 Flink Python Table API 程序&lt;/h3&gt;
&lt;p&gt;Table API 应用程序通过声明一个表环境开始；对于批处理应用程序，可以是 BatchTableEvironment，对于流式应用程序，可以是 StreamTableEnvironment。这作为与 Flink 运行时交互的主要入口点。它可以用来设置执行参数，如重启策略、默认并行度等。表配置允许设置 Table API 的具体配置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;exec_env&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_execution_environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;exec_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_parallelism&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TableConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchTableEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec_env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在创建的表环境中，可以声明 source/sink 表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/tmp/input&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldCsv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_temporary_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySource&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/tmp/output&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldCsv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field_delimiter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BIGINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BIGINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_temporary_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySink&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你也可以使用 &lt;code&gt;TableEnvironment.sql_update()&lt;/code&gt; 方法来注册 DDL 中定义的 source/sink 表。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;my_source_ddl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    create table mySource (&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        word VARCHAR&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    ) with (&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;connector.type&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filesystem&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;format.type&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;csv&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;connector.path&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/tmp/input&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    )&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;my_sink_ddl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    create table mySink (&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        word VARCHAR,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        `count` BIGINT&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    ) with (&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;connector.type&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filesystem&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;format.type&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;csv&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;connector.path&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; = &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/tmp/output&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    )&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql_update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_source_ddl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sql_update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;my_sink_ddl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这将在执行环境中注册一个名为 &lt;strong&gt;mySource&lt;/strong&gt; 的表和一个名为 &lt;strong&gt;mySink&lt;/strong&gt; 的表。表 &lt;strong&gt;mySource&lt;/strong&gt; 只有一列，即 &lt;strong&gt;word&lt;/strong&gt;，它消耗从文件 &lt;code&gt;/tmp/input&lt;/code&gt; 中读取的字符串。表 &lt;strong&gt;mySink&lt;/strong&gt; 有两列，分别是 &lt;strong&gt;word&lt;/strong&gt; 和 &lt;strong&gt;count&lt;/strong&gt;，将数据写入文件 &lt;code&gt;/tmp/output&lt;/code&gt;，用 &lt;code&gt;/t&lt;/code&gt; 作为字段分隔符。&lt;/p&gt;
&lt;p&gt;现在，你可以创建一个作业(job)，它从表 &lt;strong&gt;mySource&lt;/strong&gt; 中读取输入，预先执行一些转换，并将结果写入表 &lt;strong&gt;mySink&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySource&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word, count(1)&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert_into&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySink&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后你必须执行实际的 Flink Python Table API 作业。所有的操作，如创建源、转换和 sink 都是懒惰的。只有当 &lt;code&gt;t_env.execute(job_name)&lt;/code&gt; 被调用时，作业才会被运行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;tutorial_job&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到目前为止，完整的代码如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pyflink.dataset&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExecutionEnvironment&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pyflink.table&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TableConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchTableEnvironment&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pyflink.table.descriptors&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OldCsv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;exec_env&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExecutionEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_execution_environment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;exec_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;set_parallelism&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_config&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TableConfig&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BatchTableEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec_env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t_config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/tmp/input&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldCsv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_temporary_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySource&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/tmp/output&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OldCsv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field_delimiter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\t&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BIGINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;with_schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;STRING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                 &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataTypes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BIGINT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create_temporary_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySink&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySource&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group_by&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;word, count(1)&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; \
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert_into&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;mySink&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;t_env&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;tutorial_job&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;执行-flink-python-table-api-程序&#34;&gt;执行 Flink Python Table API 程序&lt;/h3&gt;
&lt;p&gt;首先，你需要在 &amp;ldquo;/tmp/input&amp;rdquo; 文件中准备输入数据。你可以选择以下命令行来准备输入数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -e  &lt;span class=&#34;s2&#34;&gt;&amp;#34;flink\npyflink\nflink&amp;#34;&lt;/span&gt; &amp;gt; /tmp/input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来，你可以在命令行上运行这个例子（注意：如果结果文件 &amp;ldquo;/tmp/output&amp;rdquo; 已经存在，你需要在运行这个例子之前删除该文件）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ python WordCount.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该命令在本地小型集群中构建并运行 Python Table API 程序。你也可以将 Python Table API 程序提交到远程集群，详情可以参考 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/ops/cli.html#job-submission-examples&#34;&gt;Job Submission Examples&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，您可以在命令行中看到执行结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ cat /tmp/output
flink	&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
pyflink	&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这应该可以让你开始编写自己的 Flink Python Table API 程序。要了解更多关于 Python Table API 的信息，你可以参考 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/api/python&#34;&gt;Flink Python Table API Docs&lt;/a&gt; 了解更多细节。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flink">Flink</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/python">Python</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-17-python-api-tutorial/</guid>
                <pubDate>Mon, 17 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Flink 中的 Connectors</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-05-connectors-in-flink/</link>
                
                
                <description>&lt;blockquote&gt;连接器&lt;/blockquote&gt;&lt;h1 id=&#34;apache-kafka-connector&#34;&gt;Apache Kafka Connector&lt;/h1&gt;
&lt;h2 id=&#34;kafka-consumer&#34;&gt;Kafka Consumer&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;k&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bootstrap.servers&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;localhost:9092&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setProperty&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;group.id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;env&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addSource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;FlinkKafkaConsumer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;topic&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;SimpleStringSchema&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flink">Flink</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/connector">Connector</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-05-connectors-in-flink/</guid>
                <pubDate>Fri, 07 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 中的 模块</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-05-modules-in-julia/</link>
                
                
                <description>&lt;blockquote&gt;Modules&lt;/blockquote&gt;&lt;h1 id=&#34;模块&#34;&gt;模块&lt;/h1&gt;
&lt;p&gt;Julia 中的模块是独立的变量工作空间，即它们引入了一个新的全局作用域。它们在语法上是有分界的，在 &lt;code&gt;module Name ... end&lt;/code&gt; 里面。模块允许您创建顶层定义（也就是全局变量），而不用担心您的代码与别人的代码一起使用时的名称冲突。在一个模块中，你可以控制哪些来自其他模块的名字是可见的（通过导入），并指定哪些名字是要公开的（通过导出）。&lt;/p&gt;
&lt;p&gt;下面的例子展示了模块的主要功能。这个例子并不是为了运行，而是为了说明问题。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyModule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BigLib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;thing2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;IO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyType&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;M&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，这个样式并不是要在模块的正文中缩进，因为这通常会导致整个文件被缩进。&lt;/p&gt;
&lt;p&gt;这个模块定义了一个 &lt;code&gt;MyType&lt;/code&gt; 类型和两个函数。函数 &lt;code&gt;foo&lt;/code&gt; 和 &lt;code&gt;MyType&lt;/code&gt; 类型是导出的，因此可以导入到其他模块中。函数 &lt;code&gt;bar&lt;/code&gt; 是 &lt;code&gt;MyModule&lt;/code&gt; 的私有函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using Lib&lt;/code&gt; 语句意味着将有一个名为 &lt;code&gt;Lib&lt;/code&gt; 的模块可以根据需要解析名称。当遇到一个全局变量在当前模块中没有定义时，系统会在 &lt;code&gt;Lib&lt;/code&gt; 导出的变量中搜索它，如果在那里找到了，就会导入它。这意味着在当前模块内对该全局的所有使用都将解析为该变量在 &lt;code&gt;Lib&lt;/code&gt; 中的定义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;using BigLib: thing1, thing2&lt;/code&gt; 语句，只将标识符 &lt;code&gt;thing1&lt;/code&gt; 和 &lt;code&gt;thing2&lt;/code&gt; 从模块 &lt;code&gt;BigLib&lt;/code&gt; 中带入作用域。如果这些名称指的是函数，那么将不允许向它们添加方法（你只能 &amp;ldquo;使用 &amp;ldquo;它们，而不是扩展它们）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;import&lt;/code&gt; 关键字支持与 &lt;code&gt;using&lt;/code&gt; 相同的语法。&lt;code&gt;import&lt;/code&gt; 与 &lt;code&gt;using&lt;/code&gt; 的不同之处在于，使用 &lt;code&gt;import&lt;/code&gt; 导入的函数可以用新的方法进行扩展。&lt;/p&gt;
&lt;p&gt;在上面的 &lt;code&gt;MyModule&lt;/code&gt; 中，我们想给标准的 &lt;code&gt;show&lt;/code&gt; 函数添加一个方法，所以我们必须写 &lt;code&gt;import Base.show&lt;/code&gt;。只有通过 &lt;code&gt;using&lt;/code&gt; 才能看到名字的函数不能被扩展。&lt;/p&gt;
&lt;p&gt;一旦一个变量通过 &lt;code&gt;using&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 变得可见，一个模块就不能创建自己的同名变量。导入的变量是只读的，分配给全局变量总是会影响到当前模块所拥有的变量，否则会引发错误。&lt;/p&gt;
&lt;h2 id=&#34;模块使用情况概述&#34;&gt;模块使用情况概述&lt;/h2&gt;
&lt;p&gt;要加载一个模块，可以使用两个主要的关键词：&lt;code&gt;using&lt;/code&gt; 和 &lt;code&gt;import&lt;/code&gt;。要了解它们的区别，请看下面的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyModule&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个模块中，我们导出了 &lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt; 函数(用关键字 &lt;code&gt;export&lt;/code&gt;)，也有非导出的函数 &lt;code&gt;p&lt;/code&gt;，有几种不同的方法可以将 &lt;code&gt;Module&lt;/code&gt; 及其内部函数加载到当前的工作空间中。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;导入命令&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;带入带作用域中的东西&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;可用于方法扩展&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;using MyModule&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;所有导出的名字(&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;y&lt;/code&gt;), &lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;using MyModule: x, p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;import MyModule&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; 和 &lt;code&gt;MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;import MyModule.x, MyModule.p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;import MyModule: x, p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;x&lt;/code&gt; 和 &lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;模块和文件&#34;&gt;模块和文件&lt;/h2&gt;
&lt;p&gt;文件和文件名大多与模块无关，模块只与模块表达式有关。一个模块可以有多个文件，一个文件可以有多个模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在不同的模块中包含相同的代码，提供了类似 mixin 的行为。人们可以使用这一点来用不同的基础定义来运行相同的代码，例如，通过使用某些操作符的&amp;quot;安全&amp;quot;版本来测试代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Normal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Testing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;标准模块&#34;&gt;标准模块&lt;/h2&gt;
&lt;p&gt;There are three important standard modules:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Core&#34;&gt;Core&lt;/a&gt; 包含&amp;quot;内置于&amp;quot;语言中的所有功能。
&lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base&#34;&gt;Base&lt;/a&gt; 包含几乎在所有情况下都有用的基本功能。
&lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Main&#34;&gt;Main&lt;/a&gt; 是当 Julia 被启动时的顶级模块和当前模块。&lt;/p&gt;
&lt;h2 id=&#34;默认的顶层定义和裸模块&#34;&gt;默认的顶层定义和裸模块&lt;/h2&gt;
&lt;p&gt;除了 &lt;code&gt;using Base&lt;/code&gt; 之外，模块还自动包含 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval&#34;&gt;eval&lt;/a&gt;和 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.include&#34;&gt;include&lt;/a&gt; 函数的定义，这些函数在该模块的全局作用域内评估表达式/文件。&lt;/p&gt;
&lt;p&gt;如果不想要这些默认的定义，可以使用关键字 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#baremodule&#34;&gt;baremodule&lt;/a&gt; 来代替定义模块（注意： &lt;code&gt;Core&lt;/code&gt; 仍然是导入的，如上所述）。以 &lt;code&gt;baremodule&lt;/code&gt; 来说，一个标准的模块是这样的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;baremodule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Mod&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;相对和绝对模块路径&#34;&gt;相对和绝对模块路径&lt;/h2&gt;
&lt;p&gt;给定 &lt;code&gt;using Foo&lt;/code&gt; 语句，系统会查询内部的顶层模块表，寻找一个名为 &lt;code&gt;Foo&lt;/code&gt; 的模块。如果该模块不存在，系统会尝试 &lt;code&gt;require(:Foo)&lt;/code&gt;，这通常会导致从安装的包中加载代码。&lt;/p&gt;
&lt;p&gt;然而，有些模块包含子模块，这意味着你有时需要访问一个非顶层模块。有两种方法可以做到这一点。第一种是使用绝对路径，例如 &lt;code&gt;using Base.Sort&lt;/code&gt;。第二种是使用相对路径，这样可以更容易地导入当前模块的子模块或其任何一个外层模块。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Utils&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这里模块 &lt;code&gt;Parent&lt;/code&gt; 包含一个子模块 &lt;code&gt;Utils&lt;/code&gt;，&lt;code&gt;Parent&lt;/code&gt; 中的代码希望 &lt;code&gt;Utils&lt;/code&gt; 的内容可见。这可以通过在 &lt;code&gt;using&lt;/code&gt; 路径中使用点号来实现。添加更多的前导点号会使模块的层次结构上升。例如，&lt;code&gt;using ..Utils&lt;/code&gt; 会在 &lt;code&gt;Parent&lt;/code&gt; 的外层模块中查找&lt;code&gt;Utils&lt;/code&gt;，而不是在 &lt;code&gt;Parent&lt;/code&gt; 本身中查找。&lt;/p&gt;
&lt;p&gt;注意相对导入限定符只在使用和导入语句中有效。&lt;/p&gt;
&lt;h2 id=&#34;命名空间杂项&#34;&gt;命名空间杂项&lt;/h2&gt;
&lt;p&gt;如果一个名字是限定的(例如 &lt;code&gt;Base.sin&lt;/code&gt;)，那么即使它没有被导出，也可以被访问。这在调试时往往很有用。它也可以通过使用限定名作为函数名来添加方法。但是，由于会产生语法上的歧义，如果你想给不同模块中的一个函数添加方法，而这个函数的名称只包含符号，例如一个运算符，&lt;code&gt;Base.+&lt;/code&gt;，你必须使用 &lt;code&gt;Base.:+&lt;/code&gt; 来引用它。如果运算符的长度超过一个字符，你必须用括号把它括起来，比如 &lt;code&gt;Base.:(==)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在导入和导出语句中，宏的名称用 &lt;code&gt;@&lt;/code&gt; 书写，例如 &lt;code&gt;import Mod.@mac&lt;/code&gt;。其他模块中的宏可以用 &lt;code&gt;Mod.@mac&lt;/code&gt; 或 &lt;code&gt;@Mod.mac&lt;/code&gt; 来调用。&lt;/p&gt;
&lt;p&gt;语法 &lt;code&gt;M.x = y&lt;/code&gt; 不能用于分配其他模块中的全局，全局分配总是模块-局部的。&lt;/p&gt;
&lt;p&gt;变量名可以通过声明为 &lt;code&gt;global x&lt;/code&gt; 来 &amp;ldquo;保留&amp;quot;而不分配给它，这样可以防止加载后初始化的 globals 的名称冲突。&lt;/p&gt;
&lt;h2 id=&#34;模块初始化和预编译&#34;&gt;模块初始化和预编译&lt;/h2&gt;
&lt;p&gt;大型模块可能需要几秒钟的时间来加载，因为执行一个模块中的所有语句往往需要编译大量的代码。Julia 创建了模块的预编译缓存来减少这个时间。&lt;/p&gt;
&lt;p&gt;当使用 &lt;code&gt;import&lt;/code&gt; 或 &lt;code&gt;using&lt;/code&gt; 加载模块时，会自动创建并使用增量的预编译模块文件。这将导致它在第一次导入时自动编译。另外，您也可以手动调用 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.compilecache&#34;&gt;Base.compilecache(modulename)&lt;/a&gt;。由此产生的缓存文件将存储在 &lt;code&gt;DEPOT_PATH[1]/compiled/&lt;/code&gt; 中。随后，只要模块的任何依赖关系发生变化，模块就会在 &lt;code&gt;using&lt;/code&gt; 或 &lt;code&gt;import&lt;/code&gt; 时自动重新编译；依赖关系是指导入的模块、Julia 构建的模块、包含的文件，或者模块文件中 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.include_dependency&#34;&gt;include_dependency(path)&lt;/a&gt; 声明的显式依赖关系。&lt;/p&gt;
&lt;p&gt;对于文件依赖，通过检查由 &lt;code&gt;include&lt;/code&gt; 加载的文件或由 &lt;code&gt;include_dependency&lt;/code&gt; 显式添加的文件的修改时间(mtime)是否保持不变，或者是否等于被截断到最接近秒的修改时间(以适应无法以亚秒级精度复制 mtime 的系统)来确定变化。它还考虑到在 &lt;code&gt;require&lt;/code&gt; 中搜索逻辑选择的文件路径是否与创建预编译文件的路径匹配。它还会考虑到已经加载到当前进程中的一组依赖关系，即使这些模块的文件发生变化或消失，也不会重新编译这些模块，以避免在运行系统和预编译缓存之间产生不兼容的情况。&lt;/p&gt;
&lt;p&gt;如果你知道某个模块预编译你的模块是不安全的（例如，出于下面描述的原因之一），你应该在模块文件中加上 &lt;code&gt;__precompile__(false)&lt;/code&gt;（通常放在顶部）。这将导致 &lt;code&gt;Base.compilecache&lt;/code&gt; 抛出一个错误，并将导致 &lt;code&gt;using&lt;/code&gt; / &lt;code&gt;import&lt;/code&gt; 直接将其加载到当前进程中而跳过预编译和缓存。这也因此阻止了该模块被任何其他预编译模块导入。&lt;/p&gt;
&lt;p&gt;您可能需要注意创建增量共享库时固有的某些行为，在编写模块时可能需要注意。例如，外部状态不会被保存。为了适应这一点，明确地将任何必须在运行时发生的初始化步骤与可以在编译时发生的步骤分开。为此，Julia 允许您在您的模块中定义一个 &lt;code&gt;__init__()&lt;/code&gt; 函数来执行任何必须在运行时发生的初始化步骤。这个函数在编译时不会被调用（&lt;code&gt;--output-*&lt;/code&gt;）。实际上，你可以假设它在代码的生命周期中只运行一次。当然，如果有必要的话，你可以手动调用它，但是默认情况下，你可以假设这个函数处理的是本地机器的计算状态，它不需要&amp;ndash;甚至不应该&amp;ndash;在编译后的镜像中捕获。它将在模块被加载到一个进程后被调用，包括如果它被加载到增量编译中(&lt;code&gt;--output-incremental=yes&lt;/code&gt;)，但如果它被加载到一个完整的编译进程中，则不会被调用。&lt;/p&gt;
&lt;p&gt;特别是，如果你在一个模块中定义了一个 &lt;code&gt;function __init__()&lt;/code&gt;，那么 Julia 将在模块被加载后（例如通过 &lt;code&gt;import&lt;/code&gt;、&lt;code&gt;using&lt;/code&gt; 或 &lt;code&gt;require&lt;/code&gt;）在运行时第一次立即调用 &lt;code&gt;__init__()&lt;/code&gt;（也就是说，&lt;code&gt;__init__&lt;/code&gt; 只被调用一次，而且是在模块中的所有语句被执行后才被调用）。因为它是在模块完全导入之后被调用的，所以任何子模块或其它导入的模块都会在外层模块的 &lt;code&gt;__init__&lt;/code&gt; 之前调用它们的 &lt;code&gt;__init__&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__init__&lt;/code&gt; 的两个典型用途是调用外部 C 库的运行时初始化函数和初始化涉及外部库返回指针的全局常量。例如，假设我们正在调用一个 C 库 &lt;code&gt;libfoo&lt;/code&gt;，它要求我们在运行时调用 &lt;code&gt;foo_init()&lt;/code&gt; 初始化函数。假设我们还想定义一个全局常量 &lt;code&gt;foo_data_ptr&lt;/code&gt;，用来存放 &lt;code&gt;libfoo&lt;/code&gt; 定义的 &lt;code&gt;void *foo_data()&lt;/code&gt; 函数的返回值&amp;ndash;这个常量必须在运行时（而不是在编译时）初始化，因为指针地址会随着运行而改变。你可以通过在你的模块中定义下面的 &lt;code&gt;__init__&lt;/code&gt; 函数来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foo_data_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Ref&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cvoid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;ccall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo_init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libfoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cvoid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;foo_data_ptr&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ccall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;libfoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cvoid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;nothing&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请注意，我们完全可以在函数内部定义一个全局，比如 &lt;code&gt;__init__&lt;/code&gt;；这是使用动态语言的优势之一。但是通过在全局作用域内定义一个常量，我们可以确保编译器知道这个类型，并允许它生成更好的优化代码。显然，你的模块中任何其他依赖于 &lt;code&gt;foo_data_ptr&lt;/code&gt; 的 globals 也必须在 &lt;code&gt;__init__&lt;/code&gt; 中初始化。&lt;/p&gt;
&lt;p&gt;涉及大多数不是由 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/c/#ccall&#34;&gt;ccall&lt;/a&gt; 产生的 Julia 对象的常量不需要放在 &lt;code&gt;__init__&lt;/code&gt; 中：它们的定义可以被预编译并从缓存的模块映像中加载。这包括像数组这样复杂的堆分配对象。然而，任何返回原始指针值的例程都必须在运行时调用，以便预编译工作（&lt;a href=&#34;https://docs.julialang.org/en/v1/base/c/#Core.Ptr&#34;&gt;Ptr&lt;/a&gt; 对象将变成空指针，除非它们被隐藏在 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.isbits&#34;&gt;isbits&lt;/a&gt; 对象中）。这包括 Julia 函数 &lt;code&gt;cfunction&lt;/code&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/c/#Base.pointer&#34;&gt;pointer&lt;/a&gt; 的返回值。&lt;/p&gt;
&lt;p&gt;字典和集合类型，或者一般来说任何依赖于 &lt;code&gt;hash(key)&lt;/code&gt; 方法输出的东西，都是比较棘手的情况。在常见的情况下，键是数字、字符串、符号、范围、&lt;code&gt;Expr&lt;/code&gt; 或这些类型的组合（通过数组、元组、集合、对等），它们可以安全地进行预编译。然而，对于其他一些关键类型，如 &lt;code&gt;Function&lt;/code&gt; 或 &lt;code&gt;DataType&lt;/code&gt; 和通用的用户定义类型，在这些类型中，你没有定义 &lt;code&gt;hash&lt;/code&gt; 方法，回退 &lt;code&gt;hash&lt;/code&gt; 方法取决于对象的内存地址（通过它的 &lt;code&gt;objectid&lt;/code&gt;），因此可能会在运行时改变。如果你有这些键类型之一，或者如果你不确定，为了安全起见，你可以在你的 &lt;code&gt;__init__&lt;/code&gt; 函数中初始化这个字典。或者，你也可以使用 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/collections/#Base.IdDict&#34;&gt;IdDict&lt;/a&gt; 字典类型，它由预编译特别处理，所以在编译时初始化是安全的。&lt;/p&gt;
&lt;p&gt;在使用预编译时，保持对编译阶段和执行阶段的清晰认识很重要。在这种模式下，往往会更清楚地认识到 Julia 是一个允许执行任意 Julia 代码的编译器，而不是一个同时生成编译代码的独立解释器。&lt;/p&gt;
&lt;p&gt;其他已知的潜在故障情况包括。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局计数器（例如，用于试图唯一识别对象）。考虑以下代码片段。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;mutable&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UniquedById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;myid&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;UniquedById&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;虽然这段代码的目的是给每个实例一个唯一的 id，但计数器的值是在编译结束时记录的。这个增量编译模块的所有后续使用将从同一个计数器值开始。&lt;/p&gt;
&lt;p&gt;请注意，&lt;code&gt;objectid&lt;/code&gt;（通过哈希内存指针工作）也有类似的问题（参见下面关于 &lt;code&gt;Dict&lt;/code&gt; 用法的说明）。&lt;/p&gt;
&lt;p&gt;一种替代方法是使用宏来捕获 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.@__MODULE__&#34;&gt;@&lt;strong&gt;MODULE&lt;/strong&gt;&lt;/a&gt;，并将其与当前的计数器值一起单独存储，然而，重新设计代码使其不依赖于这个全局状态可能会更好。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;关联集合(比如 &lt;code&gt;Dict&lt;/code&gt; 和 &lt;code&gt;Set&lt;/code&gt;)需要在 &lt;code&gt;__init__&lt;/code&gt; 中重新洗牌(将来可能会提供一个机制来注册一个初始化函数)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据编译时的副作用在加载时持续存在。例如：修改其他 Julia 模块中的数组或其他变量；维护打开的文件或设备的句柄；存储其他系统资源（包括内存）的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过直接引用而不是通过它的查找路径，从另一个模块创建意外的全局状态&amp;quot;副本&amp;rdquo;。例如，（在全局作用域内）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;c&#34;&gt;#mystdout = Base.stdout #= will not work correctly, since this will copy Base.stdout into this module =#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# instead use accessor functions:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;getstdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;#=&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;=#&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# or move the assignment into the runtime:&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;global&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mystdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;#=&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt; &lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;=#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对预编译代码时可以进行的操作进行了一些额外的限制，以帮助用户避免其他错误行为的情况。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;调用 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/base/#Base.MainInclude.eval&#34;&gt;eval&lt;/a&gt; 引起另一个模块的副作用。当增量预编译标志被设置时，这也会导致发出警告。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;__init__()&lt;/code&gt; 被启动后，从本地作用域调用 &lt;code&gt;global const&lt;/code&gt; 语句(参见问题 &lt;code&gt;#12010&lt;/code&gt;，计划为此增加一个错误)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在进行增量预编译时，替换一个模块是一个运行时错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;还有几点需要注意。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在对源文件本身进行修改之后，不会进行代码重载/缓存无效化（包括通过 &lt;code&gt;Pkg.update&lt;/code&gt;），而且在 &lt;code&gt;Pkg.rm&lt;/code&gt; 之后也不会进行清理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;预编译不考虑重塑数组的内存共享行为 (每个视图都有自己的副本)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;期待文件系统在编译时和运行时之间保持不变，例如 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/file/#Base.@__FILE__&#34;&gt;@&lt;strong&gt;FILE&lt;/strong&gt;&lt;/a&gt;/&lt;code&gt;source_path()&lt;/code&gt; 在运行时查找资源，或者 BinDeps 的 &lt;code&gt;@checked_lib&lt;/code&gt; 宏。有时这是不可避免的。然而，在可能的情况下，在编译时将资源复制到模块中是一个很好的做法，这样它们就不需要在运行时被找到。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WeakRef&lt;/code&gt; 对象和 finalizers 目前还没有被序列化器正确处理（这将在即将发布的版本中得到修正）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通常最好避免捕获对内部元数据对象实例的引用，如 &lt;code&gt;Method&lt;/code&gt;、&lt;code&gt;MethodInstance&lt;/code&gt;、&lt;code&gt;MethodTable&lt;/code&gt;、&lt;code&gt;TypeMapLevel&lt;/code&gt;、&lt;code&gt;TypeMapEntry&lt;/code&gt; 以及这些对象的字段，因为这可能会混淆序列化器，可能不会导致你想要的结果。这样做不一定会出错，但你只需要做好准备，系统会尝试复制其中的一些对象，并为其他对象创建一个唯一的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在模块开发过程中，有时关闭增量预编译是很有帮助的。命令行标志 &lt;code&gt;--compiled-modules={yes|no}&lt;/code&gt; 可以让你开启或关闭模块预编译。当 Julia 以 &lt;code&gt;--compiled-modules=no&lt;/code&gt; 启动时，当加载模块和模块依赖时，编译缓存中的序列化模块会被忽略。&lt;code&gt;Base.compilecache&lt;/code&gt; 仍然可以被手动调用。这个命令行标志的状态被传递给 &lt;code&gt;Pkg.build&lt;/code&gt;，以便在安装、更新和显式构建包时禁用自动预编译触发。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/module">module</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-05-modules-in-julia/</guid>
                <pubDate>Wed, 05 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 中的 Pkg</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/</link>
                
                
                <description>&lt;blockquote&gt;Pkg&lt;/blockquote&gt;&lt;h2 id=&#34;进入-pkg-模式&#34;&gt;进入 Pkg 模式&lt;/h2&gt;
&lt;p&gt;Pkg 是 Julia 中包管理工具。Pkg 来自于 REPL, 在 Julia 的 REPL 中按下 &lt;code&gt;]&lt;/code&gt; 就进入 Pkg REPL 了。要回到 Julia REPL, 按退格键或 &lt;code&gt;^C&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用-pkg&#34;&gt;使用 Pkg&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;add JSON              &lt;span class=&#34;c1&#34;&gt;# 添加一个 package&lt;/span&gt;
add JSON StaticArrays &lt;span class=&#34;c1&#34;&gt;# 添加多个 package&lt;/span&gt;
rm JSON               &lt;span class=&#34;c1&#34;&gt;# 移除一个 package&lt;/span&gt;
rm JSON StaticArrays  &lt;span class=&#34;c1&#34;&gt;# 移除多个 package&lt;/span&gt;
add https://github.com/JuliaLang/Example.jl &lt;span class=&#34;c1&#34;&gt;# 添加一个未注册的 package&lt;/span&gt;
rm Example            &lt;span class=&#34;c1&#34;&gt;# 按名字移除 package&lt;/span&gt;
update Example        &lt;span class=&#34;c1&#34;&gt;# 升级一个已安装的 package&lt;/span&gt;
update                &lt;span class=&#34;c1&#34;&gt;# 升级所有已安装的 package&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;environments&#34;&gt;environments&lt;/h2&gt;
&lt;p&gt;你可能已经注意到 Pkg REPL 提示符前面的 &lt;code&gt;(@v1.5)&lt;/code&gt; 字符串了。这里的  &lt;code&gt;(@v1.5)&lt;/code&gt; 就是激活环境(&lt;strong&gt;active environment&lt;/strong&gt;)。激活环境是能被诸如 &lt;code&gt;add&lt;/code&gt;、&lt;code&gt;rm&lt;/code&gt; 和 &lt;code&gt;update&lt;/code&gt; 等 Pkg 命令修改的环境。&lt;/p&gt;
&lt;p&gt;我们可以设置一个新的激活环境用于实验。要设置激活环境, 使用 &lt;code&gt;activate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;@v1.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; activate tutorial
Activating new environment at &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;~/tutorial/Project.toml&lt;/code&gt; 是激活环境的项目文件。项目文件是 Pkg 存储环境的元数据的地方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; status
Status &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty project&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;现在这个新的环境是空的, 我们添加一个 package 观察下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; add Example
   Updating registry at &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/.julia/registries/General&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
   Updating git-repo &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;https://github.com/JuliaRegistries/General.git&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  Resolving package versions...
    Cloning &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07-990d-54b4-ab0e-23690620f79a&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Example from https://github.com/JuliaLang/Example.jl.git
  Installed Example ─ v0.5.3
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; + Example v0.5.3
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Manifest.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; + Example v0.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;status&lt;/code&gt; 命令查看激活环境的信息:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; status
Status &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; Example v0.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用 &lt;code&gt;develop&lt;/code&gt; 命令设置 &lt;code&gt;Example&lt;/code&gt; package 的 一个 &lt;code&gt;git clone&lt;/code&gt;, 以供我们修改这个本地仓库:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; develop --local Example
    Cloning git-repo &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;https://github.com/JuliaLang/Example.jl.git&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  Resolving package versions...
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.3 ⇒ v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Manifest.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.3 ⇒ v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 &lt;code&gt;;&lt;/code&gt; 切换到 shell 模式, 用 vi 修改 &lt;code&gt;~/tutorial/dev/Example/src/Example.jl&lt;/code&gt; 文件, 增加一个 &lt;code&gt;plusone&lt;/code&gt; 函数, 保存。&lt;/p&gt;
&lt;p&gt;在 Julia 的 REPL 中, 导入修改后的 &lt;code&gt;Example&lt;/code&gt; package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; import Example
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; Info: Precompiling Example &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07-990d-54b4-ab0e-23690620f79a&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

julia&amp;gt; Example.plusone&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;

julia&amp;gt; Example.plusone&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;4&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以看到我们添加的函数生效了, 这样就很方便我们添加测试新功能。如果我们已经不再需要本地的 &lt;code&gt;Example&lt;/code&gt; 了, 需要使用 &lt;code&gt;free&lt;/code&gt; 命令以停止使用本地克隆的 package, 转而使用已注册版本代替:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; free Example
  Resolving package versions...
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; ⇒ v0.5.3
Updating &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/tutorial/Manifest.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;7876af07&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; ~ Example v0.5.4 &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;dev/Example&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt; ⇒ v0.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果已经用 &lt;code&gt;tutorial&lt;/code&gt; 做完实验了, 可以使用不带参数的 &lt;code&gt;activate&lt;/code&gt; 回到默认环境:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;tutorial&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; activate
 Activating environment at &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;~/.julia/environments/v1.5/Project.toml&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;@v1.5&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; pkg&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/pkg">pkg</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-04-pkg-in-julia/</guid>
                <pubDate>Tue, 04 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 中的日期和时间</title>
                <link>https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/</link>
                
                
                <description>&lt;blockquote&gt;Dates in Julia&lt;/blockquote&gt;&lt;h1 id=&#34;dates-模块的加载和使用&#34;&gt;Dates 模块的加载和使用&lt;/h1&gt;
&lt;p&gt;在 Julia 的 Pkg REPL 中, 输入 &lt;code&gt;add Dates&lt;/code&gt; 添加 Dates 模块。回到 Julia 的 REPL 中, 输入:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; using Dates

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-01-01T00:00:00

julia&amp;gt; typeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
DateTime

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T00:00:00

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:00:00

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12,30&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:30:00

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12,30,59&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:30:59

julia&amp;gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020,8,1,12,30,59, 999&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01T12:30:59.999

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020, 8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020, 8, 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Dates.Year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;8&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;,Dates.Year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2020&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2020-08-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;date-和-datetime-的算术操作&#34;&gt;Date 和 DateTime 的算术操作&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2012,2,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2012-02-29

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2000,2,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2000-02-01

julia&amp;gt; dump&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date
  instant: Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    periods: Day
      value: Int64 &lt;span class=&#34;m&#34;&gt;734562&lt;/span&gt;

julia&amp;gt; dump&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date
  instant: Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    periods: Day
      value: Int64 &lt;span class=&#34;m&#34;&gt;730151&lt;/span&gt;

julia&amp;gt; dt &amp;gt; dt2
&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;

julia&amp;gt; dt !&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; dt2
&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;

julia&amp;gt; dt + dt2
ERROR: MethodError: no method matching +&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::Date, ::Date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

julia&amp;gt; dt * dt2
ERROR: MethodError: no method matching *&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::Date, ::Date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;

julia&amp;gt; dt / dt2
ERROR: MethodError: no method matching /&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;::Date, ::Date&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; dt - dt2
&lt;span class=&#34;m&#34;&gt;4411&lt;/span&gt; days

julia&amp;gt; typeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt - dt2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Day

julia&amp;gt; dt2 - dt
-4411 days

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2012,2,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2012-02-29T00:00:00

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dt2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; DateTime&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2000,2,1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2000-02-01T00:00:00

julia&amp;gt; dt - dt2
&lt;span class=&#34;m&#34;&gt;381110400000&lt;/span&gt; milliseconds

julia&amp;gt; typeof&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dt - dt2&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Millisecond
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;访问器函数&#34;&gt;访问器函数&lt;/h1&gt;
&lt;p&gt;因为 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Date&#34;&gt;Date&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.DateTime&#34;&gt;DateTime&lt;/a&gt; 类型被存储为单个 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/numbers/#Core.Int64&#34;&gt;Int64&lt;/a&gt; 值，所以日期部分或字段可以通过访问器函数进行检索。小写访问器函数以整数形式返回字段。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-01-31

julia&amp;gt; Dates.year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2014&lt;/span&gt;

julia&amp;gt; Dates.month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

julia&amp;gt; Dates.week&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;

julia&amp;gt; Dates.day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而专有形式返回相应 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period&#34;&gt;Period&lt;/a&gt; 类型中的相同值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.Year&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;2014&lt;/span&gt; years

julia&amp;gt; Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt; days
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Julia 还提供了复合方法，因为在同时需要多个字段的情况下，这些方法提供了一种效率衡量标准。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.yearmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; Dates.monthday&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; Dates.yearmonthday&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以访问底层 &lt;code&gt;UTInstant&lt;/code&gt; 或整数值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; dump&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date
  instant: Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    periods: Day
      value: Int64 &lt;span class=&#34;m&#34;&gt;735264&lt;/span&gt;

julia&amp;gt; t.instant
Dates.UTInstant&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;735264&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; Dates.value&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;735264&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;查询函数&#34;&gt;查询函数&lt;/h1&gt;
&lt;p&gt;查询函数提供关于 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 的历法信息。它们包括关于一周中的某一天的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014, 1, 31&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-01-31

julia&amp;gt; Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;

julia&amp;gt; Dates.dayname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;Friday&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.dayofweekofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 5th Friday of January&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;

julia&amp;gt; Dates.monthname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;January&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.daysinmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以及 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 的年份和季度信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.isleapyear&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;

julia&amp;gt; Dates.dayofyear&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;

julia&amp;gt; Dates.quarterofyear&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;

julia&amp;gt; Dates.dayofquarter&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;m&#34;&gt;31&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayname&#34;&gt;dayname&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthname&#34;&gt;monthname&lt;/a&gt; 方法也可以使用一个可选的 &lt;code&gt;locale&lt;/code&gt; 关键字，它可以用来返回其他语言/地区的年份或月份的名称。这些函数也有返回缩写名称的版本，即 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.dayabbr&#34;&gt;dayabbr&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.monthabbr&#34;&gt;monthabbr&lt;/a&gt;。首先将映射加载到 &lt;code&gt;LOCALES&lt;/code&gt; 变量中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;french_months&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;janvier&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;février&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;mars&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;avril&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;mai&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;juin&amp;#34;&lt;/span&gt;,
                        &lt;span class=&#34;s2&#34;&gt;&amp;#34;juillet&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;août&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;septembre&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;octobre&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;novembre&amp;#34;&lt;/span&gt;, &lt;span class=&#34;s2&#34;&gt;&amp;#34;décembre&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;french_monts_abbrev&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;janv&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;févr&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mars&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;avril&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mai&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;juin&amp;#34;&lt;/span&gt;,
                              &lt;span class=&#34;s2&#34;&gt;&amp;#34;juil&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;août&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;sept&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;oct&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;nov&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;déc&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;french_days&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;lundi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mardi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;mercredi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;jeudi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;vendredi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;samedi&amp;#34;&lt;/span&gt;,&lt;span class=&#34;s2&#34;&gt;&amp;#34;dimanche&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; Dates.LOCALES&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.DateLocale&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;french_months, french_monts_abbrev, french_days, &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后可以利用上述函数进行查询。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.dayname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;vendredi&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.monthname&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;janvier&amp;#34;&lt;/span&gt;

julia&amp;gt; Dates.monthabbr&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;janv&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;由于没有加载日期的缩写版本，试图使用函数 &lt;code&gt;dayabbr&lt;/code&gt; 会出错。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.dayabbr&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;french&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
ERROR: BoundsError: attempt to access 1-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;String,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; at index &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;5&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
Stacktrace:
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;...&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;时间类型-周期算术&#34;&gt;时间类型-周期算术&lt;/h1&gt;
&lt;p&gt;在使用任何语言/日期框架时，熟悉如何处理日期-周期算术是一个很好的做法，因为有一些&lt;a href=&#34;https://codeblog.jonskeet.uk/2010/12/01/the-joys-of-date-time-arithmetic/&#34;&gt;棘手的问题&lt;/a&gt;需要处理（尽管对于日-精度类型来说要少得多）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dates&lt;/code&gt; 模块的方法试图遵循简单的原则，即在做 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.Period&#34;&gt;Period&lt;/a&gt; 算术时尽量少改。这种方法也常被称为历法算术，或者说如果有人在对话中问你同样的计算方法，你可能会猜到。为什么要大惊小怪呢？我们举个经典的例子：把2014年1月31日加1个月。答案是什么？Javascript 会说&lt;a href=&#34;https://markhneedham.com/blog/2009/01/07/javascript-add-a-month-to-a-date/&#34;&gt;3月3日&lt;/a&gt;（假设31天）。PHP 会说&lt;a href=&#34;https://stackoverflow.com/questions/5760262/php-adding-months-to-a-date-while-not-exceeding-the-last-day-of-the-month&#34;&gt;3月2日&lt;/a&gt;（假设30天）。事实上，没有正确的答案。在 &lt;code&gt;Dates&lt;/code&gt; 模块中，它给出的结果是2月28日。它是如何计算出来的呢？我喜欢想到赌场里经典的 7-7-7 赌博游戏。&lt;/p&gt;
&lt;p&gt;现在只要想象一下，老虎机不是 7-7-7，而是年-月-日，或者在我们的例子中，2014-01-31。当你要求在这个日期的基础上增加1个月的时候，月份槽就会递增，所以现在我们有 2014-02-31。然后检查日号是否大于新月份的最后有效日，如果大于（如上例），则日号向下调整到最后有效日（28）。这种方法的后果是什么呢？继续在我们的日期上再加一个月，&lt;code&gt;2014-02-28 + Month(1) == 2014-03-28&lt;/code&gt;。什么？你是在期待3月的最后一天吗？不对，对不起，记得 7-7-7 的档期。尽可能少的槽位要改变，所以我们先把月份槽位递增1，2014-03-28，轰，我们就完成了，因为这是一个有效的日期。另一方面，如果我们要在原来的日期 2014-01-31 的基础上增加2个月，那么我们最终的结果是 2014-03-31，正如预期的那样。这种方法的另一个后果是，当强行进行特定的排序时，关联性会有所损失（即以不同的顺序添加东西会导致不同的结果）。比如说：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;+Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-02-28

julia&amp;gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;+Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-03-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那是怎么回事呢？在第一行中，我们在1月29日的基础上加1天，结果是 2014-01-30；然后再加1个月，于是得到 2014-02-30，再往下调整为 2014-02-28。在第二个例子中，我们先加1个月，我们得到 2014-02-29，再往下调整为 2014-02-28，然后再加1天，结果是 2014-03-01。在这种情况下，有一个设计原则是有帮助的，那就是在存在多个 Periods 的情况下，操作将按照 Periods 的类型来排序，而不是按照它们的值或位置顺序来排序；这意味着总是先加 &lt;code&gt;Year&lt;/code&gt;，然后加 &lt;code&gt;Month&lt;/code&gt;，再加 &lt;code&gt;Week&lt;/code&gt; 等。因此，以下确实会导致关联性并正好有用:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-03-01

julia&amp;gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; + Dates.Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
2014-03-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;棘手吗？也许吧。一个无辜的 &lt;code&gt;Dates&lt;/code&gt; 用户该怎么做？最重要的是要注意，当处理月份时，明确地强制执行某种关联性，可能会导致一些意想不到的结果，但除此之外，一切都应该按照预期工作。值得庆幸的是，在 UT 中处理时间时，日期-周期算术中的奇特情况几乎就是这样了（避免了处理夏令时、闰秒等的 &amp;ldquo;乐趣&amp;rdquo;）。&lt;/p&gt;
&lt;p&gt;作为奖励，所有的周期算术对象都可以直接与范围一起工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,2,3&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-01-29&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-02-03&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; collect&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
6-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Date,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;:
 2014-01-29
 2014-01-30
 2014-01-31
 2014-02-01
 2014-02-02
 2014-02-03

julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,1,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Dates.Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,07,29&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-01-29&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;2014-07-29&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

julia&amp;gt; collect&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
7-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Date,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;:
 2014-01-29
 2014-02-28
 2014-03-29
 2014-04-29
 2014-05-29
 2014-06-29
 2014-07-29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;for i in Date(&amp;quot;2020-08-01&amp;quot;):Day(1):Date(&amp;quot;2020-08-09&amp;quot;)
           println(i)
end

2020-08-01
2020-08-02
2020-08-03
2020-08-04
2020-08-05
2020-08-06
2020-08-07
2020-08-08
2020-08-09
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;调整器函数&#34;&gt;调整器函数&lt;/h1&gt;
&lt;p&gt;尽管日期-周期算术很方便，但经常需要在日期上进行的计算具有日历或时间的性质，而不是固定的周期数。节日就是一个很好的例子，大多数都遵循这样的规则：&amp;ldquo;纪念日 = 五月的最后一个星期一&amp;rdquo;，或者 &amp;ldquo;感恩节 = 十一月的第四个星期四&amp;rdquo;。这类时间表达式处理的是相对于日历的规则，比如本月的第一天或最后一天，下周二，或第一个和第三个星期三等。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Dates&lt;/code&gt; 模块通过几个方便的方法提供了调整器 API，这些方法有助于简单、简洁地表达时间规则。第一组调整器方法处理周、月、季度和年的首尾。它们每个方法都接收一个单一的 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 作为输入，并返回或调整到相对于输入的所需时期的第一个或最后一个。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.firstdayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adjusts the input to the Monday of the input&amp;#39;s week&lt;/span&gt;
2014-07-14

julia&amp;gt; Dates.lastdayofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adjusts to the last day of the input&amp;#39;s month&lt;/span&gt;
2014-07-31

julia&amp;gt; Dates.lastdayofquarter&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Adjusts to the last day of the input&amp;#39;s quarter&lt;/span&gt;
2014-09-30
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接下来的两个高阶方法 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.tonext-Tuple%7BTimeType,Int64%7D&#34;&gt;tonext&lt;/a&gt; 和 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.toprev-Tuple%7BTimeType,Int64%7D&#34;&gt;toprev&lt;/a&gt;，通过将一个 &lt;code&gt;DateFunction&lt;/code&gt; 和一个起始 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 作为第一个参数来概括处理时间表达式。&lt;code&gt;DateFunction&lt;/code&gt; 只是一个函数，通常是匿名的，它接受一个单一的 &lt;a href=&#34;https://docs.julialang.org/en/v1/stdlib/Dates/#Dates.TimeType&#34;&gt;TimeType&lt;/a&gt; 作为输入，并返回一个 &lt;a href=&#34;https://docs.julialang.org/en/v1/base/numbers/#Core.Bool&#34;&gt;Bool&lt;/a&gt;，&lt;code&gt;true&lt;/code&gt; 表示满足调整标准。例如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;istuesday&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; x-&amp;gt;Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Tuesday&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Returns true if the day of the week of x is Tuesday&lt;/span&gt;

julia&amp;gt; Dates.tonext&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;istuesday, Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,13&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 2014-07-13 is a Sunday&lt;/span&gt;
2014-07-15

julia&amp;gt; Dates.tonext&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,13&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, Dates.Tuesday&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# Convenience method provided for day of the week adjustments&lt;/span&gt;
2014-07-15
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这对于更复杂的时间表达式的 do-block 语法是很有用的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;julia&amp;gt; Dates.tonext&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014,7,13&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; x
           &lt;span class=&#34;c1&#34;&gt;# Return true on the 4th Thursday of November (Thanksgiving)&lt;/span&gt;
           Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Thursday &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.dayofweekofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.November
       end
2014-11-27
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://docs.julialang.org/en/v1/base/collections/#Base.filter&#34;&gt;Base.filter&lt;/a&gt; 方法可以用来获取指定范围内的所有有效日期/时刻。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 匹兹堡街道清洁; 从 4月到11月的每第二个周二&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 日期范围从 2014-01-01 到 2015-01-01&lt;/span&gt;
julia&amp;gt; &lt;span class=&#34;nv&#34;&gt;dr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2014&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Day&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;1&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:Dates.Date&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;2015&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

julia&amp;gt; filter&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;dr&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; x
           Dates.dayofweek&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Tue &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.April &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.month&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &amp;lt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; Dates.Nov &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
           Dates.dayofweekofmonth&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;
       end
8-element Array&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;Date,1&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;:
 2014-04-08
 2014-05-13
 2014-06-10
 2014-07-08
 2014-08-12
 2014-09-09
 2014-10-14
 2014-11-11
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 Raku 中上面的代码可以写成:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;lazy my @dates = Date.new(&#39;2014-01-01&#39;) ... Date.new(&#39;2015-01-01&#39;);

.say for @dates.grep: -&amp;gt; $d {
    $d.day-of-week == 2 &amp;amp;&amp;amp;
    4  &amp;lt;= $d.month &amp;lt;= 11 &amp;amp;&amp;amp;
    $d.weekday-of-month == 2
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他的例子和测试可以在 &lt;a href=&#34;https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl&#34;&gt;stdlib/Dates/test/adjusters.jl&lt;/a&gt; 中找到。&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/dates">dates</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-08-04-dates-in-julia/</guid>
                <pubDate>Tue, 04 Aug 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Flink 中的 Table API</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-30-table-api-in-flink/</link>
                
                
                <description>&lt;blockquote&gt;Real Time Reporting with the Table API&lt;/blockquote&gt;&lt;p&gt;Apache Flink 提供的 Table API 是一个统一的、关系型的 API，用于批处理和流处理，即在无边界的、实时的流或有边界的、批处理的数据集上以相同的语义执行查询，并产生相同的结果。Flink 中的 Table API 通常用于简化数据分析、数据管道化和 ETL 应用的定义。&lt;/p&gt;
&lt;h2 id=&#34;你要构建什么&#34;&gt;你要构建什么?&lt;/h2&gt;
&lt;p&gt;在本教程中，你将学习如何构建一个实时的仪表盘，以按账户跟踪金融交易。该管道将从 Kafka 读取数据，并将结果写入 MySQL，通过 Grafana 可视化。&lt;/p&gt;
&lt;h2 id=&#34;先决条件&#34;&gt;先决条件&lt;/h2&gt;
&lt;p&gt;本演练假设你对 Java 或 Scala 有一定的熟悉，但即使你来自不同的编程语言，你也应该能够跟上。它还假设你熟悉基本的关系概念，如 SELECT 和 GROUP BY 子句。&lt;/p&gt;
&lt;h2 id=&#34;救命-我被卡住了&#34;&gt;救命, 我被卡住了!&lt;/h2&gt;
&lt;p&gt;如果你遇到困难，请查看&lt;a href=&#34;https://flink.apache.org/community.html&#34;&gt;社区支持资源&lt;/a&gt;。特别是 Apache Flink 的&lt;a href=&#34;https://flink.apache.org/community.html#mailing-lists&#34;&gt;用户邮件列表&lt;/a&gt;，它一直是 Apache 项目中最活跃的一个，也是快速获得帮助的好方法。&lt;/p&gt;
&lt;h2 id=&#34;如何跟进&#34;&gt;如何跟进&lt;/h2&gt;
&lt;p&gt;如果你想跟着走，你需要一台电脑与。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 8 或 11&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所需的配置文件可在 &lt;a href=&#34;https://github.com/apache/flink-playgrounds&#34;&gt;flink-playgrounds&lt;/a&gt; 资源库中获得。下载后，在 IDE 中打开项目 flink-playground/table-walkthrough，并导航到文件 SpendReport。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;nc&#34;&gt;EnvironmentSettings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EnvironmentSettings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;TableEnvironment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TableEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeSql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CREATE TABLE transactions (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    account_id  BIGINT,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    amount      BIGINT,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    transaction_time TIMESTAMP(3),\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    WATERMARK FOR transaction_time AS transaction_time - INTERVAL &amp;#39;5&amp;#39; SECOND\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;) WITH (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;connector&amp;#39; = &amp;#39;kafka&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;topic&amp;#39;     = &amp;#39;transactions&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;properties.bootstrap.servers&amp;#39; = &amp;#39;kafka:9092&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;format&amp;#39;    = &amp;#39;csv&amp;#39;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeSql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CREATE TABLE spend_report (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    account_id BIGINT,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    log_ts     TIMESTAMP(3),\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    amount     BIGINT\n,&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    PRIMARY KEY (account_id, log_ts) NOT ENFORCED&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;) WITH (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;   &amp;#39;connector&amp;#39;  = &amp;#39;jdbc&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;   &amp;#39;url&amp;#39;        = &amp;#39;jdbc:mysql://mysql:3306/sql-demo&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;   &amp;#39;table-name&amp;#39; = &amp;#39;spend_report&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;   &amp;#39;driver&amp;#39;     = &amp;#39;com.mysql.jdbc.Driver&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;   &amp;#39;username&amp;#39;   = &amp;#39;sql-demo&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;   &amp;#39;password&amp;#39;   = &amp;#39;demo-sql&amp;#39;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;nc&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;transactions&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeInsert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;spend_report&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;拆解代码&#34;&gt;拆解代码&lt;/h2&gt;
&lt;h3 id=&#34;the-execution-environment&#34;&gt;The Execution Environment&lt;/h3&gt;
&lt;p&gt;前两行设置了你的 &lt;code&gt;TableEnvironment&lt;/code&gt;。表环境是你如何为你的 Job 设置属性，指定你是在写批处理还是流式应用，以及创建你的源。本演练创建了一个使用流式执行的标准表环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;nc&#34;&gt;EnvironmentSettings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EnvironmentSettings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;TableEnvironment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TableEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;注册表&#34;&gt;注册表&lt;/h3&gt;
&lt;p&gt;接下来，在当前&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/catalogs.html&#34;&gt;目录&lt;/a&gt;中注册了表，您可以使用这些表连接到外部系统，以便读写批处理和流数据。表源提供对存储在外部系统中的数据的访问，如数据库、键值存储、消息队列或文件系统。table sink 向外部存储系统发出一个表。根据源和 sink 的类型，它们支持不同的格式，如 CSV、JSON、Avro 或 Parquet。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeSql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CREATE TABLE transactions (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    account_id  BIGINT,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    amount      BIGINT,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    transaction_time TIMESTAMP(3),\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    WATERMARK FOR transaction_time AS transaction_time - INTERVAL &amp;#39;5&amp;#39; SECOND\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;) WITH (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;connector&amp;#39; = &amp;#39;kafka&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;topic&amp;#39;     = &amp;#39;transactions&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;properties.bootstrap.servers&amp;#39; = &amp;#39;kafka:9092&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;format&amp;#39;    = &amp;#39;csv&amp;#39;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
     &lt;span class=&#34;s&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注册了两个表：一个是交易输入表，一个是消费报告输出表。交易(transaction)表让我们可以读取信用卡交易，其中包含账户ID(account_id)、时间戳(transaction_time)和美元金额(amount)。该表是在一个名为 &lt;code&gt;transactions&lt;/code&gt; 的 Kafka 主题上的逻辑视图，包含 CSV 数据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeSql&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CREATE TABLE spend_report (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    account_id BIGINT,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    log_ts     TIMESTAMP(3),\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    amount     BIGINT\n,&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    PRIMARY KEY (account_id, log_ts) NOT ENFORCED&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;) WITH (\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;connector&amp;#39;  = &amp;#39;jdbc&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;url&amp;#39;        = &amp;#39;jdbc:mysql://mysql:3306/sql-demo&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;table-name&amp;#39; = &amp;#39;spend_report&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;driver&amp;#39;     = &amp;#39;com.mysql.jdbc.Driver&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;username&amp;#39;   = &amp;#39;sql-demo&amp;#39;,\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;    &amp;#39;password&amp;#39;   = &amp;#39;demo-sql&amp;#39;\n&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;
    &lt;span class=&#34;s&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第二张表 &lt;code&gt;spend_report&lt;/code&gt;，存储了最终的汇总结果。其底层存储是 MySql 数据库中的一张表。&lt;/p&gt;
&lt;h3 id=&#34;查询&#34;&gt;查询&lt;/h3&gt;
&lt;p&gt;配置好环境和注册好表之后，你就可以构建你的第一个应用程序了。从 &lt;code&gt;TableEnvironment&lt;/code&gt; 中，你可以从一个输入表中读取它的行，然后使用 &lt;code&gt;executeInsert&lt;/code&gt; 将这些结果写入到一个输出表中。&lt;code&gt;report&lt;/code&gt; 函数是你实现业务逻辑的地方。它目前还没有被实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;nc&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;transactions&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executeInsert&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;spend_report&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;测试&#34;&gt;测试&lt;/h2&gt;
&lt;p&gt;该项目包含一个二次测试类 &lt;code&gt;SpendReportTest&lt;/code&gt;，用于验证报表的逻辑。它以批处理模式创建了一个表环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span class=&#34;nc&#34;&gt;EnvironmentSettings&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;EnvironmentSettings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inBatchMode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;nc&#34;&gt;TableEnvironment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tEnv&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TableEnvironment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Flink 的独特属性之一是它在批处理和流式处理之间提供一致的语义。这意味着你可以在静态数据集上以批处理模式开发和测试应用程序，并以流式应用程序的形式部署到生产中。&lt;/p&gt;
&lt;h2 id=&#34;尝试一下&#34;&gt;尝试一下&lt;/h2&gt;
&lt;p&gt;现在有了 Job 设置的骨架，你就可以添加一些业务逻辑了。目标是建立一个报告，显示每个账户在一天中每个小时的总支出。这意味着时间戳列需要从毫秒到小时的颗粒度进行舍入。&lt;/p&gt;
&lt;p&gt;Flink 支持用纯 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/sql/&#34;&gt;SQL&lt;/a&gt; 或使用 &lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/tableApi.html&#34;&gt;Table API&lt;/a&gt; 开发关系型应用。Table API 是一个受 SQL 启发的流畅 DSL，可以用 Python、Java 或 Scala 编写，并支持强大的 IDE 集成。就像 SQL 查询一样，Table 程序可以选择所需的字段，并通过你的键进行分组。这些功能，加上&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/systemFunctions.html&#34;&gt;内置的函数&lt;/a&gt;，如 &lt;code&gt;floor&lt;/code&gt; 和 &lt;code&gt;sum&lt;/code&gt;，写这个报告问题不大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;transaction_time&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;floor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimeIntervalUnit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;HOUR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;groupBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;用户定义的函数&#34;&gt;用户定义的函数&lt;/h2&gt;
&lt;p&gt;Flink 包含有限的内置函数，有时你需要用&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/table/functions/udfs.html&#34;&gt;用户定义的函数&lt;/a&gt;来扩展它。如果 &lt;code&gt;floor&lt;/code&gt; 不是预定义的，你可以自己实现它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.time.LocalDateTime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;java.time.temporal.ChronoUnit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.flink.table.annotation.DataTypeHint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.apache.flink.table.functions.ScalarFunction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyFloor&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ScalarFunction&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nd&#34;&gt;@DataTypeHint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TIMESTAMP(3)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;nd&#34;&gt;@DataTypeHint&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;TIMESTAMP(3)&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;timestamp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;truncatedTo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ChronoUnit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;HOURS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后迅速将其集成到你的应用程序中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyFloor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;transaction_time&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;groupBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个查询会消耗 &lt;code&gt;transactions&lt;/code&gt; 表的所有记录，计算报表，并以高效、可扩展的方式输出结果。使用该实现运行测试将通过。&lt;/p&gt;
&lt;h2 id=&#34;添加窗口&#34;&gt;添加窗口&lt;/h2&gt;
&lt;p&gt;基于时间的数据分组是数据处理中的典型操作，尤其是在处理无限流时。基于时间的分组被称为&lt;a href=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/dev/stream/operators/windows.html&#34;&gt;窗口&lt;/a&gt;，Flink 提供了灵活的窗口语义。最基本的窗口类型称为 &lt;code&gt;Tumble&lt;/code&gt; 窗口，它有一个固定的大小，其桶不重叠。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;report&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transactions&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tumble&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;over&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;hour&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;transaction_time&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;groupBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;account_id&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;log_ts&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;as&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;amount&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就定义了你的应用程序使用基于时间戳列的一小时翻滚窗口。因此，时间戳为 2019-06-01 01:23:47 的行被放在 2019-06-01 01:00:00 窗口中。&lt;/p&gt;
&lt;p&gt;基于时间的聚合是独一无二的，因为在连续流应用中，时间与其他属性不同，一般是向前移动的。与 floor 和你的 UDF 不同，窗口函数是&lt;a href=&#34;https://en.wikipedia.org/wiki/Intrinsic_function&#34;&gt;内在的&lt;/a&gt;，它允许运行时应用额外的优化。在批处理上下文中，窗口提供了一个方便的 API，用于通过时间戳属性对记录进行分组。&lt;/p&gt;
&lt;p&gt;用这个实现运行测试也会通过。&lt;/p&gt;
&lt;h2 id=&#34;再来一次用流&#34;&gt;再来一次，用流!&lt;/h2&gt;
&lt;p&gt;就这样，一个功能齐全的、有状态的、分布式的流式应用! 查询不断地消耗 Kafka 的事务流，计算每小时的花费，并在结果准备好后立即发出。由于输入是界的，所以查询一直在运行，直到手动停止。而且由于 Job 使用了基于时间窗口的聚合，所以当框架知道某个窗口不会再有记录到达时，Flink 可以进行特定的优化，比如状态清理。&lt;/p&gt;
&lt;p&gt;表游乐场是完全 docker 化的，可以作为流式应用在本地运行。该环境包含一个 Kafka 主题、一个连续数据生成器、MySql 和 Grafana。&lt;/p&gt;
&lt;p&gt;从 &lt;code&gt;table-walkthrough&lt;/code&gt; 文件夹内启动 &lt;code&gt;docker-compose&lt;/code&gt; 脚本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker-compose build
$ docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以通过 &lt;a href=&#34;http://localhost:8082/&#34;&gt;Flink 控制台&lt;/a&gt;查看正在运行的作业信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ci.apache.org/projects/flink/flink-docs-release-1.11/fig/spend-report-console.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;从 MySQL 里面探索结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ docker-compose &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; mysql mysql -Dsql-demo -usql-demo -pdemo-sql

mysql&amp;gt; use sql-demo&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
Database changed

mysql&amp;gt; &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; count&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; from spend_report&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
+----------+
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; count&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;*&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
+----------+
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;110&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
+----------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，去 &lt;a href=&#34;http://localhost:3000/d/FOe0PbmGk/walkthrough?viewPanel=2&amp;amp;orgId=1&amp;amp;refresh=5s&#34;&gt;Grafana&lt;/a&gt; 看看完全可视化的结果吧!&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/flink">flink</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/table">table</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/api">api</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-30-table-api-in-flink/</guid>
                <pubDate>Sun, 26 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Julia 语言学习笔记</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/</link>
                
                
                <description>&lt;blockquote&gt;Learning Julia&lt;/blockquote&gt;&lt;h2 id=&#34;语法&#34;&gt;语法&lt;/h2&gt;
&lt;h3 id=&#34;数值字面量系数&#34;&gt;数值字面量系数&lt;/h3&gt;
&lt;p&gt;在标识符或圆括号前面直接放一个数字, 例如 &lt;code&gt;2x&lt;/code&gt; 或 &lt;code&gt;2(x+y)&lt;/code&gt;, 会被认为是把标识符和它前面的数字相乘。这样写多项式就很方便了。&lt;/p&gt;
&lt;h3 id=&#34;向量化的点号运算符&#34;&gt;向量化的点号运算符&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.+&lt;/code&gt; 类似于 Raku 中的 &lt;code&gt;»+»&lt;/code&gt; 超运算符:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;[1,2,3] »+» 3
[4 5 6]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是 Julia 的 &lt;code&gt;Vectorized &amp;quot;dot&amp;quot;&lt;/code&gt; 语法没有 Raku 的超运算符语法清晰。&lt;/p&gt;
&lt;p&gt;类似的例子还有:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 0.479425538604203&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;sin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;0.479425538604203&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;0.8414709848078965&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;0.9974949866040544&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;13.42477796076938&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;17.42477796076938&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;21.42477796076938&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;15.566370614359172&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;18.566370614359172&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;21.566370614359172&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;19.0&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;26.0&lt;/span&gt;
 &lt;span class=&#34;mf&#34;&gt;33.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;等价的 Raku 写法为:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;sub f(\x, \y) { 3*x + 4*y};

my \A = [1.0, 2.0, 3.0];
my \B = [4.0, 5.0, 6.0];

A».&amp;amp;f(pi)
[15.566370614359172 18.566370614359172 21.566370614359172]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;链式比较&#34;&gt;链式比较&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Raku 同样支持这种链式比较。&lt;/p&gt;
&lt;h3 id=&#34;虚数&#34;&gt;虚数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;real&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;imag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;c&#34;&gt;# 2&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;im&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 5 + 0im&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code class=&#34;language-raku&#34; data-lang=&#34;raku&#34;&gt;(1 + 2i).re         # 1
(1 + 2i).im         # 2
(1 + 2i) * (1 - 2i) # 5+0i
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;命名参数&#34;&gt;命名参数&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;style&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;###&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;函数组合&#34;&gt;函数组合&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 3.0&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uppercase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;U&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;N&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;
 &lt;span class=&#34;sc&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;piping&#34;&gt;Piping&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 7.416198487095663&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# 等价于&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;∘&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# 7.416198487095663&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;广播和管道一起使用&#34;&gt;广播和管道一起使用&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uppercase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;titlecase&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;O&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
 &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;组合类型&#34;&gt;组合类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不可变组合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Foo&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# DataType&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;     &lt;span class=&#34;c&#34;&gt;# rakulang&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;     &lt;span class=&#34;c&#34;&gt;# 1.5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# ERROR: setfield! immutable struct of type Foo cannot be changed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可变组合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;mutable&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;baz&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;qux&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;联合类型&#34;&gt;联合类型&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;IntOrString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;AbstractString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IntOrString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;
&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IntOrString&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# rakulang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;参数化类型&#34;&gt;参数化类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;参数化组合类型&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 1.0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 2.0&lt;/span&gt;


&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Circle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;AbstractString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;6.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;l&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 6.0&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# rakulang&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;多重分派&#34;&gt;多重分派&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-julia&#34; data-lang=&#34;julia&#34;&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;methods&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c&#34;&gt;# 2 methods for generic function &amp;#34;f&amp;#34;:&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REPL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kp&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REPL&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# 7&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c&#34;&gt;# 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julialang">julialang</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/julia">julia</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-27-learning-julialang/</guid>
                <pubDate>Sun, 26 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>通过函数式编程实现更简洁的代码</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-26-cleaner-code-with-functional-programming/</link>
                
                
                <description>&lt;blockquote&gt;Cleaner code with functional programming&lt;/blockquote&gt;&lt;p&gt;函数式编程是一种编程风格，现代语言或多或少都支持这种风格。在这篇文章中，我想解释一下函数式编程如何为你提供强大的抽象，使你的代码更加简洁。我将用 Raku 和 Python 中的例子来说明这一点，我们将看到这两种语言都是函数式编程的优秀语言。&lt;/p&gt;
&lt;h2 id=&#34;raku-简介&#34;&gt;Raku: 简介&lt;/h2&gt;
&lt;p&gt;本文的代码示例是用 Python 和 Raku 编写的。我想大多数人都熟悉 Python，但 Raku 不太为人所知，所以我先解释一下基础知识。本文中的代码不是很习惯，所以如果你懂得其他编程语言，应该很容易理解。&lt;/p&gt;
&lt;p&gt;Raku 与 Perl 最为相似。两种语言在语法上都与 C/C++、Java 和 JavaScript 相似：基于块，语句用分号隔开，块用大括号分界，参数列表放在括号中，用逗号隔开。将 Perl 和 Raku 与其他语言区分开来的主要特征是使用魔符（&amp;ldquo;有趣的字符&amp;rdquo;）来识别变量的类型：&lt;code&gt;$&lt;/code&gt; 代表标量，&lt;code&gt;@&lt;/code&gt; 代表数组，&lt;code&gt;%&lt;/code&gt; 代表哈希（映射），&lt;code&gt;&amp;amp;&lt;/code&gt; 代表子程序。变量也有关键字来标识它们的作用域，我只用 &lt;code&gt;my&lt;/code&gt; 来标识变量的词法作用域。子程序是用 &lt;code&gt;sub&lt;/code&gt; 关键字来声明的，子程序可以是命名的，也可以是匿名的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;sub square ($x) {
    $x*$x;
}
# anonymous subroutine 
my $anon_square = sub ($x) {
    $x*$x;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Python 中，这将是：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# anonymous subroutine &lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;anon_square&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Raku 支持无符号变量，并使用 &lt;code&gt;\&lt;/code&gt; 语法来声明它们。更多关于普通变量和无符号变量之间的区别，请参见 &lt;a href=&#34;https://docs.raku.org/language/variables#Sigilless_variables&#34;&gt;Raku 文档&lt;/a&gt;。例如(&lt;code&gt;say&lt;/code&gt; 打印它的参数，后面加一个换行)。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \x = 42; # sigilless
my $y = 43; 
say x + $y; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在本文的代码中，我将尽可能地使用无符号变量。&lt;/p&gt;
&lt;p&gt;Raku 有几种类型的序列数据结构。在下面的代码中，我将使用&lt;a href=&#34;https://docs.raku.org/language/list&#34;&gt;列表和数组&lt;/a&gt;以及&lt;a href=&#34;https://docs.raku.org/type/Range&#34;&gt;范围&lt;/a&gt;。在 Raku 中，列表和数组的主要区别在于，列表是不可变的，这意味着一旦创建，就不能修改。所以它是一个只读的数据结构。要&amp;quot;更新&amp;quot;一个不可变的数据结构，你需要创建一个更新的副本。另一方面，数组是可变的，所以我们可以更新它们的元素，扩展它们，缩小它们等等。所有的更新都发生在原始数据的位置上。&lt;/p&gt;
&lt;p&gt;Raku 的数组类似于 Python 的 list，Raku 的 list 类似于 Python 的 tuple，也是不可变的。除了语法之外，Raku 中的范围与 Python 中的范围相似，都是不可变的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my @array1 = 1,2,3; #=&amp;gt; an array because of the &#39;@&#39; sigil
my \array2 = [1,2,3]; #=&amp;gt; an array, because of the &#39;[...]&#39;

my \range1 = 1 .. 10; #=&amp;gt; a range 1 .. 10
my @array3 = 1 .. 10; #=&amp;gt; an array from a range, because of the &#39;@&#39; sigil

my \list1 = 1,2,3; #=&amp;gt; a list
my $list2 = (1,2,3); #=&amp;gt; also a list
my \list3 = |(1 .. 10);  #=&amp;gt; an array from a range because of the &#39;|&#39; flattening operation
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相应的 Python 代码为:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a list from a tuple&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a list, because of the &amp;#39;[...]&amp;#39;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;range1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a range 1 .. 10&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;list3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a list from a range&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;tuple1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a tuple&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; a tuple from a list&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;tuple3&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; creates a tuple from a range&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其他具体的语法或功能将针对具体的例子进行解释。&lt;/p&gt;
&lt;h2 id=&#34;其他任何名称的函数---作为值的函数&#34;&gt;&lt;em&gt;其他任何名称的函数&lt;/em&gt; - 作为值的函数&lt;/h2&gt;
&lt;p&gt;函数是函数式编程的精髓。正如我在&lt;a href=&#34;https://wimvanderbauwhede.github.io/articles/everything-is-a-function&#34;&gt;&amp;ldquo;万物皆函数&amp;rdquo;&lt;/a&gt;一文中所解释的那样，在适当的函数式语言中，所有的结构都是由函数构建的。&lt;/p&gt;
&lt;p&gt;所有现代编程语言都有函数、程序、子程序或方法的概念。它们是代码重用的重要机制。通常，我们认为函数是对一些输入值进行操作以产生一个或多个输出值的东西。输入值可以是全局声明的，也可以是一个类的属性，或者作为参数传递给函数。同样，输出值可以直接返回，到全局变量，作为类的属性或通过修改输入值。&lt;/p&gt;
&lt;p&gt;要想从函数式编程中获益最多，最好是函数是纯粹的，这意味着对函数的调用总是对相同的输入产生相同的输出。在实践中，如果函数只接受输入作为参数，并直接返回输出，这一点比较容易实现，但这并不是必不可少的。&lt;/p&gt;
&lt;p&gt;函数式编程的关键特征是，函数的输入值和输出值本身可以是函数。所以函数必须是你语言中的值。有时这被称为 &amp;ldquo;函数必须是一等公民&amp;rdquo;，一个接收和/或返回函数的函数有时被称为&amp;quot;高阶函数&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;如果函数是值，那么我们就可以将它们赋值给变量。特别是我们会将它们赋值给其他函数的参数。但我们也可以将它们赋值给普通的变量。&lt;/p&gt;
&lt;p&gt;让我们考虑以下函数，&lt;code&gt;choose&lt;/code&gt;，它需要三个参数 &lt;code&gt;t&lt;/code&gt;，&lt;code&gt;f&lt;/code&gt; 和 &lt;code&gt;c&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub choose (\t, \f, \d) {
    if (d) {t} else {f}
}
# Python
def choose (t, f, d):
  if d:
    return t 
  else:
    return f
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先让我们用字符串作为前两个参数的值来调用 &lt;code&gt;choose&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \tstr = &amp;quot;True!&amp;quot;;
my \fstr = &amp;quot;False!&amp;quot;;

my \res_str = choose(tstr, fstr, True);

say res_str; #=&amp;gt; says &amp;quot;True!&amp;quot;
# Python
tstr = &amp;quot;True!&amp;quot;
fstr = &amp;quot;False!&amp;quot;

res_str = choose(tstr,fstr,True)

print(res_str) #=&amp;gt; says &amp;quot;True!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在让我们尝试用函数作为参数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub tt (\s) { say &amp;quot;True {s}!&amp;quot; }
sub ff (\s) { say &amp;quot;False {s}!&amp;quot; }

my &amp;amp;res_f = choose(&amp;amp;tt, &amp;amp;ff, False);

say &amp;amp;res_f; #=&amp;gt; says &amp;amp;ff
res_f(&amp;quot;rumour&amp;quot;); #=&amp;gt; says &amp;quot;False rumour!&amp;quot;
# Python
def tt(s):
  print( &amp;quot;True &amp;quot;+s+&amp;quot;!&amp;quot;)
def ff(s):  
  print( &amp;quot;False&amp;quot;+s+&amp;quot;!&amp;quot;)

res_f = choose(tt,ff,True)

print(res_f) #=&amp;gt; says &amp;lt;function tt at 0x7f829c3aa310&amp;gt;
res_f(&amp;quot;rumour&amp;quot;) #=&amp;gt; says &amp;quot;False rumour!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此，我们的函数 &lt;code&gt;choose&lt;/code&gt;  接收两个函数作为它的前两个参数，并返回一个函数。在 Raku 中，我们需要在函数名上加上 &lt;code&gt;&amp;amp;&lt;/code&gt; 符号，因为否则它们会被求值：像 &lt;code&gt;tt&lt;/code&gt; 这样的裸函数名就等于调用没有参数的函数 &lt;code&gt;tt()&lt;/code&gt;。通过将这个函数赋值给一个变量(&lt;code&gt;res_f&lt;/code&gt;)，我们现在可以将 &lt;code&gt;res_f&lt;/code&gt; 作为一个函数来调用，它最终会根据选择来调用 &lt;code&gt;tt&lt;/code&gt; 或 &lt;code&gt;ff&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;函数不需要名字&#34;&gt;函数不需要名字&lt;/h2&gt;
&lt;p&gt;现在，如果我们可以将函数赋值给变量，它们本身其实并不需要一个名字。所以我们的函数可以是匿名的。大多数语言都支持匿名函数，在函数式语言中，它们通常被称为 &amp;ldquo;lambda 函数&amp;rdquo;。在 Raku 中，我们有两种方法来创建匿名函数。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;sub (...)&lt;/code&gt; 语法:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \tt = sub (\s) { say &amp;quot;True {s}!&amp;quot; };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者使用&lt;a href=&#34;https://docs.raku.org/language/functions#index-entry-pointy_blocks&#34;&gt;&amp;lsquo;尖号块&amp;rsquo;&lt;/a&gt;语法，这样更紧凑一些:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \ff = -&amp;gt; \s { say &amp;quot;False {s}!&amp;quot; };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python 使用 &lt;code&gt;lambda&lt;/code&gt; 关键字:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;True &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;ff&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;False &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;所以现在我们可以说:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my &amp;amp;res_f = choose(tt, ff, True);

say &amp;amp;res_f; #=&amp;gt; says sub { }
res_f(&amp;quot;story&amp;quot;); #=&amp;gt; says &amp;quot;True story!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当我们打印出函数所绑定的变量时，Raku 返回 &lt;code&gt;sub { }&lt;/code&gt; 来表示该变量包含一个函数。&lt;/p&gt;
&lt;p&gt;在 Python 中:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;res_f&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;choose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; says &amp;lt;function &amp;lt;lambda&amp;gt; at 0x7f829b298b80&amp;gt;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;res_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;story&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#=&amp;gt; says &amp;#34;True story!&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;例子-map-grep-和-reduce&#34;&gt;例子: &lt;code&gt;map&lt;/code&gt;、 &lt;code&gt;grep&lt;/code&gt; 和 &lt;code&gt;reduce&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;函数的功能有很多用途，我只想重点介绍三个在 Raku 中现成的例子：&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt;。Python 有 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;filter&lt;/code&gt;，并通过 &lt;code&gt;functools&lt;/code&gt; 模块提供 &lt;code&gt;reduce&lt;/code&gt;。这些函数的共同点是，它们提供了一种对列表进行 &lt;code&gt;for&lt;/code&gt; 循环的替代方法。&lt;/p&gt;
&lt;h3 id=&#34;map--对列表中的所有元素进行函数应用&#34;&gt;&lt;code&gt;map&lt;/code&gt; : 对列表中的所有元素进行函数应用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 有两个参数：一个函数和一个列表。它将函数按顺序应用于列表中的所有值，并返回结果，例如将列表中的所有值平方。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my \res = map -&amp;gt; \x {x*x} , 1 .. 10;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在 Python 中，我们需要显式地创建元组，但除了语法上的差异，结构是完全一样的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;tuple&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这是对传统 &lt;code&gt;for&lt;/code&gt; 循环的功能替代。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \res = [];
for 1 .. 10 -&amp;gt; \x {
    res.push(x*x);
}
# Python
res = []
for x in range(1,11):
    res.append(x*x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，在 Raku 和 Python 中，我们需要为 &lt;code&gt;for&lt;/code&gt; 循环版本使用一个可变的数据结构，而 &lt;code&gt;map&lt;/code&gt; 版本则使用不可变的数据结构。&lt;/p&gt;
&lt;h3 id=&#34;grep--过滤列表&#34;&gt;&lt;code&gt;grep&lt;/code&gt; : 过滤列表&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;grep&lt;/code&gt; (在 Python 中称为 &lt;code&gt;filter&lt;/code&gt;)也接受参数，一个函数和一个列表，但它只返回函数返回真的列表中的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \res = grep -&amp;gt; \x { x % 5 == 0 }, 1 .. 30;
# Python
res = tuple(filter( lambda x : x % 5 == 0 ,range(1,31)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然我们也可以用 &lt;code&gt;for&lt;/code&gt; 循环和 &lt;code&gt;if&lt;/code&gt; 语句来写，但这又需要一个可变的数据结构。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \res = [];
for 1 .. 30 -&amp;gt; \x {
    if (x % 5 == 0) {
    res.push(x);
    }
}
# Python
res = []
for x in range(1,31): 
  if (x % 5 == 0):
    res.append(x)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 的好处是，你可以很容易地把它们链在一起。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
grep -&amp;gt; \x { x % 5 == 0 }, map -&amp;gt; \x {x*x}, 1..30
# Python
res = tuple(filter( lambda x : x % 5 == 0 ,map( lambda x : x*x ,range(1,31))))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是因为 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 接受一个列表并返回一个列表，所以只要你需要对一个列表进行操作，就可以通过链式调用来实现。&lt;/p&gt;
&lt;h3 id=&#34;reduce--化整为零&#34;&gt;&lt;code&gt;reduce&lt;/code&gt; : 化整为零&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce&lt;/code&gt; 也接受一个函数和一个 list，但它使用函数将 list 的所有元素合并成一个结果。所以函数必须接受两个参数。第二个参数是从列表中取出的元素，第一个参数作为状态变量来组合所有元素。例如，计算一个数字列表的和:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \sum = reduce sub (\acc,\elt) {acc+elt}, 1 .. 10;

say sum; #=&amp;gt; says 55
# Python
from functools import reduce

sum = reduce(lambda acc,elt: acc+elt, range(1,11))

print( sum); #=&amp;gt; says 55
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里发生的情况是，首先将 &lt;code&gt;acc&lt;/code&gt; 设置为列表中的第一个元素(1)，然后加上第二个元素，所以 &lt;code&gt;acc&lt;/code&gt; 变成 1+2=3；然后加上第三个元素(3)，以此类推。其效果是将列表中的所有数字连续相加。&lt;/p&gt;
&lt;p&gt;为了更清楚地说明这一点，我们来写一个我们自己的 &lt;code&gt;reduce&lt;/code&gt; 版本。&lt;/p&gt;
&lt;h3 id=&#34;编写你自己的&#34;&gt;编写你自己的&lt;/h3&gt;
&lt;p&gt;在许多函数式语言中，从左到右（从最低索引开始）和从右到左（从最高索引开始）的还原是有区别的。这一点很重要，因为根据做还原的函数，如果从左边或右边消耗列表，结果可能会不同。例如，假设我们的化简函数是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
-&amp;gt; \x,\y {x+y}
# Python
lambda x,y: x+y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么我们从哪个方向遍历列表并不重要。但考虑以下函数:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
-&amp;gt; \x,\y { x &amp;lt; y ?? x+y !! x }

# Python
lambda x,y: x+y if x&amp;lt;y else x
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;( &lt;code&gt;... ?? ... !! ...&lt;/code&gt; 是条件操作符的 Raku 句法，在大多数其他语言中是 &lt;code&gt;... ? ... : ...&lt;/code&gt; 在 Python 中是 &lt;code&gt;... if ... else ...&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;在这种情况下，如果列表从左或从右还原，结果会有所不同。在 Raku 和 Python 中，&lt;code&gt;reduce&lt;/code&gt; 是一种从左到右的还原。&lt;/p&gt;
&lt;p&gt;另外，&lt;code&gt;reduce&lt;/code&gt; 函数可以不使用列表的第一个元素，而是取一个额外的参数，通常称为累加器。在函数式语言中，&lt;code&gt;reduce&lt;/code&gt; 通常被称为 &lt;code&gt;fold&lt;/code&gt;，所以我们可以有一个左折和一个右折。让我们来看看如何实现这些。&lt;/p&gt;
&lt;h4 id=&#34;left-fold&#34;&gt;Left fold&lt;/h4&gt;
&lt;p&gt;实现左折的直接方法（所以和 &lt;code&gt;reduce&lt;/code&gt; 一样）是在函数内部使用 &lt;code&gt;for&lt;/code&gt; 循环。这意味着我们必须在循环的每次迭代上更新累加器的值。在 Raku 中，无符号变量是不可变的（我在这里简化了，完整的故事请看 &lt;a href=&#34;https://docs.raku.org/language/containers#Binding&#34;&gt;Raku 文档&lt;/a&gt;），所以我们需要使用一个有符号的变量，&lt;code&gt;$acc&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub foldll (&amp;amp;f, \iacc, \lst) { 
  my $acc = iacc; 
  for lst -&amp;gt; \elt {
    $acc = f($acc,elt);
  }
  $acc;
}

# Python
def foldll (f, iacc, lst):
  acc = iacc
  for elt in lst:
    acc = f(acc,elt)  
  return acc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果我们只想使用不可变的变量，我们可以使用递归。Raku 使这一点变得简单，因为它允许一个子程序有多个签名(&lt;code&gt;multi sub&lt;/code&gt;)，并且它会调用与签名相匹配的变量。&lt;/p&gt;
&lt;p&gt;我们的 &lt;code&gt;foldl&lt;/code&gt; 将消耗输入列表 &lt;code&gt;lst&lt;/code&gt;，并使用 &lt;code&gt;f&lt;/code&gt; 将其元素组合到累加器 &lt;code&gt;acc&lt;/code&gt; 中，当列表被消耗后，计算结束，我们可以返回 &lt;code&gt;acc&lt;/code&gt; 作为结果。所以我们的第一个变体说，如果输入列表是空的，我们应该返回 &lt;code&gt;acc&lt;/code&gt;。 第二个变体从列表中取出一个元素 &lt;code&gt;elt&lt;/code&gt; (关于 &lt;code&gt;*&lt;/code&gt; 的细节请参见 &lt;a href=&#34;https://docs.raku.org/type/Range&#34;&gt;Raku 文档&lt;/a&gt;)，并将其与 &lt;code&gt;acc&lt;/code&gt; 结合到 &lt;code&gt;f(acc,elt)&lt;/code&gt; 中。然后用这个新的累加器和 list 的剩余部分 &lt;code&gt;rest&lt;/code&gt; 再次调用 &lt;code&gt;foldl&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# When the list is empty, return the accumulator
multi sub foldl (&amp;amp;f, \acc, ()) { acc }
multi sub foldl (&amp;amp;f, \acc, \lst) {
  # Raku&#39;s way of splitting a list in the first elt and the rest
  # The &#39;*&#39; is a shorthand for the end of the list
   my (\elt,\rest) = lst[0, 1 .. * ]; 
   # The actual recursion
   foldl( &amp;amp;f, f(acc, elt), rest);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python 不允许这种模式匹配，所以我们需要使用条件来编写递归。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foldl&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; 
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt; 
  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Python&amp;#39;s way of splitting a tuple in the first elt and the rest&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# rest will be a list, not a tuple, but we&amp;#39;ll let that pass&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lst&lt;/span&gt; 
   &lt;span class=&#34;c1&#34;&gt;# The actual recursion&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;foldl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;acc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在这个实现中，所有的变量都不会被更新。所以所有的变量都可以是不可变的。&lt;/p&gt;
&lt;h4 id=&#34;right-fold&#34;&gt;Right fold&lt;/h4&gt;
&lt;p&gt;右折与左折颇为相似。对于基于循环的版本，我们所做的只是将列表反转(&lt;code&gt;reverse&lt;/code&gt;)。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub foldrl (&amp;amp;f, \acc, \lst) { 
  my $res = acc;
  for  lst.reverse -&amp;gt; \elt {
    $res = f($res,elt);
  }
  $res;
}

# Python
def foldlr (f, iacc, lst):
  acc = iacc
  for elt in lst.reverse():
    acc = f(acc,elt)  
  return acc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在递归版本中，我们从列表中取最后一个元素而不是第一个元素。关于 &lt;code&gt;..^ * - 1&lt;/code&gt; 语法的细节，请参见 &lt;a href=&#34;https://docs.raku.org/language/operators#infix_..%5E&#34;&gt;Raku 文档&lt;/a&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
multi sub foldr ( &amp;amp;f, \acc, ()) { acc }
multi sub foldr (&amp;amp;f, \acc, \lst) {
    my (\rest,\elt) = lst[0..^*-1, *  ];
    foldr( &amp;amp;f, f(acc, elt), rest);
}

# Python
def foldr (f, acc, lst):
  if lst == (): 
    return acc 
  else:
   (*rest,elt) = lst 
   return foldr( f, f(acc, elt), rest)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;map-and-grep-are-folds&#34;&gt;&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; are folds&lt;/h4&gt;
&lt;p&gt;现在，&lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 呢？我们当然可以用 &lt;code&gt;for&lt;/code&gt; 循环来实现，但我们也可以用我们的 &lt;code&gt;foldl&lt;/code&gt; 来实现它们。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub map (&amp;amp;f,\lst) {
    foldl( sub (\acc,\elt) {
            (|acc,f(elt))
            }, (), lst);
}

# Python
def map (f,lst):
    return foldl( 
      lambda acc,elt:(*acc, f(elt))
      ,()
      ,lst
    )
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为函数 &lt;code&gt;f&lt;/code&gt; 是可映射的，所以它只有一个参数。但是 &lt;code&gt;foldl&lt;/code&gt; 需要一个有两个参数的函数，第一个参数为累加器。所以我们用两个参数的匿名函数调用 &lt;code&gt;foldl&lt;/code&gt;。累积器本身是一个空列表。虽然我们前面说过，还原将原来列表的所有元素合并成一个返回值，当然这个返回值可以是任何数据类型，所以也是一个列表。所以我们对原始列表中的每一个元素都调用 &lt;code&gt;f&lt;/code&gt;，并将其添加到累加器列表的末尾。(&lt;code&gt;|&lt;/code&gt; 将列表扁平化，所以 &lt;code&gt;(|acc,f(elt))&lt;/code&gt; 是一个由 &lt;code&gt;acc&lt;/code&gt; 的元素和 &lt;code&gt;f(elt)&lt;/code&gt; 的结果建立的新列表。)&lt;/p&gt;
&lt;p&gt;类似地，我们也可以定义 &lt;code&gt;grep&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub grep (&amp;amp;f,\lst) {
    foldl( sub (\acc,\elt) {
      if (f(elt)) {
          (|acc,elt)
      } else {
          acc
      }
    }, (), lst);
}

# Python
def filter (f,lst):
    return foldl( 
      lambda acc,elt:
        (*acc,elt) if f(elt) else acc
      , (), lst)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就像在 &lt;code&gt;map&lt;/code&gt; 实现中一样，我们用一个匿名函数调用 &lt;code&gt;foldl&lt;/code&gt;。在这个函数中，我们测试 &lt;code&gt;lst&lt;/code&gt; 中的每个 &lt;code&gt;elt&lt;/code&gt; 是否为 &lt;code&gt;f(elt)&lt;/code&gt; 为真。如果是真，我们就从 &lt;code&gt;acc&lt;/code&gt; 和 &lt;code&gt;elt&lt;/code&gt; 创建一个新的列表，否则我们就只返回 &lt;code&gt;acc&lt;/code&gt;。 因为 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 分别对列表中的每个元素进行操作，所以我们也可以使用右折来实现它们。&lt;/p&gt;
&lt;p&gt;通过这些例子，我希望无论是对函数工作的概念，还是对函数可能的实现方式，都变得更加清晰。递归实现的优点是它允许我们使用不可变的数据结构。&lt;/p&gt;
&lt;h3 id=&#34;为什么是不可变的数据结构&#34;&gt;为什么是不可变的数据结构？&lt;/h3&gt;
&lt;p&gt;你可能会好奇为什么我关注这些不可变的数据结构。正如我们将看到的那样，函数式编程与不可改变的数据结构配合得非常好。而且它们有一个很大的优势：你永远不用担心是否不小心修改了你的数据，也不用担心是否应该做一个副本来确定。所以使用不可变数据结构可以使代码不易出错，更容易调试。它们还具有潜在的性能优势。而我们接下来会看到，在 Raku 中还有另一个优势。&lt;/p&gt;
&lt;h2 id=&#34;返回函数的函数&#34;&gt;返回函数的函数&lt;/h2&gt;
&lt;p&gt;函数也可以返回函数。如果我们想拥有一个可参数化的函数，这一点尤其有用。举个简单的例子，假设我们想要一系列以固定值递增一个数字的函数：&lt;code&gt;add1&lt;/code&gt;、&lt;code&gt;add2&lt;/code&gt; 等。当然，我们可以分别写出每一个函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub add_1 (\x) {x+1}
sub add_2 (\x) {x+2}
sub add_3 (\x) {x+3}
sub add_4 (\x) {x+4}
sub add_5 (\x) {x+5}

say add_1(4); #=&amp;gt; says 5
# Python
def add_1 (x) : return x+1
def add_2 (x) : return x+2
def add_3 (x) : return x+3
def add_4 (x) : return x+4
def add_5 (x) : return x+5

print( add_1(4)) #=&amp;gt; says 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者我们可以使用一个充满匿名函数的列表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \add =
sub (\x) {x},
sub (\x) {x+1},
sub (\x) {x+2},
sub (\x) {x+3},
sub (\x) {x+4},
sub (\x) {x+5};

say add[0].(4); #=&amp;gt; says 5


# Python
add = (
lambda x : x+1,
lambda x : x+2,
lambda x : x+3,
lambda x : x+4,
lambda x : x+5
)

print( add[0](4)) #=&amp;gt; says 5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以做得更好，用一个循环来填充一个匿名函数的数组。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \add = [];
for 0 .. 5 -&amp;gt; \n {
  add.push(sub (\x) {x+n});
}

say add[1].(4); #=&amp;gt; says 5

# Python
add = []
for n in range(0,6):
  add.append(lambda x: x+n)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们每次循环迭代都会创建一个新的匿名函数，并将其添加到数组中。但是，我们可以使用一个函数来创建这些匿名函数，然后我们可以使用 &lt;code&gt;map&lt;/code&gt; 来代替循环，并使用一个不可改变的数据结构。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub gen_add(\n) {  
  sub (\x) {x+n}
}

my \add = map &amp;amp;gen_add, 0..5;

say add[1].(4); #=&amp;gt; says 5

# Python
def gen_add(n):  
  return lambda x : x+n

add = tuple(map( gen_add, range(0,6)))

print( add[1](4)) #=&amp;gt; says 5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;laziness&#34;&gt;Laziness&lt;/h3&gt;
&lt;p&gt;在 Raku 中，使用(不可改变的)范围有一个额外的好处：我们可以将范围的末端设置为无穷大，在 Raku 中可以写成 &lt;code&gt;∞&lt;/code&gt;(unicode 221E)、&lt;code&gt;*&lt;/code&gt; 或 &lt;code&gt;Inf&lt;/code&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
my \add = map &amp;amp;gen_add, 0 .. ∞;  

say add[244].(7124); #=&amp;gt; says 7368
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是一个所谓的&amp;quot;懒惰求值&amp;quot;的例子，简称 laziness：Raku 不会尝试（和失败）处理这个无限的列表。相反，它将在我们实际使用该列表中的一个元素时进行处理。表达式的评估会延迟到需要结果的时候，所以当我们调用 &lt;code&gt;add[244]&lt;/code&gt; 时，发生的情况是 &lt;code&gt;gen_add(244)&lt;/code&gt; 被调用来生成该函数。请注意，这在 &lt;code&gt;for&lt;/code&gt; 循环中是行不通的，因为要使用 &lt;code&gt;for&lt;/code&gt; 循环，我们需要一个可变的数据结构，而惰性列表必须是不可变的。所以这是一个很好的例子，说明函数式编程风格如何让你从懒惰中获益。&lt;/p&gt;
&lt;p&gt;这也是为什么我们递归地实现了 &lt;code&gt;foldl&lt;/code&gt;，然后用它来实现我们自己的 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt;：基于递归的版本不需要更新任何变量，所以它们可以与不可变的惰性数据结构一起工作。&lt;/p&gt;
&lt;h2 id=&#34;函数组合&#34;&gt;函数组合&lt;/h2&gt;
&lt;p&gt;我们在上面看到，你可以把 &lt;code&gt;map&lt;/code&gt; 和 &lt;code&gt;grep&lt;/code&gt; 的调用链在一起。通常情况下，你只需要将 &lt;code&gt;map&lt;/code&gt; 调用链在一起，例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
map -&amp;gt; \x { x + 5 }, map -&amp;gt; \x {x*x}, 1..30;

# Python
map( lambda x : x + 5, map( lambda x : x*x, range(1,31)))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种情况下，我们可以做得更有效率一些：比起创建一个列表，然后在这个列表上调用 &lt;code&gt;map&lt;/code&gt;，我们可以通过组合函数一次完成两个计算。Raku 为此提供了一个特殊的操作符。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;map -&amp;gt; \x { x + 5 } ∘ -&amp;gt; \x { x * x }, 1..30;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;操作符 &lt;code&gt;∘&lt;/code&gt;（&amp;ldquo;环形操作符&amp;rdquo;，unicode 2218，但你也可以用普通的 &lt;code&gt;o&lt;/code&gt;）是函数组成操作符，它的发音是 &amp;ldquo;after&amp;rdquo;，所以 &lt;code&gt;f ∘ g&lt;/code&gt; 是 &amp;ldquo;f after g&amp;rdquo;。它的作用是将两个现有的函数组合起来，创建一个新的函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;my &amp;amp;h = &amp;amp;f ∘ &amp;amp;g;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是下面的代码是一样的:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;sub h (\x) {
    f(g(x))
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;组成运算符的优点是，它可以适用于任何函数，包括匿名函数。但实际上，它只是另一个高阶函数。它只是下面函数的运算符形式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-perl6&#34; data-lang=&#34;perl6&#34;&gt;# Raku
sub compose(&amp;amp;f,&amp;amp;g) {
    sub (\x) { f(g(x)) }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Python 没有函数组成操作符，但你也可以很容易地在 Python 中拥有 &lt;code&gt;compose&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Python&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compose&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论&lt;/h2&gt;
&lt;p&gt;在这篇文章中，我用 Raku 和 Python 的例子介绍了三种关键的函数式编程技术：对函数进行操作的函数、返回函数的函数和函数组成。我已经展示了你如何使用函数 &lt;code&gt;map&lt;/code&gt;、&lt;code&gt;reduce&lt;/code&gt;(折叠)和 &lt;code&gt;grep&lt;/code&gt;(过滤)来操作不可变的列表。我已经解释了哟(如何用递归和不递归实现这样的函数，以及递归实现的优势是什么。下面是《 &lt;a href=&#34;https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.raku&#34;&gt;Raku&lt;/a&gt; 与 &lt;a href=&#34;https://github.com/wimvanderbauwhede/raku-examples/blob/master/decluttering-with-functional-programming.py&#34;&gt;Python&lt;/a&gt;》一文中的代码。&lt;/p&gt;
&lt;p&gt;当然，函数式编程的内容还有很多，我也写了&lt;a href=&#34;https://wimvanderbauwhede.github.io/articles/&#34;&gt;几篇更高级的文章&lt;/a&gt;。本文介绍的概念应该为理解那些更高级的主题打下良好的基础。如果你想了解更多关于函数式编程的知识，你可以考虑我的&lt;a href=&#34;https://www.futurelearn.com/courses/functional-programming-haskell&#34;&gt;免费在线课程&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;原文: &lt;a href=&#34;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/&#34;&gt;https://wimvanderbauwhede.github.io/articles/decluttering-with-functional-programming/&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/functional-programming">functional programming</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-26-cleaner-code-with-functional-programming/</guid>
                <pubDate>Sun, 26 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>Checklist for Raku 6.d</title>
                <link>https://ohmyweekly.github.io/notes/2020-07-21-checklist-for-6-dot-d/</link>
                
                
                <description>&lt;blockquote&gt;Checklist for 6.d&lt;/blockquote&gt;&lt;h2 id=&#34;问题&#34;&gt;问题&lt;/h2&gt;
&lt;p&gt;在 6.d 版本中, 很多东西都发生了变化, 我们至少需要发布一个版本。&lt;a href=&#34;https://github.com/perl6/roast/blob/master/docs/announce/6.d.md&#34;&gt;这里有个列表&lt;/a&gt;。然而, 覆盖面是不完整的。弃用通知采取了不同的形式, 一些新的类型和方法在那里, 一些则没有&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;#2632&lt;/code&gt; 引用这个问题, 并检查项目, 当你的工作, 无论是通过改变后的文档, 看到没有变化, 需要做它。在这种情况下, 请通过评论或如何解释为什么是这种情况。&lt;/p&gt;
&lt;h2 id=&#34;版本控制的变更&#34;&gt;版本控制的变更&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; &lt;code&gt;&amp;amp;await&lt;/code&gt; 在等待的时候不再阻塞线程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; &lt;code&gt;whenever&lt;/code&gt; 不在 &lt;code&gt;react&lt;/code&gt; 抛出的词法作用域内&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 在 &lt;code&gt;sub MAIN&lt;/code&gt; 里面的 &lt;code&gt;$*ARGFILES&lt;/code&gt; 总是由 &lt;code&gt;$*IN&lt;/code&gt; 馈入&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 结构(字面上的) &lt;code&gt;$()&lt;/code&gt;、&lt;code&gt;@()&lt;/code&gt; 和 &lt;code&gt;%()&lt;/code&gt; 不复存在&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 带有 &lt;code&gt;:D&lt;/code&gt;/&lt;code&gt;:U&lt;/code&gt; 类型约束的变量默认为约束类型的类型对象(例如, 你可以在它们身上使用 &lt;code&gt;.new&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; &lt;code&gt;start&lt;/code&gt; 块在 sink 上下文中附加异常处理程序&lt;/li&gt;
&lt;li&gt;~~**[6.d]** 例程必须使用 &lt;code&gt;return-rw&lt;/code&gt; 来返回一个 &lt;code&gt;Proxy&lt;/code&gt;, 即使例程被标记为 &lt;code&gt;is raw&lt;/code&gt; 或 &lt;code&gt;is rw&lt;/code&gt;~~&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 原生的 &lt;code&gt;num&lt;/code&gt; 类型默认为 &lt;code&gt;0e0&lt;/code&gt; 而不是 &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;[6.d]&lt;/strong&gt; 在子程序名中, 保留了键名为 &lt;code&gt;sym&lt;/code&gt; 的冒号对（如&lt;code&gt;:sym&amp;lt;foo&amp;gt;&lt;/code&gt;）, 以备将来使用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;废弃&#34;&gt;废弃&lt;/h2&gt;
&lt;p&gt;这些方法在 6.d 语言中已被废弃, 并将在 6.e 中被删除。实现者可以选择发出弃用警告, 或者在 6.e 版本发布后更长的时间内提供这些方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;&#39;-&#39;&lt;/code&gt; (单连字符)作为 &lt;code&gt;&amp;amp;open&lt;/code&gt; 的特殊路径, 表示特殊的句柄(使用 &lt;code&gt;IO::Special&lt;/code&gt; 对象代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle.slurp-rest&lt;/code&gt; (使用 &lt;code&gt;.slurp&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any.flatmap&lt;/code&gt; (使用&lt;code&gt;.flat&lt;/code&gt; 和 &lt;code&gt;.map&lt;/code&gt; 方法的组合来代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cool.path&lt;/code&gt; (使用 &lt;code&gt;.IO&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pair.freeze&lt;/code&gt; (使用去容器化的参数的 &lt;code&gt;Pair.new&lt;/code&gt; 来代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Str.subst-mutate&lt;/code&gt; (使用带有 &lt;code&gt;.=&lt;/code&gt; 方法调用赋值元运算符的 &lt;code&gt;Str.subst&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Rational.norm&lt;/code&gt; (现在 &lt;code&gt;Rational&lt;/code&gt; 类型必须在创建时标准化)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.child&lt;/code&gt; (使用 &lt;code&gt;.add&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;undefine&lt;/code&gt; (直接分配 &lt;code&gt;Empty&lt;/code&gt;/&lt;code&gt;Nil&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:count&lt;/code&gt; &lt;code&gt;&amp;amp;lines&lt;/code&gt;/&lt;code&gt;Str.lines&lt;/code&gt; 例程上的参数(使用所返回的 &lt;code&gt;Seq&lt;/code&gt; 上的 &lt;code&gt;.elems&lt;/code&gt; 代替)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;is_approx&lt;/code&gt; in Test.pm6 (使用与 &lt;code&gt;&amp;amp;is-approx&lt;/code&gt; 非常相似的行为来代替)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的行为&#34;&gt;新的行为&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过新的可定义的 &lt;code&gt;&amp;amp;RUN-MAIN&lt;/code&gt;、&lt;code&gt;&amp;amp;ARGS-TO-CAPTURE&lt;/code&gt; 和 &lt;code&gt;&amp;amp;GENERATE-USAGE&lt;/code&gt; 子例程改善 &lt;code&gt;sub MAIN&lt;/code&gt; 的自定义处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; 变量中的 &lt;code&gt;QuantHash&lt;/code&gt;/&lt;code&gt;Map&lt;/code&gt; 和 &lt;code&gt;@&lt;/code&gt; 变量中的 &lt;code&gt;List&lt;/code&gt; 可以用 &lt;code&gt;is&lt;/code&gt; 特性来声明（例如，&lt;code&gt;my %h is Set&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;新的 &lt;code&gt;&amp;lt;ww&amp;gt;&lt;/code&gt; regex 规则: 只在单词内匹配&lt;/li&gt;
&lt;li&gt;循环可以从上一条语句的值中产生一个值的列表&lt;/li&gt;
&lt;li&gt;循环中的 &lt;code&gt;next&lt;/code&gt;/&lt;code&gt;last&lt;/code&gt; 收集其最后的语句值, 对它们运行的迭代返回 &lt;code&gt;Empty&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.perl&lt;/code&gt; 可以在消耗过的 &lt;code&gt;Seq&lt;/code&gt;、多维数组、&lt;code&gt;Date&lt;/code&gt; 和 &lt;code&gt;CallFrame&lt;/code&gt; 上调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.gist&lt;/code&gt; 可以在 &lt;code&gt;Attribute&lt;/code&gt; 上调用&lt;/li&gt;
&lt;li&gt;对自动生成的 &lt;code&gt;USAGE&lt;/code&gt; 信息进行了大量改进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is hidden-from-USAGE&lt;/code&gt; 特性，从自动生成的 &lt;code&gt;USAGE&lt;/code&gt; 消息中隐藏 &lt;code&gt;sub MAIN&lt;/code&gt; 候选者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Parameter.perl&lt;/code&gt; 包括可内省的默认值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%*ENV&lt;/code&gt; 值是同素异形的&lt;/li&gt;
&lt;li&gt;尝试使用变量 &lt;code&gt;$;&lt;/code&gt;、&lt;code&gt;$,&lt;/code&gt;、&lt;code&gt;$.&lt;/code&gt;、&lt;code&gt;$\&lt;/code&gt;、&lt;code&gt;$(&lt;/code&gt;、&lt;code&gt;$)&lt;/code&gt;、&lt;code&gt;$&amp;lt;&lt;/code&gt;、&lt;code&gt;$&amp;gt;&lt;/code&gt;、&lt;code&gt;$/&lt;/code&gt;、&lt;code&gt;$\&lt;/code&gt;、&lt;code&gt;$[&lt;/code&gt;、&lt;code&gt;$-&lt;/code&gt;、&lt;code&gt;$+&lt;/code&gt; 和 &lt;code&gt;$@&lt;/code&gt; 会抛出 &lt;code&gt;X::Syntax::Perl5Var&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认的 &lt;code&gt;Hash.keyof&lt;/code&gt; 返回一个 &lt;code&gt;Str(Any)&lt;/code&gt; 强转类型对象&lt;/li&gt;
&lt;li&gt;非 ASCII 数字可以在 &lt;code&gt;:42foo&lt;/code&gt; 冒号对快捷方式中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrDistance&lt;/code&gt; 字符串化为 &lt;code&gt;.after&lt;/code&gt; 字符串&lt;/li&gt;
&lt;li&gt;更明确的 Pod 表格格式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumeration.enums&lt;/code&gt; 返回一个 &lt;code&gt;Map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;各种整数类型的 &lt;code&gt;.Range&lt;/code&gt; 返回它们支持的值的范围&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min&lt;/code&gt;/&lt;code&gt;max&lt;/code&gt;  例程也适用于 &lt;code&gt;Hash&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Signature&lt;/code&gt; 字面值可以包含字符串/数字字面值以及调用者标记&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List.invert&lt;/code&gt; 通过所需的 &lt;code&gt;Pair&lt;/code&gt; 绑定映射, 导致潜在的类型检查失败&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:exists&lt;/code&gt; 可以与多维关联下标一起使用&lt;/li&gt;
&lt;li&gt;动态创建的列表可以用来定义一个枚举&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;.first&lt;/code&gt; 中, Junction 可以作为匹配器使用&lt;/li&gt;
&lt;li&gt;原生属性可以作为参数中的绑定目标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc&lt;/code&gt; 可以与其他 &lt;code&gt;Proc&lt;/code&gt; 中的 &lt;code&gt;IO::Pipe&lt;/code&gt; 一起工作&lt;/li&gt;
&lt;li&gt;类型数组可以用 &lt;code&gt;my SomeType @array&lt;/code&gt; 和 &lt;code&gt;my @array of SomeType&lt;/code&gt; 创建&lt;/li&gt;
&lt;li&gt;当把 &lt;code&gt;Mixy&lt;/code&gt; 强转为 &lt;code&gt;Setty&lt;/code&gt;/&lt;code&gt;Baggy &lt;/code&gt; 时, 负数权重的项将被删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:nth&lt;/code&gt; 副词在 &lt;code&gt;m//&lt;/code&gt; 上接受一个 &lt;code&gt;Junction&lt;/code&gt; 作为参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CX::Warn&#39; 和 &lt;/code&gt;CX::Done&lt;code&gt;可以在&lt;/code&gt;CONTROL` phaser 中捕获&lt;/li&gt;
&lt;li&gt;&lt;code&gt;next&lt;/code&gt; 可用于 &lt;code&gt;whenever&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;require&lt;/code&gt; 符号不再过境性地暴露出来&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;{...}&lt;/code&gt; 进行多维访问, 类似于 &lt;code&gt;[...]&lt;/code&gt; 的工作方式&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;END&lt;/code&gt; 时间打开的任何手柄都会自动关闭&lt;/li&gt;
&lt;li&gt;在缓存的 &lt;code&gt;Seq&lt;/code&gt; 上, 当 &lt;code&gt;&amp;amp;infix:&amp;lt;eqv&amp;gt;&lt;/code&gt;、&lt;code&gt;.Slip&lt;/code&gt;、&lt;code&gt;.join&lt;/code&gt;、&lt;code&gt;.List&lt;/code&gt;、&lt;code&gt;.list&lt;/code&gt;、&lt;code&gt;.eager&lt;/code&gt;、&lt;code&gt;.Array&lt;/code&gt; 和 &lt;code&gt;.is-lazy&lt;/code&gt; 被调用时, 就会使用缓存列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle.encoding&lt;/code&gt; 以 &lt;code&gt;Nil&lt;/code&gt; 表示切换到二进制模式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is default&lt;/code&gt; 特质与属性一起工作&lt;/li&gt;
&lt;li&gt;在多重分派中, 带有 &lt;code&gt;is rw&lt;/code&gt; 特性的参数被认为比没有特性的参数窄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&lt;/code&gt;、&lt;code&gt;Blob&lt;/code&gt; 和 &lt;code&gt;Map&lt;/code&gt; 的 &lt;code&gt;.gist&lt;/code&gt; 被裁剪成100个元素&lt;/li&gt;
&lt;li&gt;新的 &lt;code&gt;for&lt;/code&gt; 语句修饰符 &lt;code&gt;hyper for&lt;/code&gt;、&lt;code&gt;race for&lt;/code&gt; 和 &lt;code&gt;lazy for&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; 循环自动序列化 &lt;code&gt;RaceSeq&lt;/code&gt;/&lt;code&gt;HyperSeq&lt;/code&gt;；使用新的 &lt;code&gt;for&lt;/code&gt; 语句修饰符&lt;code&gt;hyper for&lt;/code&gt;/&lt;code&gt;race for&lt;/code&gt;避免&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;does&amp;gt;&lt;/code&gt; 可用于 RHS 上的非组合实例&lt;/li&gt;
&lt;li&gt;数值比较器可以与 &lt;code&gt;DateTime &lt;/code&gt; 对象一起使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; 保留空白类型&lt;/li&gt;
&lt;li&gt;定义了带 &lt;code&gt;@&lt;/code&gt;、&lt;code&gt;%&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 魔符常数的语义&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;math&#34;&gt;Math&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Rational&lt;/code&gt; 总是在创建时被化简, 并在其一生中保持不变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Inf&lt;/code&gt;、&lt;code&gt;Inf&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 可以分别用 &lt;code&gt;&amp;lt;-1/0&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;1/0&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;0/0&lt;/code&gt;&amp;gt; 表示, 通过&lt;code&gt;Rational&lt;/code&gt; 类型进行舍去。零分母 &lt;code&gt;Rational&lt;/code&gt; 被标准化为这三个值之一&lt;/li&gt;
&lt;li&gt;在 ±&lt;code&gt;Inf&lt;/code&gt; 和 &lt;code&gt;NaN&lt;/code&gt; 上调用 &lt;code&gt;.Int&lt;/code&gt;, 会抛出异常&lt;/li&gt;
&lt;li&gt;改进了 &lt;code&gt;Num&lt;/code&gt; 运算符和数学函数的 IEEE 754-2008 合规性&lt;/li&gt;
&lt;li&gt;负零 &lt;code&gt;Num&lt;/code&gt;(&lt;code&gt;-0e0&lt;/code&gt;)被所有例程和语法结构正确处理&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Num&lt;/code&gt; 类型的字符串化必须是可舍弃到原始 &lt;code&gt;Num&lt;/code&gt; 的&lt;/li&gt;
&lt;li&gt;定义了涉及零的 &lt;code&gt;Complex &lt;/code&gt; 指数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.expmod&lt;/code&gt; 中的负数幂有效&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setsbagsmixesaka-quanthashes和集合运算符&#34;&gt;Sets、Bags、Mixes(aka QuantHashes)和集合运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Set 运算符可以用在任何对象上, 在需要的时候会被强转
&lt;ul&gt;
&lt;li&gt;所以, 不需要也不希望有任何预先的强转&lt;/li&gt;
&lt;li&gt;如果没有 QuantHash 就能实现所需的功能, 那么 Set 运算符可以自由地不创建任何 QuantHash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对不同类型的 QuantHashes 的 Set 操作将强转到最自由的形式（Set -&amp;gt; Bag -&amp;gt; Mix）&lt;/li&gt;
&lt;li&gt;集合运算符的 set_precedes 家族( &lt;code&gt;(&amp;lt;+)&lt;/code&gt;、&lt;code&gt;≼&lt;/code&gt;、&lt;code&gt;(&amp;gt;+)&lt;/code&gt;、&lt;code&gt;≽&lt;/code&gt;) 已被移除
&lt;ul&gt;
&lt;li&gt;曾经是子集运算符的 Baggy 形式&lt;/li&gt;
&lt;li&gt;QuantHash 升级为最自由的形式, 所以 &lt;code&gt;(&amp;lt;=)&lt;/code&gt;、&lt;code&gt;⊆&lt;/code&gt;、&lt;code&gt;(&amp;gt;=)&lt;/code&gt;、&lt;code&gt;⊇&lt;/code&gt; 做正确的事情&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.classify-list&lt;/code&gt; 方法可用于 &lt;code&gt;Baggy&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.categorize-list&lt;/code&gt; 方法可用于 &lt;code&gt;Baggy&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.invert&lt;/code&gt; 方法可用于核心 &lt;code&gt;QuantHash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.antipairs&lt;/code&gt; 方法可用于 &lt;code&gt;QuantHash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuantHash&lt;/code&gt; 类型有 &lt;code&gt;.new-from-pairs&lt;/code&gt; 和将一个 &lt;code&gt;QuantHash&lt;/code&gt; 类型转换为另一个 &lt;code&gt;QuantHash&lt;/code&gt; 类型的方法(例如 &lt;code&gt;Set&lt;/code&gt; 类型的 &lt;code&gt;.Bag&lt;/code&gt; 方法)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;QuantHash&lt;/code&gt; 类型上的 &lt;code&gt;.hash&lt;/code&gt; 对键值进行了字符串化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的形参和实参&#34;&gt;新的形参和实参&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Date.new&lt;/code&gt; 接受一个 &lt;code&gt;:&amp;amp;formatter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.first&lt;/code&gt; 可以接受 &lt;code&gt;:kv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique&lt;/code&gt; 和 &lt;code&gt;.repeated&lt;/code&gt; 可以接受 &lt;code&gt;:&amp;amp;as&lt;/code&gt; 和 &lt;code&gt;:&amp;amp;with&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test.pm6 中的 &lt;code&gt;&amp;amp;plan&lt;/code&gt; 可以接受 &lt;code&gt;:skip-all&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;run&lt;/code&gt;/&lt;code&gt;&amp;amp;shell&lt;/code&gt; 可以接受 &lt;code&gt;:merge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;note&lt;/code&gt; 可以在没有参数的情况下调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open&lt;/code&gt; 接受 &lt;code&gt;:$out-buffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.resolve&lt;/code&gt; 可以接受 &lt;code&gt;:completely&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.parent&lt;/code&gt; 可以接受一个 &lt;code&gt;Int&lt;/code&gt; 表示父级&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc::Async.new&lt;/code&gt; 吞噬位置参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Signature.ACCEPTS&lt;/code&gt; 接受非 &lt;code&gt;Signature&lt;/code&gt;/&lt;code&gt;Capture&lt;/code&gt; 参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;EVAL&lt;/code&gt; 可以接受一个 &lt;code&gt;Blob&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.keep&lt;/code&gt;/&lt;code&gt;.break&lt;/code&gt; 可以在没有参数的情况下调用&lt;/li&gt;
&lt;li&gt;原生数组上的 &lt;code&gt;.sum&lt;/code&gt; 可以接受 &lt;code&gt;:wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is required&lt;/code&gt; 现在可以接受一个表示理由的参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Socket::Async.listen&lt;/code&gt; 可以绑定到端口 &lt;code&gt;0&lt;/code&gt; 以向操作系统申请免费端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.encode&lt;/code&gt; 可以接受 &lt;code&gt;:translate-nl&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的例程和运算符&#34;&gt;新的例程和运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新的 &lt;code&gt;atomicint&lt;/code&gt; Unicode 运算符和 ASCII 等价物, 保证线程安全, 原子操作:
&lt;code&gt;&amp;amp;infix:&amp;lt;⚛=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-assign&lt;/code&gt;、&lt;code&gt;&amp;amp;prefix:&amp;lt;⚛&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch&lt;/code&gt;、
&lt;code&gt;&amp;amp;prefix:&amp;lt;++⚛&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-inc-fetch&lt;/code&gt;、&lt;code&gt;&amp;amp;postfix:&amp;lt;⚛++&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-inc&lt;/code&gt;、
&lt;code&gt;&amp;amp;prefix:&amp;lt;--⚛&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-dec-fetch&lt;/code&gt;、&lt;code&gt;&amp;amp;postfix:&amp;lt;⚛--&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-dec&lt;/code&gt;、
&lt;code&gt;&amp;amp;infix:&amp;lt;⚛-=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;⚛−=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-sub&lt;/code&gt; 和 &lt;code&gt;&amp;amp;infix:&amp;lt;⚛+=&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;atomic-fetch-add&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;cas&lt;/code&gt;: 原子比较与交换&lt;/li&gt;
&lt;li&gt;&lt;code&gt;≤&lt;/code&gt;、&lt;code&gt;≥&lt;/code&gt; 和 &lt;code&gt;≠&lt;/code&gt; 运算符是 Unicode 运算符, 分别等价于 &lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt; 和 &lt;code&gt;!=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;unicmp&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;coll&amp;gt;&lt;/code&gt;: &lt;code&gt;&amp;amp;infix:&amp;lt;cmp&amp;gt;&lt;/code&gt; 的替代行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TR///&lt;/code&gt;: &lt;code&gt;tr///&lt;/code&gt; 的非变异版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submethod TWEAK&lt;/code&gt;: 与 &lt;code&gt;BUILD&lt;/code&gt; 类似, 除了它与属性默认值兼容之外&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;duckmap&lt;/code&gt;: 应用 &lt;code&gt;&amp;amp;callable&lt;/code&gt; 到每个元素上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;deepmap&lt;/code&gt;: 应用 &lt;code&gt;&amp;amp;callable&lt;/code&gt; 到每个元素上, 下降到 &lt;code&gt;Iterable&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;take-rw&lt;/code&gt;: 像 &lt;code&gt;&amp;amp;take&lt;/code&gt; 一样, 但有一个可写的容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;indir&lt;/code&gt;: 在给定的 &lt;code&gt;$*CWD&lt;/code&gt; 中执行代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;spurt&lt;/code&gt;: 参见 &lt;code&gt;IO::Path.spurt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;prompt&lt;/code&gt;: 提示用户输入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uniprops&lt;/code&gt;: &lt;code&gt;uniprop&lt;/code&gt; 的多字符版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symlink&lt;/code&gt;: 建立文件符号链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;link&lt;/code&gt;: 创建文件硬连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.hyper&lt;/code&gt;/&lt;code&gt;.race&lt;/code&gt;: 并行处理值的列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seq.from-loop&lt;/code&gt;: 从 &lt;code&gt;Callable&lt;/code&gt; 生产一个 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Str.uniparse&lt;/code&gt;: 将一个或多个 Unicode 字符名解析为实际字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Str.parse-base&lt;/code&gt;: &lt;code&gt;Int.base&lt;/code&gt; 操作的反转&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path&lt;/code&gt; 提供了 &lt;code&gt;.ACCEPTS&lt;/code&gt;、&lt;code&gt;.SPEC&lt;/code&gt;、&lt;code&gt;.CWD&lt;/code&gt;、&lt;code&gt;.Numeric&lt;/code&gt;、&lt;code&gt;.add&lt;/code&gt;、&lt;code&gt;.extension&lt;/code&gt;、&lt;code&gt;.mode&lt;/code&gt; 和各种文件测试、&lt;code&gt;.parts&lt;/code&gt;、&lt;code&gt;.sibling&lt;/code&gt; 和 &lt;code&gt;.spurt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle&lt;/code&gt; 提供了 &lt;code&gt;.READ&lt;/code&gt;、&lt;code&gt;.WRITE&lt;/code&gt;、&lt;code&gt;.EOF&lt;/code&gt;、&lt;code&gt;.DESTROY&lt;/code&gt;,
&lt;code&gt;.readchars&lt;/code&gt;、&lt;code&gt;.flush&lt;/code&gt;、&lt;code&gt;.lock&lt;/code&gt;、&lt;code&gt;.unlock&lt;/code&gt;、&lt;code&gt;.out-buffer&lt;/code&gt;、&lt;code&gt;.tell&lt;/code&gt;,
&lt;code&gt;.say&lt;/code&gt;、&lt;code&gt;.slurp&lt;/code&gt;、&lt;code&gt;.seek&lt;/code&gt;、&lt;code&gt;.printf&lt;/code&gt;、&lt;code&gt;.print-nl&lt;/code&gt; 和 &lt;code&gt;.watch&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Pipe&lt;/code&gt; 提供了 &lt;code&gt;.proc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&lt;/code&gt; 提供了 &lt;code&gt;.skip-one&lt;/code&gt;、&lt;code&gt;.skip-at-least&lt;/code&gt; 和 &lt;code&gt;.skip-at-least-pull-one&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mu.emit&lt;/code&gt;: &lt;code&gt;&amp;amp;emit&lt;/code&gt; 的方法形式&lt;/li&gt;
&lt;li&gt;Test.pm6 模块中的 &lt;code&gt;&amp;amp;fails-like&lt;/code&gt;: 允许测试失败&lt;/li&gt;
&lt;li&gt;Test.pm6 模块中的 &lt;code&gt;&amp;amp;bail-out&lt;/code&gt;: 退出失败的测试套件&lt;/li&gt;
&lt;li&gt;Test.pm6 模块中的 &lt;code&gt;&amp;amp;is-approx&lt;/code&gt;: 测试一个数字近似于另一个&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Buf&lt;/code&gt; 拥有 &lt;code&gt;.allocate&lt;/code&gt;、&lt;code&gt;.reallocate&lt;/code&gt;、&lt;code&gt;.append&lt;/code&gt;、&lt;code&gt;.push&lt;/code&gt;、&lt;code&gt;.pop&lt;/code&gt;、&lt;code&gt;.splice&lt;/code&gt;、&lt;code&gt;.subbuf-rw&lt;/code&gt;、&lt;code&gt;.prepend&lt;/code&gt; 和 &lt;code&gt;.unshift&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt; 支持了 &lt;code&gt;.rand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backtrace&lt;/code&gt; 拥有方法 &lt;code&gt;.map&lt;/code&gt;、&lt;code&gt;.flat&lt;/code&gt;、&lt;code&gt;.concise&lt;/code&gt; 和 &lt;code&gt;.summary&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.classify-list&lt;/code&gt; 方法可用于 &lt;code&gt;Hash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.categorize-list&lt;/code&gt; 方法可用于 &lt;code&gt;Hash&lt;/code&gt; 类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code.of&lt;/code&gt;: 返回返回类型约束&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code.line&lt;/code&gt;/&lt;code&gt;.file&lt;/code&gt;: 返回定义的行/文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc::Async&lt;/code&gt; 提供了 &lt;code&gt;.Supply&lt;/code&gt;、&lt;code&gt;.ready&lt;/code&gt;、&lt;code&gt;.pid&lt;/code&gt;、&lt;code&gt;.bind-stdin&lt;/code&gt;、&lt;code&gt;.bind-stdout&lt;/code&gt; 和 &lt;code&gt;.bind-stderr&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc.command&lt;/code&gt;/&lt;code&gt;Proc::Async.command&lt;/code&gt;: 我们要执行的命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proc&lt;/code&gt; 提供了 &lt;code&gt;.signal&lt;/code&gt;、&lt;code&gt;.pid&lt;/code&gt; 和 &lt;del&gt;&lt;code&gt;.encoding&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Complex&lt;/code&gt; 提供了 &lt;code&gt;.cis&lt;/code&gt;、&lt;code&gt;.reals&lt;/code&gt;、&lt;code&gt;.ceiling&lt;/code&gt;、&lt;code&gt;.floor&lt;/code&gt;、&lt;code&gt;.round&lt;/code&gt;、&lt;code&gt;.truncate&lt;/code&gt; 和 &lt;code&gt;.abs&lt;/code&gt; 方法, 并可以使用 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 进行比较(只要虚部可以忽略不计)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateTime&lt;/code&gt; 提供了 &lt;code&gt;.offset-in-hours&lt;/code&gt;、&lt;code&gt;.hh-mm-ss&lt;/code&gt; 和 &lt;code&gt;.Date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DateTime&lt;/code&gt; 可以使用 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 运算符和其它 &lt;code&gt;DateTime&lt;/code&gt; 对象进行比较&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt; 提供了 &lt;code&gt;.DateTime&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;+&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;-&amp;gt;&lt;/code&gt; 可以被 &lt;code&gt;Duration&lt;/code&gt;、&lt;code&gt;DateTime&lt;/code&gt; 和 &lt;code&gt;Real&lt;/code&gt; 类型调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enumeration&lt;/code&gt; 提供了 &lt;code&gt;.Int&lt;/code&gt;、&lt;code&gt;.pred&lt;/code&gt;、&lt;code&gt;.succ&lt;/code&gt;、&lt;code&gt;.kv&lt;/code&gt; 和 &lt;code&gt;.pair&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.Date&lt;/code&gt; 可以在 &lt;code&gt;Instant&lt;/code&gt; 上调用&lt;/li&gt;
&lt;li&gt;Junction 能使用 &lt;code&gt;Junction.new&lt;/code&gt; 调用来创建&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; 类型拥有 &lt;code&gt;.to&lt;/code&gt; 和 &lt;code&gt;.from&lt;/code&gt; 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt; type 提供了 &lt;code&gt;Int&lt;/code&gt; 方法, 返回 pair 的数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any.skip&lt;/code&gt;: 跳过列表中的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Any.batch&lt;/code&gt;: &lt;code&gt;.rotor&lt;/code&gt; 的更基本的表兄弟&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Mu.iterator&lt;/code&gt;: 为一个列表中的值生成一个 &lt;code&gt;Iterator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Spec::*&lt;/code&gt; 类型提供了 &lt;code&gt;.tmpdir&lt;/code&gt;、&lt;code&gt;.extension&lt;/code&gt; 和 &lt;code&gt;.path&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pair&lt;/code&gt; 提供了 &lt;code&gt;.ACCEPTS&lt;/code&gt;、&lt;code&gt;.Pair&lt;/code&gt; 和 &lt;code&gt;.invert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.Capture&lt;/code&gt; 方法对所有核心类型都有明确定义&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.ACCEPTS&lt;/code&gt; 在同素异形体上的语义&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Failure.self&lt;/code&gt; 使未处理的 &lt;code&gt;Failure&lt;/code&gt; 爆发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Thread.is-initial-thread&lt;/code&gt;: 我们是在初始线程中运行吗&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Match&lt;/code&gt; 提供了 &lt;code&gt;.Int&lt;/code&gt; 和 &lt;code&gt;.actions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Socket::Async&lt;/code&gt; 提供了 &lt;code&gt;.socket-port&lt;/code&gt; 和 &lt;code&gt;.peer-port&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise&lt;/code&gt; 提供了另一种构造函器 &lt;code&gt;.kept&lt;/code&gt; 和 &lt;code&gt;.broken&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhateverCode&lt;/code&gt; 提供了 &lt;code&gt;.assuming&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhateverCode&lt;/code&gt; 和 &lt;code&gt;Block&lt;/code&gt; 提供了 &lt;code&gt;.cando&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.:&amp;lt;…&amp;gt;&lt;/code&gt; 语法用于调用前缀运算符作为后缀&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$*KERNEL&lt;/code&gt; 提供了 &lt;code&gt;.hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nil&lt;/code&gt; 拥有定义的 &lt;code&gt;.FALLBACK&lt;/code&gt; 特殊方法来返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新类型&#34;&gt;新类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;atomicint&lt;/code&gt;: 原生的 &lt;code&gt;int&lt;/code&gt;, 大小可用于新的原子运算符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lock::Async&lt;/code&gt;: 互斥的非阻塞机制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoding::Registry&lt;/code&gt;: 管理可用的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoding::Encoder&lt;/code&gt;: 编码器, 用于特定的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Encoding::Decoder&lt;/code&gt;: 解码器, 用于特定的编码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::CatHandle&lt;/code&gt;: 将多个只读的 &lt;code&gt;IO::Handle&lt;/code&gt; 视同一个&lt;/li&gt;
&lt;li&gt;原生的 &lt;code&gt;str&lt;/code&gt; 数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supplier::Preserving&lt;/code&gt;: 缓存的实时 &lt;code&gt;Supply&lt;/code&gt; 工厂&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Semaphore&lt;/code&gt;: 控制多线程对共享资源的访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Special&lt;/code&gt;: 特殊I/O设备的路径 (例如 &lt;code&gt;STDOUT&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Exceptions::JSON&lt;/code&gt; 自定义异常处理程序的实现(可与&lt;code&gt;PERL6_EXCEPTIONS_HANDLER&lt;/code&gt; 环境变量一起使用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SeekType&lt;/code&gt; 枚举: &lt;code&gt;IO::Handle.seek&lt;/code&gt; 中使用的值&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新的变量&#34;&gt;新的变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*USAGE&lt;/code&gt;: 可在 &lt;code&gt;MAIN&lt;/code&gt; 子例程中使用, 包含自动生成的 &lt;code&gt;USAGE&lt;/code&gt; 信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;%*SUB-MAIN-OPTS: 设置 &lt;code&gt;sub MAIN&lt;/code&gt; 的行为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;%*SUB-MAIN-OPTS&amp;lt;named-anywhere&amp;gt;&lt;/code&gt; 允许将命名参数放在命令行的任何位置&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*COLLATION&lt;/code&gt;: 配置四个 Unicode 校对级别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*INIT-INSTANT&lt;/code&gt;: 代表程序启动时间的 &lt;code&gt;Instant&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$*HOME&lt;/code&gt;: 用户的主目录, 如果存在的话&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;amp;*chdir&lt;/code&gt;: &lt;code&gt;Callable&lt;/code&gt; 包含 &lt;code&gt;IO::Path.chdir&lt;/code&gt; 的变体, 也设置进程的当前目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PERL6_TEST_DIE_ON_FAIL&lt;/code&gt; 环境变量: 在第一次失败时停止测试套件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PERL6_EXCEPTIONS_HANDLER&lt;/code&gt; 环境变量: 指定自定义异常处理类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对边缘情况强转行为的澄清&#34;&gt;对边缘情况/强转行为的澄清&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UInt&lt;/code&gt; 与 &lt;code&gt;Int&lt;/code&gt; 类型对象智能匹配为 &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sink&lt;/code&gt; 语句前缀爆炸 &lt;code&gt;Failure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了1项和0项列表以及负参数和非整数参数的 &lt;code&gt;permutations&lt;/code&gt;/&lt;code&gt;combinations&lt;/code&gt; 的行为&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;val&lt;/code&gt;、&lt;code&gt;Str.Numeric&lt;/code&gt; 和其他 &lt;code&gt;Str&lt;/code&gt; 数字转换方法在试图转换 Unicode &lt;code&gt;No&lt;/code&gt; 字符组或合成数字时会 &lt;code&gt;fail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:42foo&lt;/code&gt; 冒号对快捷方式中不能使用合成数字&lt;/li&gt;
&lt;li&gt;现在、&lt;code&gt;Enumeration&lt;/code&gt; 可以作为一个数组形状指定器使用&lt;/li&gt;
&lt;li&gt;含有空格的 &lt;code&gt;Str&lt;/code&gt; 的数值转换现在返回 &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;带空的模式参数的 &lt;code&gt;samark&lt;/code&gt;, 简单地返回调用者&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.polymod&lt;/code&gt; 可用于 &lt;code&gt;lazy&lt;/code&gt; 但有限的除数列表&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.[*-0]&lt;/code&gt; 索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rotor&lt;/code&gt; 中大于子列表的负数空隙抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rotor&lt;/code&gt; 的非 &lt;code&gt;Int&lt;/code&gt; 参数被强转为 &lt;code&gt;Int&lt;/code&gt; 参数&lt;/li&gt;
&lt;li&gt;读取 &lt;code&gt;/proc&lt;/code&gt; 文件时定义了 &lt;code&gt;.lines&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了字符串上后缀/前缀  &lt;code&gt;++&lt;/code&gt;/&lt;code&gt;--&lt;/code&gt; 中泰语数字的行为&lt;/li&gt;
&lt;li&gt;sunk &lt;code&gt;for&lt;/code&gt; 里面的 &lt;code&gt;map&lt;/code&gt; 被视为 sunk&lt;/li&gt;
&lt;li&gt;Sunk &lt;code&gt;for&lt;/code&gt; 循环将上一条语句的方法调用值下沉&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bool&lt;/code&gt; 对象上的 &lt;code&gt;.Int&lt;/code&gt; 返回一个 &lt;code&gt;Int&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;splice&lt;/code&gt; 可用于扩展数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classify&lt;/code&gt; 可以与 &lt;code&gt;Junction&lt;/code&gt; 配合使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pairup&lt;/code&gt; on a type object returns an empty &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pairup&lt;/code&gt; 总是返回一个 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拒绝接受  &lt;code&gt;Date&lt;/code&gt;/&lt;code&gt;DateTime&lt;/code&gt; 构造函数中的合成代码点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⸨&lt;/code&gt;/&lt;code&gt;⸩&lt;/code&gt; 对儿现在可以作为引号结构中的匹配字符使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array&lt;/code&gt; 类型对象上的 &lt;code&gt;.flat&lt;/code&gt; 简单地返回该类型对象&lt;/li&gt;
&lt;li&gt;混合级 &lt;code&gt;classify&lt;/code&gt; 在 &lt;code&gt;Hash&lt;/code&gt; 上抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Junction&lt;/code&gt; 可以用于给 &lt;code&gt;Hash&lt;/code&gt; 指定多个键&lt;/li&gt;
&lt;li&gt;给 &lt;code&gt;.classify-list&lt;/code&gt; 的 &lt;code&gt;Callable&lt;/code&gt; 现在保证每项只执行一次&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:delete&lt;/code&gt; 对 &lt;code&gt;Hash&lt;/code&gt; 类型对象进行关联查找时返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test.pm6 中的 &lt;code&gt;&amp;amp;is-deeply&lt;/code&gt; 会自动 &lt;code&gt;.cache&lt;/code&gt; 作为参数的 &lt;code&gt;Seq&lt;/code&gt;, 并使用返回的 &lt;code&gt;List&lt;/code&gt; 进行测试&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Complex.new()&lt;/code&gt; 给出 &lt;code&gt;&amp;lt;0+0i&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Int.new&lt;/code&gt; 现在可以保证构建一个新的 &lt;code&gt;Int&lt;/code&gt; (而不是, 比如说, 从常量缓存中重用一个)&lt;/li&gt;
&lt;li&gt;定义了一个参数(1-arg)版本的 &lt;code&gt;&amp;amp;infix:&amp;lt;=:=&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;infix:&amp;lt;eqv&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果直接或间接地调用 &lt;code&gt;.BIND-POS&lt;/code&gt;、&lt;code&gt;.BIND-KEY&lt;/code&gt;、&lt;code&gt;.ASSIGN-POS&lt;/code&gt;、&lt;code&gt;.ASSIGN-KEY&lt;/code&gt;、&lt;code&gt;.STORE&lt;/code&gt;、&lt;code&gt;.push&lt;/code&gt;、&lt;code&gt;.append&lt;/code&gt;、&lt;code&gt;.unshift&lt;/code&gt;、&lt;code&gt;.prepend&lt;/code&gt;、&lt;code&gt;Nil&lt;/code&gt; 类型现在抛出异常&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nil.ord&lt;/code&gt; 返回一个空的 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Nil.chrs&lt;/code&gt; 返回一个 &lt;code&gt;&amp;quot;\0&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Num.new&lt;/code&gt; 强转参数为 &lt;code&gt;Num&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infix:&amp;lt;Z&amp;gt;()&lt;/code&gt; 返回一个空的 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.comb&lt;/code&gt; 总是返回一个 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;&amp;amp;infix:&amp;lt;+&amp;gt;&lt;/code&gt; 化简一个项, 简单地返回该项&lt;/li&gt;
&lt;li&gt;&lt;code&gt;()[0]&lt;/code&gt; 返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;允许在(可能是无限的) &lt;code&gt;Seq&lt;/code&gt; 上使用 Regex 智能匹配&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Range&lt;/code&gt; 对象的智能匹配&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Set&lt;/code&gt; 转换为&lt;code&gt;Mix&lt;/code&gt;/&lt;code&gt;Bag&lt;/code&gt; 不再有 &lt;code&gt;Bool&lt;/code&gt; 权重&lt;/li&gt;
&lt;li&gt;当一个或多个操作数为 &lt;code&gt;0&lt;/code&gt; 时、&lt;code&gt;gcd&lt;/code&gt; 是有定义的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defined&lt;/code&gt; 例程中的 &lt;code&gt;Junction&lt;/code&gt; 自动线程化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt; 可以处理含有 &lt;code&gt;Junction&lt;/code&gt; 的列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grammar.parse&lt;/code&gt; 让顶级 &lt;code&gt;regex&lt;/code&gt; 回溯&lt;/li&gt;
&lt;li&gt;&lt;code&gt;U+2212 MINUS SIGN [Sm] (-)&lt;/code&gt; 现在得到更多结构的支持, 如 &lt;code&gt;Str.Numeric&lt;/code&gt; 和 &lt;code&gt;&amp;amp;val&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Arity-1 &lt;code&gt;&amp;amp;infix:&amp;lt;~&amp;gt;&lt;/code&gt; 与 &lt;code&gt;Blob&lt;/code&gt; 可以一起工作&lt;/li&gt;
&lt;li&gt;在签名中, 所有的 &lt;code&gt;Numeric&lt;/code&gt; 字面值都支持作为值字面值&lt;/li&gt;
&lt;li&gt;正则表达式中的 &lt;code&gt;\b&lt;/code&gt; 和 &lt;code&gt;\B&lt;/code&gt; 抛出 &lt;code&gt;X::Obsolete&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt; 和 &lt;code&gt;False&lt;/code&gt; 作为签名中的值字面量发出警告&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sort&lt;/code&gt; 和 &lt;code&gt;IO::Spec::Unix.path&lt;/code&gt; 的返回值总是 &lt;code&gt;Seq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Range&lt;/code&gt; 对象上的 Out-of-range &lt;code&gt;.AT-POS&lt;/code&gt; 返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于不存在的键、&lt;code&gt;Pair.AT-KEY&lt;/code&gt; 返回 &lt;code&gt;Nil&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;所有的 &lt;code&gt;Cool&lt;/code&gt; 类型都提供了 &lt;code&gt;.Rat&lt;/code&gt;/&lt;code&gt;.FatRat&lt;/code&gt; 强转器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path&lt;/code&gt; 文件测试不缓存先前测试执行的结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seq&lt;/code&gt; eqv &lt;code&gt;List&lt;/code&gt; 仅根据类型不匹配就定为 &lt;code&gt;False&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;在 &lt;code&gt;Hash &lt;/code&gt;、&lt;code&gt;Hash &lt;/code&gt; 和 &lt;code&gt;QuantHash&lt;/code&gt; 上, 来自 &lt;code&gt;.kv&lt;/code&gt;、&lt;code&gt;.values&lt;/code&gt; 和 &lt;code&gt;.pair&lt;/code&gt; 序列的值是可写的&lt;/del&gt; 参见 &lt;a href=&#34;https://github.com/Raku/roast/issues/614&#34;&gt;Raku/roast#614&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/Raku/doc/issues/3519&#34;&gt;#3519&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;∘&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;o&amp;gt;&lt;/code&gt; 保留 LHF 的 &lt;code&gt;.of&lt;/code&gt; 和 RHS 的 &lt;code&gt;.arity&lt;/code&gt; 和 &lt;code&gt;.count&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;完善了 regex 运算符副词中的可接受参数(例如:&lt;code&gt;:in(…)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;完善了 &lt;code&gt;IO::Handle.open&lt;/code&gt; 中可接受的参数组合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path.Str&lt;/code&gt; 不包含 &lt;code&gt;.CWD&lt;/code&gt; 属性的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Path&lt;/code&gt; 类型拒绝带有  &lt;code&gt;nul&lt;/code&gt; 字节 (&lt;code&gt;&amp;quot;\0&amp;quot;&lt;/code&gt;) 的路径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Pipe&lt;/code&gt; 的 &lt;code&gt;.path&lt;/code&gt;/&lt;code&gt;.IO&lt;/code&gt; 返回一个 &lt;code&gt;IO::Path&lt;/code&gt; 类型对象&lt;/li&gt;
&lt;li&gt;如果目的路径和源路径是一样的 &lt;code&gt;IO::Path&lt;/code&gt; 的 &lt;code&gt;.copy&lt;/code&gt;/&lt;code&gt;.move&lt;/code&gt; 会 &lt;code&gt;fail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; 创建的 &lt;code&gt;IO::Path&lt;/code&gt; 绝对性由调用者控制&lt;/li&gt;
&lt;li&gt;更多定义的边缘行为、&lt;code&gt;Callable &lt;/code&gt; 处理、&lt;code&gt;. defined&lt;/code&gt; 调用, 以及 &lt;code&gt;&amp;amp;infix:&amp;lt;andthen&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;amp;infix:&amp;lt;orelse&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;amp;infix:&amp;lt;notandthen&amp;gt;&lt;/code&gt; 操作符的链接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Seq&lt;/code&gt; 的禅切不缓存它们&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List.Capture&lt;/code&gt; 将任何包含的 &lt;code&gt;Pair&lt;/code&gt; 对象的键字符串化&lt;/li&gt;
&lt;li&gt;带处理的 &lt;code&gt;Failure&lt;/code&gt; 参数的 &lt;code&gt;&amp;amp;fail&lt;/code&gt; 把它标记为是未处理的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use lib&lt;/code&gt; 接受 &lt;code&gt;IO::Path&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;锚点 &lt;code&gt;^&lt;/code&gt;、&lt;code&gt;^^&lt;/code&gt;、&lt;code&gt;$&lt;/code&gt; 和 &lt;code&gt;$$&lt;/code&gt; 在环视中有效&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Grammar.made&lt;/code&gt; 支持类型对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isa&lt;/code&gt; 支持 &lt;code&gt;subset &lt;/code&gt; 类型对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:delete&lt;/code&gt; 可用于惰性数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;eqv&amp;gt;&lt;/code&gt; 可以在某些情况下对惰性参数起作用&lt;/li&gt;
&lt;li&gt;动态查询(&lt;code&gt;::(...)&lt;/code&gt;) 是限制性的 regex 语法, 并且需要 &lt;code&gt;use MONKEY-SEE-NO-EVAL&lt;/code&gt; 的许可&lt;/li&gt;
&lt;li&gt;定义了带孔数组的 &lt;code&gt;.Slip&lt;/code&gt; 和 &lt;code&gt;.List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.in&lt;/code&gt;/&lt;code&gt;.at&lt;/code&gt; 和 &lt;code&gt;Supply.interval&lt;/code&gt; 可以用零值和负值工作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supply.interval&lt;/code&gt; 最小值为 &lt;code&gt;0.001&lt;/code&gt;；较低值被处理为 &lt;code&gt;0.001&lt;/code&gt;, 并发出警告#, 参见 &lt;a href=&#34;https://github.com/Raku/doc/pull/2649&#34;&gt;https://docs.perl6.org/type/Supply#method_interval PR [#2649]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Supply&lt;/code&gt; 提供了 &lt;code&gt;.Seq&lt;/code&gt;、&lt;code&gt;.list&lt;/code&gt; 和 &lt;code&gt;.zip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以在构建方法中绑定到原生类型属性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WhateverCode&lt;/code&gt; 传播 &lt;code&gt;use fatal&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;say&lt;/code&gt;、&lt;code&gt;note&lt;/code&gt;、&lt;code&gt;put&lt;/code&gt;、&lt;code&gt;print&lt;/code&gt; 和 &lt;code&gt;printf&lt;/code&gt; 例程自动线程化 &lt;code&gt;Junction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IO::Handle.eof&lt;/code&gt; 值在 &lt;code&gt;.seek&lt;/code&gt; 过终点后再返回时也会相应改变&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.succ&#39;、&lt;/code&gt;.pred&lt;code&gt;和&lt;/code&gt;.Bool` 的同质异形体&lt;/li&gt;
&lt;li&gt;在核心 &lt;code&gt;Numeric&lt;/code&gt; 上定义了 &lt;code&gt;.Bridge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt;在核心 &lt;code&gt;Numeric&lt;/code&gt; 的类型对象上定义了 &lt;code&gt;.Numeric&lt;/code&gt;/&lt;code&gt;.Real&lt;/code&gt;&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;定义了关于零分母有理数的 &lt;code&gt;Rational.Bool&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;say&lt;/code&gt;/&lt;code&gt;note&lt;/code&gt; 保证在 &lt;code&gt;Str&lt;/code&gt; 的子类上调用 &lt;code&gt;.gist&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Junction.Str&lt;/code&gt; 返回 &lt;code&gt;Junction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Junction.gist&lt;/code&gt;/&lt;code&gt;.perl&lt;/code&gt; 返回一个 &lt;code&gt;Str&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Map&lt;/code&gt;/&lt;code&gt;Hash&lt;/code&gt; 的 &lt;code&gt;.list&lt;/code&gt;/&lt;code&gt;.cache&lt;/code&gt; 返回一个 &lt;code&gt;List&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;.round&lt;/code&gt; 的返回类型&lt;/li&gt;
&lt;li&gt;定义了 &lt;code&gt;Enumeration:D&lt;/code&gt;  不  &lt;code&gt;.ACCEPT&lt;/code&gt; 一个 &lt;code&gt;Enumeration:U&lt;/code&gt; , 参见 &lt;a href=&#34;https://github.com/rakudo/rakudo/issues/2073&#34;&gt;rakudo/rakudo#2073&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IO::ArgFiles&lt;/code&gt; 类型只是 &lt;code&gt;IO::CatHandle&lt;/code&gt; 的一个空的子类&lt;/li&gt;
&lt;li&gt;对常量的约束
&lt;ul&gt;
&lt;li&gt;约束是完全强制的&lt;/li&gt;
&lt;li&gt;试图在常量上使用参数化类型约束(例如使用 &lt;code&gt;my Foo constant @int&lt;/code&gt;) 会引发 &lt;code&gt;X::ParametricConstant&lt;/code&gt; 异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; &lt;code&gt;=defn&lt;/code&gt;(定义列表)指令可用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pod&lt;/code&gt; 提供了 &lt;code&gt;:numbered&lt;/code&gt; 配置键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.^ver&lt;/code&gt;、&lt;code&gt;.^auth&lt;/code&gt; 和 &lt;code&gt;.^name&lt;/code&gt; 元方法在 &lt;code&gt;module&lt;/code&gt; 中可用, 而在 &lt;code&gt;package&lt;/code&gt; 中则没有, 这是设计上的原因&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qww&amp;lt;…&amp;gt;&lt;/code&gt; 中支持花哨的引号(&lt;code&gt;’…’&lt;/code&gt;、&lt;code&gt;“…”&lt;/code&gt;、&lt;code&gt;｢…｣&lt;/code&gt; 和变体)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt; &amp;gt;&lt;/code&gt; 支持查找自动生成的 &lt;code&gt;Callables&lt;/code&gt; (例如: &lt;code&gt;&amp;amp;infix:&amp;lt;XX&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;使用命名的 &lt;code&gt;anon&lt;/code&gt; 子例程不再产生重声明警告&lt;/li&gt;
&lt;li&gt;&lt;code&gt;::?MODULE&lt;/code&gt;/&lt;code&gt;$?MODULE&lt;/code&gt; 变量的扩展规范&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub MAIN&lt;/code&gt; 可以接受一个参数上的 &lt;code&gt;Enumeration&lt;/code&gt; 类型约束和 &lt;code&gt;where&lt;/code&gt; 子句&lt;/li&gt;
&lt;li&gt;笑脸型约束可以用在子集上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; 块和 thunks 得到新的 &lt;code&gt;$/&lt;/code&gt; 和 &lt;code&gt;$!&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;定义了与列表关联运算符一起使用的 &lt;code&gt;R&lt;/code&gt; 元运算符&lt;/li&gt;
&lt;li&gt;类型强转可以用在签名返回类型约束中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;amp;infix:&amp;lt;x&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;amp;infix:&amp;lt;x&amp;gt;&lt;/code&gt; 抛出了 &lt;code&gt;-Inf&lt;/code&gt;/&lt;code&gt;NaN&lt;/code&gt; 重复参数&lt;/li&gt;
&lt;li&gt;字面结构 &lt;code&gt;put&lt;/code&gt; 和 &lt;code&gt;put for&lt;/code&gt; 抛出, 需要使用括号&lt;/li&gt;
&lt;li&gt;扩大了 Unicode 例程和功能的规范覆盖面-将覆盖面升级到 Unicode 第11版&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$.&lt;/code&gt; 方法调用语法能用在元方法中了&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/raku">raku</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/6.d">6.d</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/2020-07-21-checklist-for-6-dot-d/</guid>
                <pubDate>Tue, 21 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>ImageMagick - Drawing</title>
                <link>https://ohmyweekly.github.io/notes/imagemagick-drawing/</link>
                
                
                <description>&lt;blockquote&gt;ImageMagick Drawing&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imagemagick.org/Usage/draw/&#34;&gt;https://imagemagick.org/Usage/draw/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 IM 中绘图是在现有图像中添加新元素的方法。虽然在&lt;a href=&#34;https://imagemagick.org/Usage/fonts/&#34;&gt;复合字体效果&lt;/a&gt;的示例页和&lt;a href=&#34;https://imagemagick.org/Usage/annotating/&#34;&gt;图像注释&lt;/a&gt;中涵盖了很多文本绘制的内容，但本页涉及 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 操作符的其他更普遍的方面。&lt;/p&gt;
&lt;p&gt;绘制命令最初是作为一种创建简单图像的手段。但随着时间的推移，它已经扩展成为矢量图形到光栅图像转换的界面。&lt;/p&gt;
&lt;h2 id=&#34;imagemagick-绘制命令&#34;&gt;ImageMagick 绘制命令&lt;/h2&gt;
&lt;p&gt;计算机中的图像通常以两种不同的方式保存。第一种也是你在这些示例页面中看到的最常见的方式被称为光栅图形。在这种方式中，图像是以像素的矩形阵列来存储的。&lt;/p&gt;
&lt;p&gt;另一种方式不太常见，也不太容易修改，但从另一个意义上讲，它的通用性更强，即对象矢量图形。在这种形式下，图像是用线条、弧线、颜色填充，有时还有深度来描述的。这是非常有用的，因为你可以将这些图像放大到你想要的任何尺寸，而且它们仍然可以完美地显示。与光栅格式的图像相比，您还可以在很小的空间内描述非常大和复杂的图像。&lt;/p&gt;
&lt;p&gt;矢量图形图像的例子包括 postscript 和新的 &lt;a href=&#34;http://www.w3.org/TR/SVG/&#34;&gt;SVG-可缩放矢量图形&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;True-Type 字体也是矢量图形的例子，因为它允许在任何比例下使用单个字符描述。&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 图像操作符，是进入 ImageMagick 矢量绘图功能的一个窗口，并形成了一套与 IM 的普通命令行图像操作符相当独立的命令。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般使用的矢量图形文件格式只有几种，因为每一种这样的格式通常与其他这样的格式有很大的不同。其结果是，很少有代码共享的可能。
基于这个原因，ImageMagick 更关注使用矢量图形来绘制 SVG 格式的图像。Postscript 和 true-type 字体图形被传递给其他外部的&amp;rdquo;&lt;a href=&#34;https://imagemagick.org/Usage/files/#delegate&#34;&gt;代理&lt;/a&gt;&amp;ldquo;库和应用程序，它们更适合绘制这些类型的矢量图形格式。
这并不是说 SVG 没有代理库。一个例子是 RSVG 库或 GTK SVG 库，这些库在编译时是可用的。IM 会链接到这些库来转换 SVG，而不是自己尝试去做。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;原始绘图命令&#34;&gt;原始绘图命令&lt;/h3&gt;
&lt;p&gt;让我们从 MVG 命令的 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 图像操作符中最古老、最简单、最常见的绘图原语开始。&lt;/p&gt;
&lt;p&gt;请注意，所有的参数都被视为浮点数，不一定是整数，比如我在这些例子中通常使用的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Single Pixel Draw  (两种方式 -- 这些像素点都被放大了)&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Point &amp;#39;paints&amp;#39; the color pixel&lt;/span&gt;
  convert -size 10x6 xc:skyblue  -fill black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;point 3,2&amp;#39;&lt;/span&gt;         -scale 100x60   draw_point.gif

  &lt;span class=&#34;c1&#34;&gt;# Color Point &amp;#39;replaces&amp;#39; the color pixel&lt;/span&gt;
  convert -size 10x6 xc:skyblue  -fill black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 6,3 point&amp;#39;&lt;/span&gt;   -scale 100x60   draw_color_point.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_point.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_color_point.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据给出的注释，当涉及半透明颜色时，这两种点方法会产生不同的结果。详情请参见下面的&lt;a href=&#34;https://imagemagick.org/Usage/draw/#color&#34;&gt;颜色填充原语&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 矩形  /  圆角矩形  /  矩形圆弧&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;rectangle 20,10 80,50&amp;#34;&lt;/span&gt;       draw_rect.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;roundrectangle 20,10 80,50 20,15&amp;#34;&lt;/span&gt;  draw_rrect.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;arc  20,10 80,50  0,360&amp;#34;&lt;/span&gt;     draw_arc.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;arc  20,10 80,50 45,270&amp;#34;&lt;/span&gt;     draw_arc_partial.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_rect.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_rrect.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_arc.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_arc_partial.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arc&lt;/code&gt; 绘制原语与矩形一起列出，因为它实际上只是一个&amp;quot;椭圆&amp;rdquo;，装在两个坐标定义的&amp;quot;矩形&amp;rdquo;(&lt;code&gt;rectangle&lt;/code&gt;)内。部分弧线很少使用，因为很难确定端点，除非角度限制在九十度的倍数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;circle&lt;/code&gt; 和 &lt;code&gt;ellipse&lt;/code&gt; 原语涉及&amp;quot;中心&amp;quot;坐标与&amp;quot;边缘&amp;quot;坐标，或&amp;quot;大小&amp;quot;和&amp;quot;角度&amp;quot;值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 圆  /  椭圆    (以某一点为中心)&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle 50,30 40,10&amp;#34;&lt;/span&gt;          draw_circle.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;ellipse 50,30 40,20 0,360&amp;#34;&lt;/span&gt;   draw_ellipse.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;ellipse 50,30 40,20 45,270&amp;#34;&lt;/span&gt;   draw_ellipse_partial.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_ellipse.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_ellipse_partial.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你也可以看看 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#push_context&#34;&gt;Push/Pop 上下文&lt;/a&gt;，了解如何创建一个旋转的椭圆的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 直线 / 折线 / 多边形 / 贝塞尔曲线&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line   20,50 90,10&amp;#34;&lt;/span&gt;                 draw_line.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;polyline 40,10 20,50 90,10 70,40&amp;#34;&lt;/span&gt;   draw_polyline.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;polygon  40,10 20,50 90,10 70,40&amp;#34;&lt;/span&gt;   draw_polygon.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;bezier   40,10 20,50 90,10 70,40&amp;#34;&lt;/span&gt;   draw_bezier.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;比较好的画直线和曲线的方法是使用 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径画法&lt;/a&gt;，它的用途更广，甚至可以实现&amp;quot;比例画线&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# text drawing  / image&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;40&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 0,0 &amp;#39;Hello&amp;#39;&amp;#34;&lt;/span&gt;   draw_text.gif

  convert -size 100x60 xc:skyblue -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;image over 0,0 0,0 &amp;#39;terminal.gif&amp;#39;&amp;#34;&lt;/span&gt;   draw_image.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后这两个填充类型的操作是目前唯一受 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?gravity&#34;&gt;-gravity&lt;/a&gt;&amp;rdquo; 影响的绘制操作。这些操作的其他修饰符，包括 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fill&#34;&gt;-fill&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?origin&#34;&gt;-origin&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?stroke&#34;&gt;-stroke&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?strokewidth&#34;&gt;-strokeidth&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?font&#34;&gt;-font&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?pointsize&#34;&gt;-pointsize&lt;/a&gt;&amp;quot;、&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?box&#34;&gt;-box&lt;/a&gt;&amp;quot;。他们还有其他的修饰符，但这些修饰符与更高级的 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#mvg&#34;&gt;Magick Vector Graphics&lt;/a&gt; 语言有关。&lt;/p&gt;
&lt;h2 id=&#34;贝赛尔原语&#34;&gt;贝赛尔原语&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;bezier&amp;rdquo; 原语用于绘制曲线。每条命令只画一条曲线段。通常会给出 4 个点（8 个数字）：一个起点&#39;结&amp;rsquo;、两个控制点和一个终点&#39;结&amp;rsquo;。两个控制点定义了曲线的方向以及曲线偏离附加的终点&#39;结&#39;点的速度。&lt;/p&gt;
&lt;p&gt;为了顺利地将两条曲线连接起来，应该将端点的控制点通过&#39;结&#39;镜像，形成下一条贝塞尔曲线的控制点。例如这里我画了两条平稳连接在一起的贝赛尔曲线。请注意控制线和点（也是画出来的）是如何通过连接坐标直线镜像的，无论是角度还是长度。这一点很重要，否则曲线将不平滑。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10 50,50   50,50 75,90   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 30,90   25,10 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 75,90   70,10 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_joined.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_joined.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果我移动其中一个控制点，使它不从同一&amp;quot;结&amp;quot;的另一个控制点通过附加的&amp;quot;结&amp;quot;进行&amp;quot;反射&amp;rdquo;，那么曲线将不连续。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10 50,50   50,50 80,50   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 30,90   25,10 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 80,50   70,10 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_disjoint.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_disjoint.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果再次移动控制点，使其与相关的&amp;quot;结&amp;quot;点相匹配，线条将直接从该点出发，完全没有任何&amp;quot;曲线&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10 50,50   50,50 50,50   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 30,90   25,10 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 50,50   70,10 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_no_curve.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_no_curve.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果两个控制点都设置为各自的&amp;quot;结点&amp;rdquo;，那么就会生成一条直线。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 10,10   50,50 50,50   50,50 50,50   90,40 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;clines&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/   /\n/g&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; line&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;line &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$line&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; path &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100 xc:skyblue -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$clines&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;    stroke blue &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 10,10 10,10   50,50 50,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke red  bezier 50,50 50,50   90,40 90,40 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_lines.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_lines.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果不指定所有 4 个点，&amp;lsquo;bezier&amp;rsquo; 原语并不真正有用。只有第一个点和最后一个点被归类为&#39;结&amp;rsquo;，曲线将通过（或结束）这两个点。所有其他的点纯粹被视为控制点，按照给定的顺序对曲线产生影响，控制点越远，对该段曲线的影响越大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;10,10 30,90   25,10    75,90   70,10 90,40&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;   l -2,-2 +4,+4 -2,-2   l -2,+2 +4,-4 -2,+2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  convert -size 100x100  xc:skyblue  -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke gray  polyline &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke red   bezier &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue  path &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$symbols&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          draw_bezier_multi.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_bezier_multi.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;为了保持简单，不建议你每条 &amp;lsquo;bezier&amp;rsquo; 曲线段使用超过或少于4个点。&lt;/p&gt;
&lt;p&gt;其实我建议你完全不要使用 &amp;lsquo;bezier&amp;rsquo; 原语，而是使用 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#cubic&#34;&gt;SVG Path Cubic Bezier&lt;/a&gt; 来生成曲线。它有一个特殊的 &amp;ldquo;s&amp;rdquo; 曲线延续功能，可以自动做相应的控制点&amp;quot;反射&amp;rdquo;，生成平滑连接的曲线段，减少你需要使用的控制点数量。您还可以定义相对于路径中最后一个端点的点。&lt;/p&gt;
&lt;h2 id=&#34;颜色填充原语&#34;&gt;颜色填充原语&lt;/h2&gt;
&lt;p&gt;除了上述 &amp;ldquo;简单&amp;quot;原语之外，&amp;quot;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;ldquo;还提供了一组颜色填充或修改原语。这些原语根据所选方法，从指定的点开始修改图像中的颜色。&lt;/p&gt;
&lt;p&gt;这些填充方法实际上不是真正的 &amp;lsquo;draw&amp;rsquo; 命令，而是颜色替换函数。它们被添加到绘图中，因为在程序的早期版本中，将它们的操作插入到 ImageMagick 中是最简单的。&lt;/p&gt;
&lt;p&gt;就像上面一样，使用的颜色是用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fill&#34;&gt;-fill&lt;/a&gt;&amp;ldquo;颜色设置的，但如果设置了，就会使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 图像来代替。&lt;/p&gt;
&lt;p&gt;上面的其他设置选项没有使用，对这些操作没有影响。&lt;/p&gt;
&lt;p&gt;两个额外的设置也将应用于这些原语，即 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?bordercolor&#34;&gt;-bordercolor&lt;/a&gt;&amp;rdquo; 和 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fuzz&#34;&gt;-fuzz&lt;/a&gt;&amp;ldquo;系数设置。但是，这些设置不能在 &amp;ldquo;MVG&amp;rdquo; 语言中定义，因此只能在使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?draw&#34;&gt;-draw&lt;/a&gt;&amp;rdquo; 操作符之前进行设置。&lt;/p&gt;
&lt;p&gt;第一个 &amp;lsquo;color point&amp;rsquo; 你已经看到了，它是上述例子中 &amp;lsquo;point&amp;rsquo; 绘制原语的替代。如果你仔细观察，你会看到我们在测试图像中设置的单个白色像素。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 point&amp;#39;&lt;/span&gt;      color_point.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_point.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而在绘制透明色和半透明色时，这些功能是不一样的。&lt;/p&gt;
&lt;p&gt;这里我们有一个三个像素的红色图像（放大了），第二个或中间的像素我们用 &lt;code&gt;point&lt;/code&gt; 函数在红色像素上画上半透明的蓝色，得到紫色的结果。然而如果使用 &lt;code&gt;color point&lt;/code&gt; 函数（最后一个或右边的像素），红色完全被半透明的蓝色像素所取代。它不会被叠加。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 3x1 xc:red -matte -fill &lt;span class=&#34;s1&#34;&gt;&amp;#39;#00F8&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;point 1,0&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 2,0 point&amp;#39;&lt;/span&gt;   -scale 33x33  draw_points.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_points.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;所有的 &lt;code&gt;color&lt;/code&gt; 函数都会进行全色替换，而其他所有的颜色原语都会在图像上面&#39;画&#39;出颜色。因此，你可以使用 &lt;code&gt;color&lt;/code&gt; 来绘制透明色。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color replace&lt;/code&gt; 绘制函数将在指定的位置替换所有精确给定颜色的实例。而且正如您所看到的，这些区域不一定要连接在一起。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 replace&amp;#39;&lt;/span&gt;      color_replace.png

  convert color_test.png   -fill white   -fuzz 13%&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 replace&amp;#39;&lt;/span&gt;      color_replace_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_replace.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，正如你在第一个结果中所看到的，一些沿边缘的像素没有被替换。这些像素与所选像素的颜色不完全相同，所以它们被忽略了。添加一个小的&lt;a href=&#34;https://imagemagick.org/Usage/color_basics/#fuzz&#34;&gt;模糊因子&lt;/a&gt;也会包含与原色相似的颜色。如上面第二个例子所示。&lt;/p&gt;
&lt;p&gt;当然，&lt;code&gt;fuzz factor&lt;/code&gt; 并不是一个很好的解决方案，因为它不会捕捉所有这样的边缘像素。这是所有这些 &lt;code&gt;color fill&lt;/code&gt; 方法经常出现的问题，也是一个没有通用解决方案的问题。&lt;/p&gt;
&lt;p&gt;如果你想替换一个特定的已知颜色，而不是从图像本身选择一种颜色，那么可以使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?opaque&#34;&gt;-opaque&lt;/a&gt;&amp;rdquo; 图像操作符来代替。该函数还使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fuzz&#34;&gt;-fuzz&lt;/a&gt;&amp;rdquo; 因子设置来增加与给定颜色相匹配的颜色范围。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;floodfill&lt;/code&gt; 的方法也很简单，因为它只会填充所选点周围的整个区域，而不会选择任何其他没有以某种方式连接的类似颜色的区域。&lt;/p&gt;
&lt;p&gt;你也可以通过使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fuzz&#34;&gt;-fuzz&lt;/a&gt;&amp;rdquo; 来扩大被填充的区域，以包括相似的颜色。在这种情况下，我们选择了一个足够高的值，也包括了交叉边界，允许洪水填充&amp;quot;泄漏&amp;quot;到图像的另一侧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 floodfill&amp;#39;&lt;/span&gt;      color_floodfill.png

  convert color_test.png   -fill white   -fuzz 15%   &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 floodfill&amp;#39;&lt;/span&gt;      color_floodfill_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_floodfill.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_floodfill_fuzz.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;用颜色填充区域并非没有问题。颜色可能会越过薄薄的边界，渗入到不想要的区域，(&lt;a href=&#34;https://imagemagick.org/Usage/formats/#bg_pattern&#34;&gt;请看背景图案上的 GIF&lt;/a&gt;，以证明这一点)。或者，它可能无法填满所选区域的边缘，（见&lt;a href=&#34;https://imagemagick.org/Usage/antialiasing/#floodfill&#34;&gt;反锯齿和泛滥填充问题&lt;/a&gt;）。但它确实有效。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filltoborder&lt;/code&gt; 就像 &lt;code&gt;floodfill&lt;/code&gt; 一样，只是你指定了一个颜色，这个颜色的边界是要填充的区域，而不是填充过程中要替换的颜色。&lt;/p&gt;
&lt;p&gt;当然也建议在该边框颜色选择中加入 &lt;code&gt;similar colors&lt;/code&gt; 的&lt;a href=&#34;https://imagemagick.org/Usage/color_basics/#fuzz&#34;&gt;模糊因子&lt;/a&gt;，以进一步限制洪水填充。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white  -bordercolor royalblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 filltoborder&amp;#39;&lt;/span&gt;   color_filltoborder.png

  convert color_test.png   -fill white  -bordercolor blue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 filltoborder&amp;#39;&lt;/span&gt;   color_filltoborder2.png

  convert color_test.png   -fill white  -bordercolor blue  -fuzz 30% &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 filltoborder&amp;#39;&lt;/span&gt;   color_filltoborder_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_filltoborder.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_filltoborder2.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_filltoborder_fuzz.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后的绘制颜色方法是 &lt;code&gt;reset&lt;/code&gt;，它只是将整个图像替换或重置为填充颜色。在这种情况下，实际选择的像素对结果没有任何影响。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;color 30,20 reset&amp;#39;&lt;/span&gt;      color_reset.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/color_reset.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这实际上是非常有用的，因为它提供了一种简单的方法从现有图像生成纯色（或平铺图像）画布。(请参见 &lt;a href=&#34;https://imagemagick.org/Usage/canvas/#sized&#34;&gt;Canvases Sized to an Existing Image&lt;/a&gt;)以了解此方法和其他做同样事情的方法。&lt;/p&gt;
&lt;p&gt;未来：使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 图案来填充该区域。&lt;/p&gt;
&lt;h2 id=&#34;matt-填充原语&#34;&gt;Matt 填充原语&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;matte&lt;/code&gt; 绘制原语的工作方式与上述 &lt;code&gt;color&lt;/code&gt; 原语完全相同，只是它不会替换所选区域的颜色，只会替换所选区域的 &lt;code&gt;matte&lt;/code&gt; 通道。（也就是只有 &lt;code&gt;alpha&lt;/code&gt; 或 &lt;code&gt;matte&lt;/code&gt; 通道被这些填充函数调整）。&lt;/p&gt;
&lt;p&gt;就像 &lt;code&gt;color&lt;/code&gt; 填充函数一样，&lt;code&gt;matte&lt;/code&gt; 值使用的是填充色（除非用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 作为 &lt;code&gt;alpha value&lt;/code&gt; 的来源）。&lt;/p&gt;
&lt;p&gt;这里我们使用上面同样的 &lt;code&gt;color floodfill&lt;/code&gt; 例子，但这里只调整 matte 通道，使填充部分完全透明。也就是说，原来的颜色仍然存在，只是透明而已!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill none &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;matte 30,20 floodfill&amp;#39;&lt;/span&gt;      matte_floodfill.png

  convert color_test.png   -fill none   -fuzz 15%   &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;matte 30,20 floodfill&amp;#39;&lt;/span&gt;      matte_floodfill_fuzz.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/matte_floodfill.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/matte_floodfill_fuzz.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以使用 &lt;code&gt;matte reset&lt;/code&gt; 函数使整个图像变成半透明的。当然在这种情况下，我们必须输出到 PNG，它可以接受半透明颜色的图像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert color_test.png   -fill &lt;span class=&#34;s1&#34;&gt;&amp;#39;#00000080&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;matte 30,20 reset&amp;#39;&lt;/span&gt;      matte_reset.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/matte_reset.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意，在操作中没有使用 &lt;code&gt;black&lt;/code&gt; 颜色分量，只使用了颜色的 &lt;code&gt;matte&lt;/code&gt; 分量。图像的原色保持原样。&lt;/p&gt;
&lt;p&gt;未来：使用 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?tile&#34;&gt;-tile&lt;/a&gt;&amp;rdquo; 模式来制作有趣的哑光效果。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;color&lt;/code&gt; 和 &lt;code&gt;matte&lt;/code&gt; 都是完全替换颜色的函数，它总是会产生一个布尔（all or nothing）类型的颜色替换。因此，这些区域的边缘总是会显示出 &lt;a href=&#34;https://imagemagick.org/Usage/antialiasing/&#34;&gt;Aliasing 效果&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;正因为如此，除了设置 GIF 图像的透明区域（也是布尔型）外，一般来说，这些都不是一般图像显影的好图像运算符。不过也不是全无用处，&lt;a href=&#34;https://imagemagick.org/Usage/masking/#bg_remove&#34;&gt;从背景去除&lt;/a&gt;的例子中可以看出。&lt;/p&gt;
&lt;h2 id=&#34;关于绘图命令的具体内容&#34;&gt;关于绘图命令的具体内容&lt;/h2&gt;
&lt;h3 id=&#34;像素坐标&#34;&gt;像素坐标&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[-draw](https://imagemagick.org/Usage/option_link.cgi?draw)&lt;/code&gt; 命令（以及IM中的许多其他命令）使用的是所谓的&amp;quot;像素坐标&amp;rdquo;。也就是 &amp;ldquo;10,10&amp;rdquo; 的坐标是左上角往下10个像素的中心。&lt;/p&gt;
&lt;p&gt;在这个坐标系中，0,0 是左上角像素的中心，w-1,h-1 是右下角的中心。实际的边缘位于 -0.5,-0.5 和 w-0.5,h-0.5，中心像素（如果图像是奇数大小）位于 &amp;lsquo;(w-1)/2,(h-1)/2&amp;rsquo;。&lt;/p&gt;
&lt;p&gt;然而，当您对图像进行数学处理时（如使用扭曲时），实际的像素没有实际意义，因此它使用&amp;quot;图像坐标&amp;rdquo;。在这个系统中，图像的实际边缘在 &amp;lsquo;0,0&amp;rsquo; 和 &amp;lsquo;w,h&amp;rsquo; 处。而图像的中心（可能是，也可能不是像素的中心）在 &amp;lsquo;w/2,h/2&amp;rsquo;。&lt;/p&gt;
&lt;p&gt;要将 &amp;lsquo;像素坐标&amp;rsquo; 转换为图像坐标，请加上 ½ 如左上角像素的中心是 &amp;lsquo;0.5,0.5&amp;rsquo;，右下角像素的中心是 &amp;lsquo;w-0.5,h-0.5&amp;rsquo;。
&lt;em&gt;例如：小图像中的圆心&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;绘制伽马和色域校正&#34;&gt;绘制伽马和色域校正&lt;/h3&gt;
&lt;p&gt;和几乎所有的 ImageMagick 操作一样， &lt;code&gt;[-draw](https://imagemagick.org/Usage/option_link.cgi?draw)&lt;/code&gt; 是一个线性运算符，因此在线性 RGB 色彩空间中工作。这意味着，为了得到平滑的边缘，你可能需要对图像进行一些伽玛校正，然后再保存，这样就可以使用非线性（伽玛校正）的sRGB色彩空间来存储。&lt;/p&gt;
&lt;p&gt;例如，如果你画了一个大圆，然后保存它&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 81x81 xc:black -fill white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 40,40 40,3&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_raw.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_raw.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;看看圆圈的边缘，其实看起来并不是真的很光滑。你可以看到明显的阶梯效果。&lt;/p&gt;
&lt;p&gt;那是因为你是在线性 RGB 色彩空间中画的圆。但是你却把图像保存成了真正的 sRGB 色域！这就导致了你的图像在保存的过程中出现了明显的阶梯效果。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们需要在保存图像之前给图像添加一个伽玛校正。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 81x81 xc:black -fill white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 40,40 40,3&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -gamma 2.2 circle_gamma.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_gamma.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，圆圈边缘实际上看起来光滑圆润，就像它们应该的那样。&lt;/p&gt;
&lt;p&gt;如果你想正确地做这件事，我们真的应该使用色彩空间进行修正。然而，由于IM假设RGB是保存的默认色彩空间，你需要做一些棘手的处理来让它正确地做事情。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 81x81 xc:black -set colorspace RGB &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 40,40 40,3&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -colorspace sRGB circle_sRGB.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_sRGB.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，sRGB色彩空间（这是保存图像的正确方法）与简单地应用2.2伽玛校正并不完全相同。然而，两者之间的结果差异很小，只有在非常非常粗糙的图像中才能看到。
在IM v6.7.5-1之前，色彩空间名称 &amp;ldquo;sRGB&amp;rdquo; 和 &amp;ldquo;RGB&amp;rdquo;（线性-RGB）实际上是颠倒的。因此，在旧版本的IM中，上面的两个标签应该被调换。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;要使用真实的图像（在IMv6中）正确地绘制（或进行任何&amp;quot;线性&amp;quot;图像处理），你需要首先删除任何现有的伽玛，处理图像，然后恢复该伽玛校正。更多细节请参见&lt;a href=&#34;https://imagemagick.org/Usage/resize/#resize_colorspace&#34;&gt;使用色域校正调整大小&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;下面是一个在真实图像上绘图的例子&amp;hellip;。首先是没有任何颜色校正（原始），然后是伽玛和色域校正。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert rose:  -fill none -stroke white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 5,40 65,5&amp;#39;&lt;/span&gt;  rose_raw.png

  convert rose: -gamma .454545 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 5,40 65,5&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -gamma 2.2 rose_gamma.png

  convert rose: -colorspace RGB &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke white -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 5,40 65,5&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -colorspace sRGB rose_sRGB.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/rose_raw.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/rose_gamma.png&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/rose_sRGB.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，通过使用伽玛或色彩空间校正，线条变得非常平滑，没有锯齿状的&amp;quot;楼梯&amp;quot;别离效果，比直接绘制时可以看到。(你需要一个很好的显示器才能看到它)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的线条是用 &lt;code&gt;[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)&lt;/code&gt; 颜色绘制的。您可以使用 &lt;code&gt;[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)&lt;/code&gt; 来绘制线条，并得到同样的结果，但这样您就不能使用 &lt;code&gt;[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)&lt;/code&gt; 来控制线条粗细。更多信息请参见下面的&amp;rdquo;&lt;a href=&#34;https://imagemagick.org/Usage/draw/#stroke&#34;&gt;描边颜色设置&lt;/a&gt;&amp;quot;。
色域名称实际上是使用&amp;rsquo;sRGB&#39;色彩空间的值来定义的，但通过绘制应用，就好像图像是在线性RGB色彩空间中一样。因此，对命名的颜色（不是&amp;quot;白&amp;quot;或&amp;quot;黑&amp;rdquo;）使用上述伽玛校正将导致这些颜色变得失真。在这种情况下，最好不要使用伽玛或色域校正，这样命名的颜色就会正确映射。
命名的&amp;rsquo;sRGB&#39;颜色与图像的色彩空间的正确映射，将作为IMv7开发的一部分被修正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;描边描边宽度和填充的相互作用&#34;&gt;描边、描边宽度和填充的相互作用&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)&lt;/code&gt; 和 &lt;code&gt;[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)&lt;/code&gt; 选项用于在字体边缘绘制轮廓。&lt;/p&gt;
&lt;p&gt;这些选项通常与 &lt;code&gt;[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)&lt;/code&gt; 一起使用，以使文字更有趣，而不费力。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 380x70 xc:lightblue -pointsize &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; -font Chisel &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -fill green  -stroke black  -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 10,55 &amp;#34;Black Border&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            stroke_font.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;默认设置是 &lt;code&gt;-strokewidth 1&lt;/code&gt; 和 &lt;code&gt;-stroke None&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;但这样做会使轮廓笔画不可见，只留下 &lt;code&gt;[-fill](https://imagemagick.org/Usage/option_link.cgi?fill)&lt;/code&gt; 的颜色，你不会看到它。&lt;/p&gt;
&lt;p&gt;当 &lt;code&gt;-strokewidth&lt;/code&gt; 为 &amp;ldquo;不可见 &amp;ldquo;时， &lt;code&gt;-strokewidth&lt;/code&gt; 唯一的效果是对字体大小属性的影响，也就是说它仍然可以影响字体定位和 &lt;a href=&#34;https://imagemagick.org/Usage/text/#label&#34;&gt;Label 和 Caption&lt;/a&gt; 图片生成的大小。否则，宽度在你使笔画可见之前是没有可见效果的。&lt;/p&gt;
&lt;p&gt;为了了解 &lt;code&gt;[-strokewidth](https://imagemagick.org/Usage/option_link.cgi?strokewidth)&lt;/code&gt; 对字体外观的实际影响（当使其可见时），我在这里绘制了一些不同宽度的文字，从 &amp;ldquo;turned off&amp;rdquo; 到越来越大。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 320x420 xc:lightblue -pointsize &lt;span class=&#34;m&#34;&gt;70&lt;/span&gt; -font Vademecum &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke none                 -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,80  &amp;#34;Stroke -&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,160 &amp;#34;Stroke 0&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,240 &amp;#34;Stroke 1&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,320 &amp;#34;Stroke 2&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 30,400 &amp;#34;Stroke 3&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      stroke_table.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/stroke_table.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，从上面的例子中，设置 &lt;code&gt;-strokewidth&lt;/code&gt; 为 &amp;ldquo;0&amp;rdquo; 与设置 &lt;code&gt;-stroke&lt;/code&gt; 颜色为 &amp;ldquo;none&amp;rdquo;（默认值）是不同的。前者会画出一个非常非常细的笔触轮廓，而后者则会有效地关闭它。在这两种情况下，笔触仍然会被绘制。&lt;/p&gt;
&lt;p&gt;然而你也应该注意到，即使 &lt;code&gt;-strokewidth&lt;/code&gt; 为 &amp;ldquo;0&amp;rdquo;，图像的轮廓也会比普通的 &lt;code&gt;filled&lt;/code&gt; 图像（使用 &lt;code&gt;-stroke&lt;/code&gt; 颜色为 &amp;ldquo;none&amp;rdquo;）扩大非常小。&lt;/p&gt;
&lt;p&gt;最后，使用任何小于 &amp;ldquo;1.0&amp;rdquo; 的宽度都不能正常工作。在这种情况下，你应该谨慎行事。&lt;/p&gt;
&lt;p&gt;但是请记住， &lt;code&gt;-strokewidth&lt;/code&gt; 也是一个浮点设置。也就是说，&amp;ldquo;0.5&amp;rdquo; 的笔画宽度也是有效的。然而，通常只有当您试图在关闭防锐化功能的情况下绘制薄的位图圆时，这才是重要的。&lt;/p&gt;
&lt;p&gt;下面是一个使用超大笔触宽度的例子。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   convert -size 320x100 xc:lightblue -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 25,65 &amp;#39;Anthony&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           stroke_thick.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/stroke_thick.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意， &lt;code&gt;-strokewidth&lt;/code&gt; 可以向内和向外扩展线条。下面是同样的例子，但是重新绘制了字体，没有笔画轮廓，去掉了很粗的笔画的内侧部分。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   convert -size 320x100 xc:lightblue -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 25,65 &amp;#39;Anthony&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -stroke none                  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 25,65 &amp;#39;Anthony&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           stroke_outline.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/stroke_outline.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;更多使用描边的例子请看&lt;a href=&#34;https://imagemagick.org/Usage/fonts/&#34;&gt;复合字体效果&lt;/a&gt;。请特别看一下&amp;rdquo;&lt;a href=&#34;https://imagemagick.org/Usage/fonts/#balloon&#34;&gt;气球效果&lt;/a&gt;&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;绘制描边线条&#34;&gt;绘制（描边）线条&lt;/h3&gt;
&lt;p&gt;IM中的默认画线有一些奇怪的行为，值得了解。下面就为大家介绍一下默认画线&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_default.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_default.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以用 &lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?fill&#34;&gt;&lt;code&gt;-fill&lt;/code&gt;&lt;/a&gt; 选项设置线条的颜色。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;此外，你还可以通过设置 &lt;code&gt;[-stroke](https://imagemagick.org/Usage/option_link.cgi?stroke)&lt;/code&gt; 颜色，使线条稍微粗一些。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是我们用 &lt;code&gt;-fill&lt;/code&gt; 选项指定的白色是怎么回事呢？&lt;/p&gt;
&lt;p&gt;这就是在 ImageMagick 中绘制线条的棘手之处。该程序所做的实际上是将线条视为一个约1像素宽的填充对象。这是自然的，因为通常情况下，多条线通常用于扫出一个要填充的区域。&lt;/p&gt;
&lt;p&gt;所以，就像我们在上一节中使用字体的描边一样，IM 用填充色绘制线条（或对象），然后用描边色在其周围绘制。结果就是，现在上面的描边色线条稍微粗了一点，填充色完全隐藏在下面。如果你把描边色做成半透明的，就可以让这个填充色再次显现出来。&lt;/p&gt;
&lt;p&gt;综上所述，线条会出现在 &lt;code&gt;-fill&lt;/code&gt; 颜色下绘制，但一旦 &lt;code&gt;-stroke&lt;/code&gt; 颜色被定义为默认的&amp;quot;无&amp;quot;或&amp;quot;透明&amp;quot;颜色以外的颜色，该选项就没有任何意义了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;选项 &lt;code&gt;-linewidth&lt;/code&gt; 实际上只是 &lt;code&gt;-strokewidth&lt;/code&gt; 的别名，不应该被使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，你可能会认为这个命令会产生很粗的线条。确实如此，但由于 &lt;code&gt;-stroke&lt;/code&gt; 的颜色是不可见的，所以你看不到它。你只能看到线条的一个像素宽的区域的内部&amp;quot;填充&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -strokewidth &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_fill_3.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_fill_3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以上的结果其实我认为是一个 BUG，什么都没画，因为没有&#39;区域&#39;填充，也没有设置线的&#39;描边颜色&amp;rsquo;。什么都没有画，因为没有&amp;quot;区域 &amp;ldquo;需要填充，也没有设置线的&amp;quot;笔触颜色&amp;rdquo;。IM 目前这样做的原因是为了避免新用户的混淆，但实际上这只会给高级用户带来问题。详见&lt;a href=&#34;https://imagemagick.org/Usage/draw/#bounds&#34;&gt;《绘制填充边界》&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但如果同时定义了描边颜色，就会得到要求的粗线&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_3.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_3.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果将 &lt;code&gt;-strokewidth&lt;/code&gt; 设置为1，则上面的一行将被完全覆盖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_1.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然当你掌握了这些知识后，你就可以利用这些知识进行创作，就像画字体一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -stroke white -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_multi.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_multi.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里，我使用了最薄的 &lt;code&gt;-strokewidth&lt;/code&gt; 设置为 &amp;ldquo;0&amp;rdquo;，就像我对上述字体所做的一样。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,35 95,5&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_0.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这就产生了一个非常奇怪的结果，即由黑点和灰段组成的点线。这是笔触、填充和背景色之间奇怪的&amp;quot;色拍频率&amp;quot;的结果。&lt;/p&gt;
&lt;p&gt;下面是线条的放大图&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_0_white.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_white.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;颜色节拍频率 &amp;ldquo;的效果与&amp;quot;声音节拍&amp;quot;的效果并无二致，当你有两把非常轻微的不调的吉他时，你会得到这样的效果。在这种情况下，你会得到一个黑点，其中笔触颜色完全覆盖了基本的填充颜色，你会得到一个灰色的点，其中笔触颜色与填充和背景颜色混合。
颜色混合是反锯齿过程的自然结果，IM使用反锯齿过程来尝试改善线条和其他绘制对象的外观。更多信息请参见&lt;a href=&#34;https://imagemagick.org/Usage/antialiasing/&#34;&gt; IM 中的抗锯齿&lt;/a&gt;讨论和示例页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要注意的是，这种效果只出现在倾斜的线条上，而不是纯水平或垂直的线条，因为在这些线条上，别名没有影响，因此也就没有&amp;quot;色拍频率&amp;quot;的效果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x40 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 5,20 95,20&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          line_stroke_horz.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_horz.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这里，我在放大的视图上使用了不同的底层填充颜色，所以你可以看到颜色如何改变结果的节拍。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%     line_stroke_0_none.jpg

  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill red -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_0_red.jpg

  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill black -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_0_black.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_none.jpg&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_red.jpg&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_0_black.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;让我们把它和无 stroke 相比&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 25x10 xc:lightblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill black -stroke none -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;line 2,8 22,1&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -scale 400%    line_stroke_-_black.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/line_stroke_-_black.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，当绘制非常细的线条时，你可以通过使用相同的填充和描边颜色，或者将其中一种颜色设置为无来减少&amp;quot;节拍&amp;rdquo;。虽然后者是最好的主意，但前者可能对你的特定编程需求更实用。&lt;/p&gt;
&lt;p&gt;注意，填充线的粗细是 &amp;ldquo;0&amp;rdquo;。但描边线可以有更大的厚度。它也是一个浮点值! 2.5像素宽的线条是完全有效的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些结果不仅是由于笔画宽度为0的bug，导致颜色跳动，而且在没有实际需要填充的区域时，&amp;ldquo;填充色&amp;quot;被画出了额外的1.0直径厚度。这我也认为是一个bug。请看&lt;a href=&#34;https://imagemagick.org/Usage/draw/#bounds&#34;&gt;绘制填充边界&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;绘制填充边界&#34;&gt;绘制填充边界&lt;/h3&gt;
&lt;p&gt;关于各种绘制原语，还有一些其他要点需要您注意。&lt;/p&gt;
&lt;p&gt;笔画宽度对于大于 1.0 的浮点值工作得很好，但对于小于 1.0 的值似乎会崩溃。这是由于使用的实现算法造成的，而不仅仅是因为它是错误的，因为它在较大厚度的线条上工作得很好。&lt;/p&gt;
&lt;p&gt;基本上，如果你使用的笔画宽度为零，你可以期待没有笔画颜色会被添加。相反，你会得到一种节拍模式，当线条穿过像素的实际&amp;quot;中心&amp;quot;时，笔触颜色就会达到全部强度。&lt;/p&gt;
&lt;p&gt;真正应该发生的是，添加到像素上的颜色数量应该反映出被绘制的线条的面积，而不是像素与该线条的距离。因此，零宽度的线条不应该给图像添加任何颜色，而厚度小于1.0的线条应该只添加较少的颜色。&lt;/p&gt;
&lt;p&gt;请看上面的例子 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#strokewidth&#34;&gt;Draw Lines, with StrokeWidth and Stroke&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;另一个问题是，填充颜色没有应用到正在绘制的形状（多边形）的边缘，而是应用到更远的半像素处。这包括没有应用&amp;quot;描边&amp;quot;的情况，而边缘应该是精确的。它也包括画一条&amp;quot;线&amp;rdquo;，它的填充厚度实际上是&amp;quot;零&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;基本上，如果你画了一条线，没有启用描边，从技术上讲，你应该看到，没有线，因为它没有&amp;quot;填充&amp;quot;厚度。相反，线条的绘制至少包括1个像素宽的&amp;quot;填充&amp;quot;颜色。这是出于历史原因，一般来说可以避免新用户对IM的混淆。不幸的是，这对高级用户来说是不正确的。&lt;/p&gt;
&lt;p&gt;这意味着，如果您只使用填充色绘制两个多边形，并共享一个边缘，该边缘将重叠1个像素，因为每个多边形的所有边缘都比它大半像素。换句话说，多边形和其他形状并不适合在一起，而是重叠的。&lt;/p&gt;
&lt;p&gt;例如，在这里我试着使用 &lt;code&gt;draw&lt;/code&gt; 把一张图片分成两半（在白色上绘制黑色）。要做到这一点，我画了两个多边形，共享一个边缘，完全没有重叠。由此产生的&amp;quot;微小&amp;quot;图像，已被放大显示。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 10x10 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;polygon 2,-1 7,10 10,10 10,-1&amp;#39;&lt;/span&gt; bound_left.gif
  convert -size 10x10 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;polygon 2,-1 7,10 -1,10 -1,-1&amp;#39;&lt;/span&gt; bound_right.gif
  convert bound_left.gif bound_right.gif -compose Plus -composite bound_add.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/bound_left_mag.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/plus.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/bound_right_mag.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/bound_add_mag.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;两个黑色的部分(这是实际绘制的)实际上是相互重叠的! 换句话说，尽管我们试图使用绘制的多边形分别绘制这两个区域，但填充的区域比要求的略大。&lt;/p&gt;
&lt;p&gt;我还将两张图片加（&lt;a href=&#34;https://imagemagick.org/Usage/compose/#plus&#34;&gt;加合成&lt;/a&gt;）在一起，这样你就可以实际看到绘制的黑色区域的重叠。如果两个多边形是完美契合的，那么 &amp;ldquo;添加 &amp;ldquo;的图画将是纯白色的。&lt;/p&gt;
&lt;p&gt;实际的重叠量相当于默认的 &lt;code&gt;-strokewidth 1.0&lt;/code&gt; 设置。因此，通常情况下，这个额外的区域会被一个正常的笔画宽度所覆盖。然而它可能会造成一些实际问题。&lt;/p&gt;
&lt;p&gt;旁白: 对于一个完整的连接测试，你会在黑色背景上生成50%的灰色区域，然后把它们加在一起。这样你就可以看到这些区域是否不仅 &amp;ldquo;重叠&amp;rdquo;（如上图所示），而且还可以测试当你把这些区域加在一起时，它们是否 &amp;ldquo;重叠不足&amp;rdquo;（在填充的区域之间留下一个间隙）。所得到的图像应该是一个完美平滑的50%灰色，沿连接处没有颜色变化。透明度检查会涉及到，在一个完全透明的背景上应该使用50%透明，50%灰色的颜色。&lt;/p&gt;
&lt;p&gt;要查看一个完美的剪切和重新添加的例子，基于一个单一的蒙版图像，请参阅组成方法的例子，&lt;a href=&#34;https://imagemagick.org/Usage/compose/#dstout&#34;&gt;组成 DstOut&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;未来BUG修复：填充的区域应该是精确的，但为了在绘制形状时进行补偿，默认的 &amp;ldquo;描边颜色 &amp;ldquo;应该设置为填充颜色（除非它本身被特别设置）。&lt;/p&gt;
&lt;h2 id=&#34;mvg---魔法矢量图形&#34;&gt;MVG - 魔法矢量图形&lt;/h2&gt;
&lt;p&gt;上面显示的原语构成了所有 &lt;code&gt;-draw&lt;/code&gt; 操作的基础。它们共同构成了 ImageMagick 中特殊内部语言的起点，称为 Magick Vector Graphics 语言。关于这种语言的更多细节，请参见IM网站上的 &lt;a href=&#34;http://www.imagemagick.org/script/magick-vector-graphics.php&#34;&gt;MVG 原语和语法摘要&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这种 &amp;ldquo;MVG&amp;rdquo; 语言的设计目标是让 ImageMagick 处理更复杂的 SVG（可缩放矢量图形）语言。它通过尝试将给定 SVG 格式的图像转换为更简单的内部 MVG 格式来实现。更多细节请看下面的 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#svg&#34;&gt;SVG 处理&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;因此，你上面看到的只是 &lt;code&gt;-draw&lt;/code&gt; 操作符的一小部分功能。如果你想绘制复杂的对象，我建议你使用SVG编辑器（如 &amp;ldquo;Sodipodi&amp;rdquo;）为对象创建一个单独的SVG格式图像。参见下面的非IM矢量图形程序）。&lt;/p&gt;
&lt;p&gt;与 SVG 不同，MVG 没有任何形式的&amp;quot;容器&amp;quot;或图像命令集。在转换过程中，这些命令都被删除，以产生一个简化的 MVG 绘图命令序列。相反，它使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#push_context&#34;&gt;图形上下文&lt;/a&gt;的概念来保存和恢复各种绘图设置，这就是我们现在要看的。&lt;/p&gt;
&lt;h3 id=&#34;命令行设置与-mvg-设置&#34;&gt;命令行设置与 MVG 设置&lt;/h3&gt;
&lt;p&gt;首先，您通过命令行选项设置的几乎所有设置，绘制原语使用的设置在 MVG 绘制命令中都有直接对应的内容。&lt;/p&gt;
&lt;p&gt;通过命令行选项（如 &lt;code&gt;-strokewidth&lt;/code&gt;）或使用 MVG 绘图字符串（如 &lt;code&gt;strok-width&lt;/code&gt;）中的设置，两者之间的主要区别在于 MVG 设置只在 MVG 命令字符串的持续时间内有效。&lt;/p&gt;
&lt;p&gt;一般绘图设置的总结:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  __cmd_option__   __draw_MVG__        __Argument__
    -fill            fill                color/tile for inside shapes
    -tile            fill                image tile, replaces fill color

    -stroke          stroke              line color/tile around the shapes
    -strokewidth     stroke-width        pixel width
    +antialias       stroke-antialias    0/1 aliasing line edges

    -font            font                font_name / font_file
    -family          font-family            ?
    -weight            ?                    ?
    -stretch           ?                    ?
    -pointsize       font-size           height in points
    -kerning           -                 extra inter-character spacing

    +antialias       text-antialias      0/1 aliasing drawing text
    -box             text-undercolor     fill color for font bounding box
      -              decorate        (None, Underline, LineThrough or Overline)

    -gravity         gravity             (None, North, South-East,...)
    -fuzz              -                 color delta / percentage
    -bordercolor       -                 color
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Notes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  - no such option      ? unknown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这些设置通常很好理解，因为它们经常使用，上面也有演示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;字体、拉伸、样式和重量用于从 ImageMagick 字体列表中识别字体。然而，大多数人只是选择一个特定的字体和大小点来代替使用。因此，它们在IM中很少使用。
正如您所看到的，&amp;ldquo;color fill&amp;rdquo; 原语的特殊设置在 MVG 中并没有直接对应的设置。这就是 &lt;code&gt;-bordercolor&lt;/code&gt; 和 &lt;code&gt;-fuzz&lt;/code&gt; 因子设置。在使用 &lt;code&gt;-draw&lt;/code&gt; 操作符之前，必须从命令行指定这些设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有些 MVG 设置作为全局命令行设置可能更有用，比如字体绘制的 &lt;code&gt;decorate&lt;/code&gt; 设置。&lt;/p&gt;
&lt;p&gt;警告： &lt;code&gt;[-gravity](https://imagemagick.org/Usage/option_link.cgi?gravity)&lt;/code&gt; 不是 SVG 规范的一部分。在 MVG 中，它只用于文本和图像的放置以及对齐。目前没有与默认的&amp;quot;引力&amp;quot;效果分开的调整设置。然而，由于调整是 SVG 文本处理的一部分，这可能会在未来的某个时候改变。&lt;/p&gt;
&lt;p&gt;现在，全局命令行设置（在 MVG 绘制字符串之外）用于初始化你所应用的每个 &lt;code&gt;-draw&lt;/code&gt; 操作的设置，这就是为什么你可以设置一个 &lt;code&gt;-fill&lt;/code&gt; 颜色，然后你可以用它来绘制该颜色的圆。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue   -fill red &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle 50,30 40,10&amp;#34;&lt;/span&gt;          draw_circle_global.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_global.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以在 MVG 参数 &lt;code&gt;-draw&lt;/code&gt; 中本地覆盖全局设置&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue   -fill red &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill green   circle 50,30 40,10&amp;#34;&lt;/span&gt;  draw_circle_override.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_override.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，在单个 &lt;code&gt;-draw&lt;/code&gt; MVG 参数中设置的设置只在 &lt;code&gt;-draw&lt;/code&gt; 操作期间存在。也就是说， &lt;code&gt;-draw&lt;/code&gt; 中的设置只限于该次绘制，而不会带入以后单独的 &lt;code&gt;-draw&lt;/code&gt; 参数中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue   -fill red   -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;fill green&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;circle 50,30 40,10&amp;#34;&lt;/span&gt;          draw_circle_local.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_local.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你打算进行大量的操作，那么在单个 MVG 字符串中进行这些操作可能会比多个 &lt;code&gt;-draw&lt;/code&gt; 操作更好。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue  &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill green  circle 41,39 44,57
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill blue   circle 59,39 56,57
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill red    circle 50,21 50,3  &amp;#34;&lt;/span&gt;  draw_circle_multi.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/draw_circle_multi.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mvg-特定设置&#34;&gt;MVG 特定设置&lt;/h3&gt;
&lt;p&gt;其他控制线条和对象绘制方式的 MVG 设置，即使在使用原语操作时也需要了解。这些设置包括&amp;hellip;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   __draw_MVG__       __Description/Argument__
  fill-opacity        fill transparency, from 0.0 to 1.0
  clip-rule           fill style for crossed lines (evenodd, nonzero)

  stroke-opacity      line transparency, number from 0.0 to 1.0
  stroke-dasharray    list of &#39;on&#39; and &#39;off&#39; lengths for lines
  stroke-dash
  stroke-linecap      End of line look: butt round square
  stroke-linejoin     Lines joins:  butt  miter round square
  stroke-miterlimit   Angle when &#39;miter&#39; joins become &#39;bevel&#39; (or &#39;butt&#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;记住，所有 MVG 设置和绘图操作符的完整列表可以在 IM 网站的 &lt;a href=&#34;http://www.imagemagick.org/script/magick-vector-graphics.php&#34;&gt;MVG 原语和语法摘要&lt;/a&gt;中看到。&lt;/p&gt;
&lt;p&gt;让我们看看一些简单设置的效果&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Stroke Opacity&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill none -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 10,10 L 90,10&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.8         path &amp;#39;M 10,20 L 90,20&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.6         path &amp;#39;M 10,30 L 90,30&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.4         path &amp;#39;M 10,40 L 90,40&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-opacity 0.2         path &amp;#39;M 10,50 L 90,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_stroke_opacity.gif

  &lt;span class=&#34;c1&#34;&gt;# Fill Opacity&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                    rectangle  5,10 15,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.8    rectangle 20,10 30,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.6    rectangle 35,10 45,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.4    rectangle 50,10 60,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity 0.2    rectangle 65,10 75,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-opacity  0     rectangle 80,10 90,50 &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_fill_opacity.gif

  &lt;span class=&#34;c1&#34;&gt;# Plain and Dashed Lines&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill none -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 10,10 L 90,10&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 3       path &amp;#39;M 10,20 L 90,20&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 5       path &amp;#39;M 10,30 L 90,30&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 10 3 3 3  path &amp;#39;M 10,40 L 90,40&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 1 6       path &amp;#39;M 10,50 L 90,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_lines.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 10,10 L 90,10&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 3       path &amp;#39;M 10,20 L 90,20&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 5 5       path &amp;#39;M 10,30 L 90,30&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 10 3 3 3  path &amp;#39;M 10,40 L 90,40&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-dasharray 1 6       path &amp;#39;M 10,50 L 90,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_lines_fill.gif

  &lt;span class=&#34;c1&#34;&gt;# Note: Technically the second image should be the same as the first&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# as the &amp;#39;filled&amp;#39; lines contain no area.  This I regard as a BUG.&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Stroke Ends and Joins&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                           path &amp;#39;M 20,20 L 20,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linecap butt        path &amp;#39;M 40,20 L 40,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linecap round       path &amp;#39;M 60,20 L 60,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linecap square      path &amp;#39;M 80,20 L 80,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_endcaps.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                        path &amp;#39;M  5,70 L 20,20  35,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linejoin miter   path &amp;#39;M 35,70 L 50,20  65,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linejoin bevel   path &amp;#39;M 55,70 L 70,20  85,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-linejoin round   path &amp;#39;M 75,70 L 90,20 105,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_linejoin.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black -strokewidth &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;                        path &amp;#39;M  5,70 L 20,20  35,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-miterlimit 7     path &amp;#39;M 35,70 L 50,20  65,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;stroke-miterlimit 6     path &amp;#39;M 65,70 L 80,20  95,70&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          set_miterlimit.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_stroke_opacity.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_fill_opacity.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_lines.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_lines_fill.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_endcaps.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_linejoin.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/set_miterlimit.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;stroke-miterlimit&lt;/code&gt; 的设置是相当难以演示的。这个属性定义了将 &lt;code&gt;miter&lt;/code&gt; 连接变为 &lt;code&gt;bevel&lt;/code&gt; 连接的角度。基本上对于非常尖锐的角度，一个斜面可以从两条线的实际接合处延伸很长的距离。这就为这个锐角设置了一个最大限度，当它变得太长时，就会使角点变钝。但请注意，它代表的是某种角度的三角值，而不是长度或距离。该值必须大于1.0。&lt;/p&gt;
&lt;p&gt;上面显示了对于我所显示的连接角度，斜角会突然转换成一个介于6到7之间的斜角。&lt;/p&gt;
&lt;p&gt;例如，1.414 的 &lt;code&gt;troke-miterlimit&lt;/code&gt; 会将小于90度的任何角度的 &amp;ldquo;miter&amp;rdquo; 转换为 &lt;code&gt;bevel&lt;/code&gt; 。4.0的 值（默认值）将小于约29度的角度转换为连接。而10.0的值可以将小于约11.5度的角度转换为斜面。&lt;/p&gt;
&lt;h3 id=&#34;svg-s路径绘制&#34;&gt;SVG s路径绘制&lt;/h3&gt;
&lt;p&gt;SVG 路径是 SVG 的基本绘图原语。它用于绘制线型、圆、曲线、弧线等。SVG 路径的完整规范可以在 &lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathDataGeneralInformation&#34;&gt;SVG 路径规范&lt;/a&gt;文档中找到。&lt;/p&gt;
&lt;p&gt;然而这并不是一个容易阅读的文档，因为它确实是为程序员而不是用户准备的，所以我将简化和总结路径规范&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字母是命令，而所有的数字（浮点）都是参数&lt;/li&gt;
&lt;li&gt;逗号或空格可以作为参数分隔符，否则完全忽略&lt;/li&gt;
&lt;li&gt;每个路径组件的最后两个参数 &lt;code&gt;(x,y)&lt;/code&gt; 将成为该路径组件的终点(或&amp;quot;结&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;大写字母是指最终点的绝对坐标&lt;/li&gt;
&lt;li&gt;小写字母是相对于前一个组件的终点而言的&lt;/li&gt;
&lt;li&gt;例如 &amp;ldquo;M 1,2 L 3,4 L 2,4&amp;rdquo; 和 &amp;ldquo;M 1,2 L 4,6 L 6,2&amp;rdquo; 是一样的。&lt;/li&gt;
&lt;li&gt;即在1,2上加了3,4，画线到4,6。&lt;/li&gt;
&lt;li&gt;然后在1,2上加2,4，画出一条线到最后的坐标6,2。&lt;/li&gt;
&lt;li&gt;每个元素的参数可以重复，不需要重新发布相同的路径字母，可以多加数字参数组。不过对于曲线，为了方便阅读，我建议你还是加上函数字母。&lt;/li&gt;
&lt;li&gt;重复的参数 &amp;ldquo;M&amp;rdquo; 或 &amp;ldquo;m&amp;rdquo; 分别作为 &amp;ldquo;L&amp;rdquo; 或 &amp;ldquo;l&amp;rdquo; 处理。&lt;/li&gt;
&lt;li&gt;例如：&amp;rdquo; M 1,2 3,4 5,6 &amp;quot; 和 &amp;quot; M 1,2 L 3,4 L 5,6 &amp;quot; 是一样的。&lt;/li&gt;
&lt;li&gt;而：&amp;ldquo;m 1,2 3,4 2,4 &amp;quot; 与 &amp;quot; m 1,2 l 3,4 l 2,4 &amp;quot; 相同。&lt;/li&gt;
&lt;li&gt;对于立方贝塞尔，所有的点（控制点和结点）都是相对于前一个路径组件的端点而言的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;请注意，您可以用绝对坐标或相对坐标来指定对象。因此，你可以用相对坐标来定义一个对象，只需提供一个初始的绝对&amp;quot;移动&amp;quot;坐标来定位整个路径。&lt;/p&gt;
&lt;p&gt;另一方面，你也可以使用其他的&amp;quot;图形内容&amp;quot;命令来移动整个图形在&amp;quot;视图框&amp;quot;或&amp;quot;转换&amp;quot;中的位置（见下文）。因此，在 SVG 路径中使用绝对或相对坐标并不重要。
移动、线条和路径闭合是学习 SVG 对象路径的最初起点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Open, Completed and Closed Paths (same points)&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 L 20,50 90,10 70,40&amp;#39;&amp;#34;&lt;/span&gt; path_open.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 L 20,50 90,10 70,40 40,10&amp;#39;&amp;#34;&lt;/span&gt; path_complete.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 20,50 90,10 70,40 Z&amp;#39;&amp;#34;&lt;/span&gt; path_closed.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_open.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_complete.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_closed.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是请注意，&amp;lsquo;z&amp;rsquo; 只是关闭循环。它并没有创建一个单独的对象。因此，两个&amp;quot;关闭&amp;quot;的路径仍然被归类为一个单一的绘制对象，无论它们是重叠的还是完全断开的。&lt;/p&gt;
&lt;p&gt;这里我们展示了两个闭合但重叠的循环，在同一方向上绘制。由于只使用了一条路径，所以对象是一个单一的对象，&lt;code&gt;fill-rule&lt;/code&gt; 设置控制了重叠区域的填充方式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Overlapping Paths and Fill Rule&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule evenodd \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 70,40 90,10 Z&amp;#39; &amp;#34;&lt;/span&gt; path_evenodd.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule nonzero \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 70,40 90,10 Z&amp;#39; &amp;#34;&lt;/span&gt; path_nonzero.gif

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_evenodd.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_nonzero.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;由于对象围绕中心以相同的角度方向绘制，两个闭合的循环将包含一个周期值为2的区域，因此 &lt;code&gt;evenodd&lt;/code&gt; 规则使得该区域未被填充，而非零的 &lt;code&gt;nonzero&lt;/code&gt; 规则则将其填充。但是请注意，所有的路径都是可见的，因为它们实际上是同一个对象。&lt;/p&gt;
&lt;p&gt;绘制路径的方向是非常重要的，一般情况下，所有的路径相对于对象的&#39;内部&#39;应该绘制在完全相同的方向上。&lt;/p&gt;
&lt;p&gt;例如这里我将第二个对象画成与第一个对象相反的方向。因此，当两个对象重叠时，该区域被圈出 &amp;lsquo;0&amp;rsquo; 次。也就是说，无论使用什么 &lt;code&gt;fill-rule&lt;/code&gt;，它都将是未被填充的，形成一个&#39;洞&amp;rsquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Overlapping Closed Objects, Second object drawn in reverse&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule evenodd \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 90,10 70,40 Z&amp;#39; &amp;#34;&lt;/span&gt; path_rvs_evenodd.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill-rule nonzero \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 40,10 20,20 70,50 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 20,40 90,10 70,40 Z&amp;#39; &amp;#34;&lt;/span&gt; path_rvs_nonzero.gif

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_rvs_nonzero.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_rvs_evenodd.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这意味着你可以在物体上产生一个&amp;quot;洞&amp;rdquo;，通过反转方向，使物体的&amp;quot;内部&amp;quot;保持在行进方向的同一侧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# An object with a reversed drawn hole!&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,10 20,55 70,50 80,5 Z
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                       M 50,20 60,40 40,30 Z&amp;#39; &amp;#34;&lt;/span&gt; path_with_hole.gif

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_with_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;无论 &lt;code&gt;fill-rule&lt;/code&gt; 的设置如何，结果都是一样的，因为这个洞是&#39;偶数&#39;和&#39;零&amp;rsquo;，所以是未填充的。&lt;/p&gt;
&lt;p&gt;当然，如果您使用一个完全独立的 &lt;code&gt;path&lt;/code&gt; 元素，您将生成一个完全独立的对象。在这种情况下，&lt;code&gt;fill-rule&lt;/code&gt; 不适用，而只是按照给定的顺序，将对象画在彼此的上方。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Separate paths are separate objects&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 40,10 20,20 70,50 Z&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 20,40 70,40 90,10 Z&amp;#39; &amp;#34;&lt;/span&gt; path_separate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_separate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;未来：坐标对准路径 &amp;ldquo;H&amp;rdquo; 和 &amp;ldquo;V&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;椭圆弧是 SVG 路径的圆圈绘制功能&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;large&lt;/code&gt; 和 &lt;code&gt;sweep&lt;/code&gt; 参数特别重要，因为它们用于决定从起点到终点的四种弧线中的哪一种。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;large&lt;/code&gt; 和 &lt;code&gt;sweep&lt;/code&gt; 这两个标志定义了四条弧线中哪一条弧线将连接这两个点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#  Elliptical Arcs :   A  radius_x,y  angle   large,sweep  x,y&lt;/span&gt;
  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 0,1 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc2.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 1,0 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc3.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,15 0 1,1 70,20&amp;#39;&amp;#34;&lt;/span&gt;    path_arc4.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc2.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc3.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc4.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;第二个标志 &lt;code&gt;sweep&lt;/code&gt; 简单地决定了弧线路径的方向的哪一边应该被绘制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;large&lt;/code&gt; 标志是用来选择较长的路径，绕着椭圆的中心走。这是设置的角度的弧线将大于180度。如果关闭，你会得到较小的&#39;弧&amp;rsquo;，不包含椭圆的中心，并且弧线的角度小于180度。&lt;/p&gt;
&lt;p&gt;用 &amp;ldquo;Z&amp;rdquo; 来关闭弧线，只是画出最后的直线段。&lt;/p&gt;
&lt;p&gt;要创建一个完整的椭圆或圆，你至少需要两个&#39;弧线&#39;段，从第一点到第二点，然后回到第一点。两条弧线都应该有相同的 &lt;code&gt;sweep&lt;/code&gt; 设置，所以弧线将在不同的边上，有不同的移动方向。其中一条弧线应该有 &lt;code&gt;large&lt;/code&gt; 的设置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Closed and angled elliptical arcs  (defined by two edge points)&lt;/span&gt;

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,20  20  0,0 70,20 Z &amp;#39;&amp;#34;&lt;/span&gt; path_arc5.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,20  20  1,1 70,20 Z &amp;#39;&amp;#34;&lt;/span&gt; path_arc6.gif

  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40  A 30,20  20  0,0 70,20 \
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 30,20  20  1,0 30,40 Z &amp;#39;&amp;#34;&lt;/span&gt; path_arc7.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc5.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc6.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc7.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，如果直线太长，在给定的角度下无法适应给定的椭圆大小，椭圆的大小将被放大，以适应以椭圆为中心的直线，这意味着通过使用小数字作为轴半径，你可以只指定轴长的比例，并保证直线路径通过椭圆的中心点。&lt;/p&gt;
&lt;p&gt;这意味着，通过使用小数字的轴半径，你可以只指定一个轴长的比例，并保证直线路径穿过椭圆的中心点。也就是说，路径从椭圆的一侧到另一侧形成一个椭圆直径。这并不是椭圆的主轴或次轴，只是一个椭圆的直径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 3,2  45  0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt; path_arc_x.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc_x.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然，使用长度为 &amp;ldquo;1,1&amp;rdquo; 的结果是一个完美的半圆，从一个点，到下一个点。在这种情况下，椭圆角不会有任何区别。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 1,1  0  0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt; path_hcircle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_hcircle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于以两点为中心的全圆，用&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 1,1  0  0,0 70,20
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                 A 1,1  0  1,0 30,40  Z&amp;#39;&amp;#34;&lt;/span&gt; path_circle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_circle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;SVG 对 &amp;ldquo;弧线&amp;quot;的定义也声明，如果两个半径中的任何一个是0，那么就应该画一条直线。因此，任何半径为 &amp;ldquo;0,0&amp;rdquo; 的圆弧，都只是一条简单的直线圆弧&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 0,0  0  0,0 70,20&amp;#39;&amp;#34;&lt;/span&gt; path_arc_line.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_arc_line.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你为弧线指定了一个非常大的半径，而没有为回程路径指定 &lt;code&gt;large sweep&lt;/code&gt;，你可以在两点之间创建该半径的透镜形状。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 30,40   A 50,50  0  0,0 70,20
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                 A 50,50  0  0,0 30,40  Z&amp;#39;&amp;#34;&lt;/span&gt; path_lens.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_lens.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种类型的弧线是一个关键特征。它可以让你很容易地把原本是直线的东西变成一条小而明显的曲线。&lt;/p&gt;
&lt;p&gt;例如，与其说是一个简单的三角形，不如说是一个&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  L 25,10  L 70,5 L 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt;   triangle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以用一个大半径的弧线代替每条线，让它们只是有轻微的曲线。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  A 100,100 0 0,0 25,10
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,0 70,5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,0 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt; triangle_curved.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle_curved.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;线条的端点没有变化，所发生的只是每个 &amp;ldquo;L&amp;rdquo; 被一个弧线段代替。然而弧线的大小应该与线的长度成正比。由于我没有这样做，较长的对角线比其他两条线有更深的曲线。&lt;/p&gt;
&lt;p&gt;请记住，当调整对象的大小或比例时，你也应该将半径的比例与线的长度相同，这样曲线的大小就会相应地调整，所以弧线的比例也会正确。&lt;/p&gt;
&lt;p&gt;请注意，&lt;code&gt;sweep&lt;/code&gt; 标志可以控制曲线是向外凸起还是向内凸起，这取决于每个路径段的绘制方向(见上文)。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  A 100,100 0 0,0 25,10
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,1 70,5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                A 100,100 0 0,1 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt; triangle_bulge.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle_bulge.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;看起来 &amp;ldquo;静态&amp;quot;的直边三角形，现在看起来有点像充满风的帆。&lt;/p&gt;
&lt;p&gt;如果你真的想让线条完美的直，而不把它们转换回真正的线段，你可以通过使用弧线半径为零来关闭曲线。&lt;/p&gt;
&lt;p&gt;因此，弧线不仅适合生成椭圆和圆，而且对于绘制直线和微曲线段也很有用。它是一种非常通用的通用点到点的绘制路径。&lt;/p&gt;
&lt;p&gt;使用椭圆弧来生成分离的曲线段的一个简单的替代方法是使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#quad&#34;&gt;四元贝塞尔段&lt;/a&gt;来代替，主要的区别是使用一个单一的控制点，而不是一个圆形半径来定义弧线。这也允许您将弧线偏向线段的一端，但代价是难以生成对称的弧线。&lt;/p&gt;
&lt;p&gt;当然，您也可以通过使用这两种方法来进行 &lt;code&gt;mix-n-match&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;饼图示例&#34;&gt;饼图示例&lt;/h3&gt;
&lt;p&gt;为了完成对弧线的使用，让我们举个例子，使用为它们生成圆楔。当然，你可能需要使用一些外部的三角数学（你的高中数学有多好？）来确定所需的最终路径点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 140x130 xc:white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill red   -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 60,70 L   60,20   A 50,50 0 0,1 68.7,20.8 Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill green -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 60,70 L 68.7,20.8 A 50,50 0 0,1 77.1,23.0 Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill blue  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 68,65 L 85.1,18.0 A 50,50 0 0,1  118,65   Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill gold  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 60,70 L  110,70   A 50,50 0 1,1   60,20   Z&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -fill black -stroke none  -pointsize &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 57,19 &amp;#39;10&amp;#39; text 70,20 &amp;#39;10&amp;#39; text 90,19 &amp;#39;70&amp;#39; text 113,78 &amp;#39;270&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    piechart.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/piechart.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，所有的弧线都是画在 &lt;code&gt;line path&lt;/code&gt; 的左边，并有相应的标志（使用 &lt;code&gt;sweep&lt;/code&gt; 标志）。但如果弧线覆盖的角度大于180度，则需要设置 &lt;code&gt;large&lt;/code&gt; 标志。见上面例子中最后一个 &lt;code&gt;gold&lt;/code&gt; 组件。&lt;/p&gt;
&lt;p&gt;还要注意的是，你应该完整地画出每个部分，尽管这意味着你可能要画两次边界线。如果你不这样做，你很可能要么不会完全用颜色填充该部分，要么填充颜色会覆盖之前绘制的部分轮廓。&lt;/p&gt;
&lt;p&gt;避免重复绘制多条线的唯一方法是绘制所有填充区域，然后重复这样绘制轮廓。就是说你需要把所有的东西都画两遍，确保东西正确匹配。因此，将轮廓加倍可能是最简单的解决方案。&lt;/p&gt;
&lt;p&gt;立方贝塞尔曲线可以使用 &lt;code&gt;c&lt;/code&gt; 函数定义两个控制点，以及最终的终点。对于使用最后一个控制点的镜像的持续立方贝塞尔曲线（对于连续曲线），你可以使用 &lt;code&gt;s&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;下面是一个例子。由于这个函数的复杂性，我预先准备了一个画布，显示控制点的位置，以及最后一个控制点的 &lt;code&gt;assumed mirror&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Cubic Bezier:    C  control_1_x,y control_2_x,y  x,y&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# Smooth &amp;#34; :       S  control_2_x,y  x,y&lt;/span&gt;

  convert path_cubic_canvas.gif  -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 10,30  C 10,4 50,4 50,30  S 90,55 90,30&amp;#39; &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          path_cubic.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_cubic.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;连接控制点和该路径段路径上的最终点的线（控制线）基本上定义了通过路径上该点的曲线方向。长的控制线会在该点产生一条更平滑的曲线，而短的控制线则会在该点产生一条更清晰的曲线。如果控制点与曲线的点相吻合（控制线长度为零），则曲线在该点有一个尖锐的不连续性，就像只用直线段一样。&lt;/p&gt;
&lt;p&gt;作为一个更实际的例子，下面的代码是从 &lt;a href=&#34;https://imagemagick.org/Usage/scripts/generate_logo&#34;&gt;IM 实例 Logo 生成器脚本&lt;/a&gt;中提取出来的，该脚本创建了 &lt;a href=&#34;https://imagemagick.org/Usage/images/logo.gif&#34;&gt;IM 实例 Logo&lt;/a&gt; 的曲线溅射区域。&lt;/p&gt;
&lt;p&gt;这个例子的棘手之处在于，我将我使用的立方贝塞尔路径字符串，转换为另一个路径，显示用于生成贝塞尔曲线的控制线。这让我可以看到曲线的控制线角度和长度，使得调整结果变得更加容易。只需要调整一组点就可以同时显示曲线和控制线，将错误控制在最小范围内。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;   &lt;span class=&#34;nv&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;M 12,27  C 7,37  18,50 18,60  S  0,80 10,94
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          S 40,74 50,78  S 60,99 76,95  S 72,70 75,65
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          S 95,55 95,42  S 69,37 66,32  S 67,2  53,7
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;          S 43,17 35,22  S 17,17 12,27  Z&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;nv&#34;&gt;c_ctrls&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$curve&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;              sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;1s/\([0-9]\)  *\([0-9]\)/\1 M \2/;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;                   s/S/M/g; s/C/ /;&amp;#39;&lt;/span&gt; -&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
   convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke None  fill Green  path &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$curve&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke Red   fill None   path &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$c_ctrls&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;           curvy_splash.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/curvy_splash.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你仔细观察图像，你会发现曲线的起点和终点有两条方向相反的控制线。对于一个封闭的连续路径来说，开始和结束的控制线应该在相同的角度（只是在镜面方向），当然也应该是相同的长度。这一点很重要，因为很容易弄错。&lt;/p&gt;
&lt;p&gt;沿着曲线的所有其他点只有一个控制点/线，它与曲线的绘制方向相反。该线段越长，曲线在该控制点处的 &lt;code&gt;sharp&lt;/code&gt; 越低，长度为零则产生一个 &lt;code&gt;point&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;s&lt;/code&gt; 函数在内部根据前一段的数据生成下一段的镜像控制点/线，从而产生曲线的平滑延续。&lt;/p&gt;
&lt;p&gt;关于这个路径函数的更多例子，请看&lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathDataCubicBezierCommands&#34;&gt;《SVG：立方贝塞尔曲线命令》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;手动生成贝塞尔曲线是比较直接的，不需要任何花哨的 GUI 工具。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先定义所有你想让曲线经过的坐标点，在列表的最后重复起始坐标。&lt;/li&gt;
&lt;li&gt;现在将这个列表扩大，将所有的 &lt;code&gt;x,y&lt;/code&gt; 坐标点加倍成对，并在每对坐标点前添加一个 &lt;code&gt;s&lt;/code&gt;（Smooth Cubic）函数。每对中的第一个数字是控制点，连接到第二个数字代表曲线上的点。然而第一个点对却把这一点反过来了，第一个点是曲线的起点，第二个点代表第一个也是唯一一个反转的控制点。&lt;/li&gt;
&lt;li&gt;将第一对坐标的函数字母由 &amp;lsquo;S&amp;rsquo; 改为 &amp;lsquo;M&amp;rsquo;，然后在这对坐标之间加一个 &amp;lsquo;C&amp;rsquo;。最后将第二对坐标的 &amp;lsquo;S&amp;rsquo; 去掉，完成初始的立方体（&amp;lsquo;C&amp;rsquo;）函数。&lt;/li&gt;
&lt;li&gt;通过添加最后的 &amp;lsquo;Z&amp;rsquo; 来完成路径，关闭曲线。&lt;/li&gt;
&lt;li&gt;请看上面的示例序列，它应该是怎样的。&lt;/li&gt;
&lt;li&gt;此时您可以测试绘制您的路径。由于所有的控制线长度为零，所以路径将只由直线段组成。&lt;/li&gt;
&lt;li&gt;现在您需要做的就是慢慢地、小心地调整控制线段的位置（每个 &amp;ldquo;S&amp;rdquo; 对的第一个坐标），以得到您想要的最终曲线。不要把控制线做得太长，或者方向不对，否则你会得到一条看起来非常滑稽的曲线。&lt;/li&gt;
&lt;li&gt;为了帮助查看你的变化和发现错误，请使用上面的转换 &amp;ldquo;sed&amp;rdquo; 命令来绘制路径控制点和曲线控制点之间的控制线。但是请注意，零长度的控制线是不可见的，但是由于lin会产生一个尖锐的点，所以位置应该很明显。&lt;/li&gt;
&lt;li&gt;最后，确保 &amp;ldquo;C&amp;rdquo; 之后的第一条控制点/线与终点控制点/线的位置完全相反。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交互式曲线的生成也可以通过使用一些矢量图形编辑器来实现。&lt;/p&gt;
&lt;p&gt;例如 Luis Guerra 报告说，&amp;ldquo;Inkscape&amp;rdquo; 生成的贝塞尔曲线可以使用 &amp;ldquo;Edit -&amp;gt; XML Editor&amp;rdquo; 功能，然后选择你想要控制点的路径或形状。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你知道有什么其他的方法可以用GUI工具来提取贝塞尔曲线（在曲线上每个点给出两个或一个控制点）。或者是一些其他的技术来生成这样的曲线？请发邮件给我! 我很乐意听到它。你将会像其他人一样，被记入该技术的名下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二次方贝塞尔函数是立方贝塞尔函数的简化，当两个控制点合并成一个控制点时。同样，你可以用 &amp;lsquo;Q&amp;rsquo; 函数开始曲线，然后用 &amp;lsquo;T&amp;rsquo; 函数继续曲线，镜像最后一个控制点。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;#  Quadratic Bezier:  Q  control_x,y  x,y&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;#  Smooth &amp;#34; :         T  x,y&lt;/span&gt;

  convert path_quad_canvas.gif  -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 10,30   Q 20,4 50,30   T 90,30&amp;#39; &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          path_quad.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/path_quad.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但我要提醒您，&amp;ldquo;T&amp;rdquo; 继续函数只适用于连接间距相等的点的路径。我不推荐使用它。&lt;/p&gt;
&lt;p&gt;二次方曲线的优点是可以替代&lt;a href=&#34;https://imagemagick.org/Usage/draw/#arcs&#34;&gt;椭圆弧&lt;/a&gt;，因为它使用的是实际的位置，而不是弧线的半径。它也可以使弧线偏向于一端而不是另一端，这在使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#arcs&#34;&gt;椭圆弧&lt;/a&gt;时并不实用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 20,55  Q 30,32 25,10
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                Q 50,1 70,5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                                Q 50,45 20,55 Z&amp;#39; &amp;#34;&lt;/span&gt; triangle_bulge_2.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/triangle_bulge_2.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这种情况下，弧线不是那么均匀，你得到的东西就像一个倒立的鲨鱼鳍，而不是一个帆。&lt;/p&gt;
&lt;p&gt;请记住四边形弧线是抛物线，而椭圆弧线基本上是生成圆弧线段。这可能是决定你应该使用哪种类型的弧线段的关键。&lt;/p&gt;
&lt;p&gt;有关此路径功能的更多例子，请参见：&lt;a href=&#34;http://www.w3.org/TR/SVG/paths.html#PathDataQuadraticBezierCommands&#34;&gt;SVG: Quadratic Bezier Curve Commands&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;绘图表面的变形&#34;&gt;绘图表面的变形&lt;/h3&gt;
&lt;p&gt;在这些能力之上，绘制对象的绘图表面可以以各种方式变形，让你做一些令人惊奇的事情。&lt;/p&gt;
&lt;p&gt;首先，你可以应用一些通用的绘图表面修改，比如&amp;hellip; &amp;ldquo;translate&amp;rdquo;、&amp;ldquo;rotate&amp;rdquo;、&amp;ldquo;scale&amp;rdquo;、&amp;ldquo;skewX&amp;rdquo;、&amp;ldquo;skewY&amp;rdquo; 和 &amp;ldquo;affine&amp;rdquo;。&lt;/p&gt;
&lt;p&gt;例如，给定一个线条的 &lt;code&gt;path&lt;/code&gt;，我们可以 &lt;code&gt;translate&lt;/code&gt; 绘图表面的原点或0,0点到另一个位置。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 3,3 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  transform_translate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_translate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，&amp;ldquo;0,0&amp;rdquo; 或绘图区域的原点现在以图像为中心，尽管Y轴在图像的顶部仍然是负数，在底部仍然是正数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rotate&lt;/code&gt; 操作将旋转绘图表面，所以以后在该表面上绘制的任何东西都将被旋转绘制。当然，它会围绕转换后的原点进行旋转，所以最好同时使用这两个变换运算符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30    rotate -30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  transform_rotate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_rotate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scale&lt;/code&gt; 将放大和缩小原点周围的绘图面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30    scale 1.5,1.5
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  transform_scale.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_scale.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个常见的 &lt;code&gt;scale&lt;/code&gt; 用法是将Y轴翻转，使Y的正值向上。当然原点也应该移到中心，或者左下角，以保持秩序。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30    scale 1,-1
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;    transform_flip.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_flip.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后，&amp;ldquo;skewX&amp;rdquo; 和 &amp;ldquo;skewY&amp;rdquo; 在X和Y方向上对图像进行剪切。例如，这里我们使用 &amp;ldquo;skewX&amp;rdquo; 给图像的垂直Y轴一个倾斜。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;translate 50,30   skewX 20
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;    transform_skewY.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/transform_skewY.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些操作符在 MVG &lt;code&gt;-draw&lt;/code&gt; 字符串之外有对应的操作符，供一般使用。但是这些命令行版本是运算符，并且立即应用于内存中已经存在的图像，而不是应用于尚未绘制的矢量对象的绘制表面。更多细节请看扭曲图像。&lt;/p&gt;
&lt;h3 id=&#34;绘制表面的平移变形&#34;&gt;绘制表面的平移变形&lt;/h3&gt;
&lt;p&gt;上述所有五种画布变换都可以组合成一个通用的 Affine Matrix Operator，可以使用 MVG 原语 &amp;ldquo;affine&amp;rdquo;，也可以在调用 &lt;code&gt;-draw&lt;/code&gt; 之前使用 &lt;code&gt;-affine&lt;/code&gt; 设置 Affine 变换。&lt;/p&gt;
&lt;p&gt;Affine 变换使用一组 &amp;ldquo;Matrix Coefficients&amp;rdquo;，它定义了如何将你给出的坐标修改为实际的绘图坐标。&lt;/p&gt;
&lt;p&gt;关于这些 &amp;ldquo;coefficients&amp;rdquo; 如何工作的更多细节，请参阅 &lt;a href=&#34;https://imagemagick.org/Usage/distorts/affine/&#34;&gt;Affine Matrix Transforms&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;例如&amp;hellip; 要设置一个相对于对象绘制时的中心原点&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;affine 1,0,0,1,50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;  affine_null.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/affine_null.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;翻转图像&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;affine 1,0,0,-1,50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt; affine_flip.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/affine_flip.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;绕原点旋转30度&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;affine .866,-.5,.5,.866,50,30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 image over 4,4 0,0 &amp;#39;terminal.gif&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,20 -45,20 20,-25 -25,-25&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill none  stroke red
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 0,10 0,-10  M 10,0 -10,0&amp;#39; &amp;#34;&lt;/span&gt;    affine_rot.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/affine_rot.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于更复杂的仿射变换，您可以使用为此目的创建的&lt;a href=&#34;https://imagemagick.org/Usage/distorts/affine/#affine_scripts&#34;&gt;仿射辅助脚本&lt;/a&gt;。这些脚本将诸如旋转角度和中心点之类的东西转换为 Affine 坐标，你可以直接在 &lt;code&gt;-draw affine&lt;/code&gt; 或 &lt;code&gt;-affine&lt;/code&gt; 设置中使用。&lt;/p&gt;
&lt;h3 id=&#34;推弹上下文&#34;&gt;推/弹上下文&lt;/h3&gt;
&lt;p&gt;一些 MVG 原语实际上依赖于这些变换的使用才能正确使用。例如，&lt;a href=&#34;https://imagemagick.org/Usage/draw/#primitive_circle&#34;&gt;椭圆原语&lt;/a&gt;只能用正交对齐的轴直接指定。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;ellipse 50,30 30,15 0,360&amp;#34;&lt;/span&gt;   ellipse_orthogonal.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/ellipse_orthogonal.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，通过使用&lt;a href=&#34;https://imagemagick.org/Usage/draw/#transform&#34;&gt;绘图变换&lt;/a&gt;，我们可以很容易地给椭圆添加一个&amp;quot;旋转角&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue -fill white -stroke black &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 50,30   rotate 30
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 fill white  stroke black
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 ellipse 0,0 30,15 0,360
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context&amp;#34;&lt;/span&gt;       ellipse_rotated.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/ellipse_rotated.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，椭圆的 &lt;code&gt;center&lt;/code&gt;(旋转点)在应用旋转之前首先被转换。然后，&lt;code&gt;ellipse&lt;/code&gt; 在 &amp;ldquo;0,0&amp;rdquo; 处的转换位置被绘制。&lt;/p&gt;
&lt;p&gt;上面还显示了两个新的 MVG 绘图原语。&amp;lsquo;push graphic-context&amp;rsquo; 和 &amp;lsquo;pop graphic-context&amp;rsquo;。在上面的例子中，并不是严格意义上的需要，但在进行主要的绘图转换时，建议使用这两个原语。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt; 和 &lt;code&gt;pop&lt;/code&gt; 原语的作用是保存当前的绘图状态或 &amp;ldquo;graphic-context&amp;rdquo;，然后再次恢复。在这两个原语之间更改的任何绘图设置都会被遗忘。这包括曲面变形（如 &amp;ldquo;平移 &amp;ldquo;和 &amp;ldquo;旋转&amp;rdquo;）、颜色设置 &lt;code&gt;fill&lt;/code&gt; 和 &lt;code&gt;stroke&lt;/code&gt; 或任何其他修改了绘图 &lt;code&gt;state&lt;/code&gt; 的设置。&lt;/p&gt;
&lt;p&gt;这些原语使您可以轻松地绘制具有许多变换的非常复杂的对象，然后将事物恢复到更 &amp;ldquo;正常&amp;quot;的状态，以便以后进行绘制操作。您可以在下面的&lt;a href=&#34;https://imagemagick.org/Usage/draw/#arrows&#34;&gt;绘制箭头&lt;/a&gt;中看到更实用的演示。&lt;/p&gt;
&lt;h3 id=&#34;推弹特殊对象&#34;&gt;推/弹特殊对象&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_barrier.gif&#34; alt=&#34;img&#34;&gt;  建设中 &lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;更多专门用于 MVG 处理 SVG 格式的设置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    font-family   font-stretch   font-style   font-weight
    encoding &#39;UTF-8&#39;

    push defs

      push gradient &#39;def_name&#39; linear X1,Y1 X2,Y2
        stop-color &#39;color&#39; where
        stop-color &#39;color&#39; where
          # where is a point between the two pixels given (0 = X1,Y1  1= X2,Y2)
        gradient-units &#39;objectBoundingBox|userSpaceOnUse&#39;
        affine ....
      pop gradient

      push gradient &#39;def_name&#39; radial CX,CY FX,FY R
        # Here CX,CY is the center of the radial gradient of radius R
        # the FX,FY is the focal, and is usually the same a CX,CY
        # unless you are trying to warp the gradient in a specific direction
        stop-color &#39;color&#39; where
        ...
      pop gradient

    pop defs

    push graphic-context
      fill &#39;url(#def_name)&#39;
      ... draw things here ...
    pop graphic-context
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;例子见 Florent Monnier 的开发网站&amp;hellip;  &lt;a href=&#34;http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/&#34;&gt;http://www.linux-nantes.fr.eu.org/~fmonnier/OCaml/MVG/&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&#34;阅读-mvg-文件&#34;&gt;阅读 MVG 文件&lt;/h3&gt;
&lt;p&gt;正如你在上面的例子中所看到的，MVG 的 &lt;code&gt;-draw&lt;/code&gt; 参数可以变得很长。事实上，SVG 到 MVG 的转换可以产生一些非常长的 MVG 绘图参数（见下文）。&lt;/p&gt;
&lt;p&gt;然而，IM 的一般命令行界面允许您通过使用 &lt;code&gt;&amp;quot;@filename&amp;quot;&lt;/code&gt; 参数从文件中读取任何字符串参数。这很方便，因为这意味着你可以从一个单独的文件中读取非常长和复杂的MVG绘图命令。&lt;/p&gt;
&lt;p&gt;例如，如果我将 MVG 操作放入一个名为 &amp;ldquo;draw_circles.mvg&amp;rdquo; 的文件中，那么我就可以像这样绘制&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:skyblue  -draw @mvg_circles.mvg  mvg_draw.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_circles.mvg.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_draw.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;不仅如此，ImageMagick 还懂得直接读取 &amp;ldquo;MVG:&amp;rdquo; 图像文件格式，让你可以更直接地绘制此类命令。然而，除非 MVG文 件定义了一个画布，否则你可能需要指定初始画布（ &lt;code&gt;-size&lt;/code&gt; 和&amp;rdquo;-background&amp;rdquo;）来绘制。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60  -background limegreen  mvg_circles.mvg  mvg_file.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_circles.mvg.gif&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_file.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你可以通过在 MVG 文件中添加一个 &amp;ldquo;viewbox&amp;rdquo;，并添加适当的背景色填充绘制，将初始画布设置移动到 MVG 图像中。这样就完成了 MVG 图像文件作为一个完整的图像定义。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert    mvg_circles2.mvg    mvg_image.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_circles2.mvg.gif&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt; &lt;img src=&#34;https://imagemagick.org/Usage/draw/mvg_image.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只有一种方法可以从 MVG 参数字符串中读取外部 MVG 文件，那就是使用 &amp;ldquo;图像 &amp;ldquo;绘图原语。遗憾的是，这将 MVG 的 include 转换为光栅图像，然后再将该图像覆盖到绘图表面。
换句话说，目前还没有MVG的 &amp;ldquo;include&amp;quot;功能。 :-(&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_barrier.gif&#34; alt=&#34;img&#34;&gt;  建设中 &lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;您可以生成IM的低级绘制操作，使用 `&lt;a href=&#34;https://imagemagick.org/Usage/option_link.cgi?render&#34;&gt;+render&lt;/a&gt; 来记录它们。&lt;/p&gt;
&lt;p&gt;当你再给 &lt;code&gt;-render&lt;/code&gt; 设置/操作时，IM将立即绘制这些保存的操作。&lt;/p&gt;
&lt;p&gt;奇怪的是，仅仅输出到 &amp;ldquo;MVG&amp;rdquo; 文件似乎也能做到这一点&amp;hellip;&amp;hellip;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;     convert  ...   -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;....&amp;#39;&lt;/span&gt;  draw_commands.mvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：如果你在输出 MVG 格式文件时画了一条曲线，文件中会列出以下内容。曲线是一系列的短线段，而不是原始曲线。&lt;/p&gt;
&lt;p&gt;当然您也可以完全使用更通用的 SVG 格式。参见下面的 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/draw/#svg&#34;&gt;SVG 格式处理&lt;/a&gt;&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;mvg-阿尔法构成&#34;&gt;MVG 阿尔法构成&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_barrier.gif&#34; alt=&#34;img&#34;&gt;  建设中 &lt;img src=&#34;https://imagemagick.org/Usage/img_www/const_hole.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;我没有看到任何使用 Alpha 构图的情况（除了 &lt;code&gt;painters&lt;/code&gt; 的算法之外）。基本上是一种 &amp;ldquo;over&amp;rdquo; alpha 合成）来绘制对象。&lt;/p&gt;
&lt;p&gt;然而，这并不是说不能这样做。&lt;/p&gt;
&lt;p&gt;如果你喜欢将你的矩形、椭圆、圆形或其他物体用不同的阿尔法成分（如 &amp;ldquo;DstOver&amp;rdquo;，这是一个类似于 Under 的成分），然后在空白的透明画布上画出你的人物，同样的构图，并将其合成到您的图像上。&lt;/p&gt;
&lt;p&gt;然而，由于 SVG 允许您使用 alpha 合成来绘制文本和其他的图像，因此，您可以使用 SVG 来绘制图像项目到图像上，我想这将是一个未来的补充。&lt;/p&gt;
&lt;p&gt;敬请期待&lt;/p&gt;
&lt;h3 id=&#34;绘制符号&#34;&gt;绘制符号&lt;/h3&gt;
&lt;p&gt;有时你在图像上有一组点，你想在那里绘制参考符号，如十字、圆圈等。遗憾的是，目前IM还没有可以轻松绘制这类符号的命令，但只要稍加努力，你就可以绘制这类符号。&lt;/p&gt;
&lt;h4 id=&#34;符号绘制技巧&#34;&gt;符号绘制技巧&lt;/h4&gt;
&lt;p&gt;在给定的位置列表中绘制多个符号的诀窍是使用 shell 脚本或任何你正在使用的 API 生成 MVG 绘图命令，以便将给定的点集转化为适当的绘图命令集。
例如，我在这里将一条线上的点转换为每一个点的&amp;quot;加号&amp;rdquo;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# convert each point into a draw command for a cross (using &amp;#39;awk&amp;#39;)&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# the &amp;#39;tr&amp;#39; converts spaces into &amp;#39;newlines&amp;#39; (one point per line).&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;crosses&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; tr -s &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\012&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     awk -F, &lt;span class=&#34;s1&#34;&gt;&amp;#39;{ print &amp;#34;line &amp;#34; $1-3 &amp;#34;,&amp;#34; $2 &amp;#34; &amp;#34; $1+3 &amp;#34;,&amp;#34; $2 ;
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;                print &amp;#34;line &amp;#34; $1 &amp;#34;,&amp;#34; $2-3 &amp;#34; &amp;#34; $1 &amp;#34;,&amp;#34; $2+3 ; }&amp;#39;&lt;/span&gt; -&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# draw a red line between the points, and blue crosses on the points.&lt;/span&gt;
  convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke red   polyline &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke blue  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$crosses&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          points_plus.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_plus.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;上面使用 &amp;ldquo;tr&amp;rdquo; 将每个点（两个数字）分成每条线上的一个点，然后使用 &amp;ldquo;awk&amp;rdquo; 进行所有数学计算，在给定的点上绘制&amp;quot;加号&amp;rdquo;。你可以使用任何你喜欢的东西，因为我只是在输入点列表上应用了一种文本宏扩展的形式。几乎所有的编程语言都可以做到这一点。对于上面的shell脚本案例，我只是发现 &amp;ldquo;awk&amp;rdquo; 是最简单、最快的手段。&lt;/p&gt;
&lt;p&gt;其实你甚至可以使用 Imagemagick 本身的 &amp;ldquo;convert&amp;rdquo; 格式选项来进行这种 &amp;ldquo;macro&amp;rdquo; 的扩展&amp;hellip;比如这里我用它来计算圆周上的一个点，对于这个&amp;quot;点符号&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# circle radius (or symbol size) to draw around each point.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;radius&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.5

  &lt;span class=&#34;c1&#34;&gt;# convert each point into a draw command for a cross&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# In this case, points are space separated by the shell&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;circles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d, -f1&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; cut -d, -f2&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;c1&#34;&gt;# use IM to do some floating point math, EG:  y2=$y+$radius&lt;/span&gt;
             &lt;span class=&#34;nv&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;convert xc: -format &lt;span class=&#34;s1&#34;&gt;&amp;#39;%[fx:&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$radius&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;]&amp;#39;&lt;/span&gt; info:&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
             &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;circle &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
           &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Draw a red line between the points, and blue circles on the points.&lt;/span&gt;
  convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke red   polyline &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke blue  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$circles&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          points_circle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_circle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，您生成的绘制字符串可能会变得相当长，并且可能会开始导致您的最终命令的长度问题。所以，与其将点转换成长字符串，然后我们在命令行上传递给 IM，不如将绘制命令以文件的形式管道化给 IM。&lt;/p&gt;
&lt;p&gt;我这次也使用了 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径&lt;/a&gt;的绘制方法来代替 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#primitives&#34;&gt;Draw Primitive&lt;/a&gt; 的绘制方法。另外我生成的符号是每个点周围的三角形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# convert each point into a draw commands to draw a triangle&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
     &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  m 0,-5 -4,+8 +8,0 -4,-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    convert -size 100x100 xc:white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke red  -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill none -stroke blue -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;@-&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          points_tri.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_tri.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径&lt;/a&gt;实际上使这一点变得更容易，通过允许相对像素移动，允许你设计符号，所以它只需要一个单一的初始绝对移动&amp;rsquo;M&amp;rsquo;，然后再给出&#39;移动&#39;和&#39;线&#39;的序列来绘制符号。正因为如此，你实际上根本不需要任何浮点计算，因为IM draw会完成所需的定位数学。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;相对移动SVG路径项&amp;rsquo;m&#39;在IM v6.4.3-5之前被破坏了。如果你的IM比这更老，上面（和下一个）的例子可能什么也画不出来。您可以通过将上面的相对移动&amp;rsquo;m&#39;替换为适当的相对线序列&amp;rsquo;l&#39;来解决旧版本的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在你可以更进一步，将一个完整的MVG文件，包括画布规格，直接作为一个绘画命令的流水线输入到IM中。这次让我们做一个&#39;十字&amp;rsquo;，这和上面第一个&#39;加&#39;的例子类似，需要大量的计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Define a string of X and Y coordinates&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;# comma between values, space between coordinates.&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;points&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;6.6,7.7  25.0,75.0 42.2,85.4 75.8,94.7 51.5,39.3  92.5,66.6&amp;#34;&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;# Generate a MVG file for IM to draw all components&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;viewbox 0 0 100 100   fill white  rectangle 0,0 100 100&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;fill none stroke red   path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;fill none stroke blue  path &amp;#39;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; point in &lt;span class=&#34;nv&#34;&gt;$points&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$point&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  m -2,-2 +4,+4  m -4,0 +4,-4&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#39;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; convert mvg:- points_cross.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_cross.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这使用了特殊的shell编程技术，在shell括号中 &amp;ldquo;echo&amp;rdquo; 的任何东西都将作为MVG文件被输入到最终的&amp;quot;转换&amp;quot;命令中。第一个 &amp;ldquo;echo&amp;rdquo; 定义并填充图像的绘图画布，而 &amp;ldquo;while&amp;rdquo; 循环则将每个 &amp;ldquo;点&amp;rdquo; 转换为一个给定半径的圆。&lt;/p&gt;
&lt;p&gt;这种方法的优点是，你不会受到任何字符串的限制，而使用其他两种方法可能会受到限制。&lt;/p&gt;
&lt;p&gt;其他你可以生成的符号包括方框、钻石、错误条等。&lt;/p&gt;
&lt;p&gt;也请参见下面的&amp;quot;绘制圆圈&amp;rdquo;，了解其他圆圈方法，包括不计算相对 &amp;ldquo;路径&amp;quot;的圆圈绘制。&lt;/p&gt;
&lt;h4 id=&#34;绘制符号的替代方法&#34;&gt;绘制符号的替代方法&lt;/h4&gt;
&lt;p&gt;除了直接绘制符号外，还有其他的方法可以将符号添加到图像中。&lt;/p&gt;
&lt;h5 id=&#34;符号字体&#34;&gt;符号字体&lt;/h5&gt;
&lt;p&gt;您可以从 &lt;a href=&#34;https://imagemagick.org/Usage/text/#symbol&#34;&gt;Symbol Font&lt;/a&gt; 中提取符号，并将其保存为一个小位图。你也可以使用小的预定义但色彩丰富的图像来做这件事。&lt;/p&gt;
&lt;p&gt;然而这样做可能会出现问题，无法准确定位字体相对于特定像素的位置。也就是说这不是一个非常精确的技术。但是你可以在任何像素位置组成任何图像。例如这些符号是从一些字体中提取出来的，用于这些示例页面的具体使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;=   =&amp;gt;   x   +   +   +   o   o   o   o
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在&lt;a href=&#34;https://imagemagick.org/Usage/layers/#composite&#34;&gt;分层图像&lt;/a&gt;一节中给出了将图像合成到大背景上的例子。然而，循环的方法可能更有用，例如在&lt;a href=&#34;https://imagemagick.org/Usage/layers/#layer_prog&#34;&gt;分层图像&lt;/a&gt;的程序化定位中给出了。&lt;/p&gt;
&lt;p&gt;未来：使用坐标对图像进行分层的例子&lt;/p&gt;
&lt;h4 id=&#34;形态学&#34;&gt;形态学&lt;/h4&gt;
&lt;p&gt;另一种选择是使用&lt;a href=&#34;https://imagemagick.org/Usage/morphology/#intro&#34;&gt;形态学&lt;/a&gt;，使用特殊的&amp;quot;形状&amp;quot;内核，如 &amp;ldquo;磁盘&amp;rdquo;、&amp;ldquo;环形 &amp;ldquo;和 &amp;ldquo;加&amp;rdquo;，甚至是你自己的用户定义内核，来 &amp;ldquo;稀释&amp;quot;单个像素。&lt;/p&gt;
&lt;p&gt;例如&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 80x80 xc:black -fill white &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;point 20,15 point 55,30 point 40,60&amp;#39;&lt;/span&gt;  points_pixels.gif

  convert points_pixels.gif -morphology Dilate Ring    points_rings.gif

  convert points_pixels.gif -morphology Dilate Plus:4  points_pluses.gif

  convert points_pixels.gif -morphology Dilate Cross:3 points_crosses.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_pixels.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_rings.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_pluses.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_crosses.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后可以通过使用 &lt;a href=&#34;https://imagemagick.org/Usage/masking/#alpha_shape&#34;&gt;Alpha Shape Operator&lt;/a&gt; 将结果直接转换为彩色叠加。&lt;/p&gt;
&lt;p&gt;这样做的最大好处是，你其实不需要知道每个符号的单独位置。或者有多少个符号。但这也可能是一个缺点。一个主要的缺点是，位置只在整数位置。你不能使用浮点 &amp;ldquo;子像素&amp;quot;定位来&amp;quot;绘制&amp;rdquo;。&lt;/p&gt;
&lt;h4 id=&#34;卷积&#34;&gt;卷积&lt;/h4&gt;
&lt;p&gt;一个几乎相同的技术是使用 &lt;a href=&#34;https://imagemagick.org/Usage/convolve/#convolve&#34;&gt;Convolve&lt;/a&gt;，使用专门设计的内核，它允许你设置不同的灰度，而不仅仅是一个简单的开/关结果，如上所述。&lt;/p&gt;
&lt;p&gt;通过使用不同的&lt;a href=&#34;https://imagemagick.org/Usage/morphology/#user&#34;&gt;用户定义内核&lt;/a&gt;，为图像的每一个通道（红、绿、蓝和阿尔法），甚至可以从每个像素坐标创建多色符号。&lt;/p&gt;
&lt;p&gt;为此，我使用了一个我写的特殊脚本 &lt;a href=&#34;https://imagemagick.org/Usage/scripts/image2kernel&#34;&gt;image2kernel&lt;/a&gt; 来将彩色图像（见右图）转换为每个通道的独立浮点卷积核。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  image2kernel -q marker.png marker.dat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/marker.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这将生成四个文件，比如 &lt;a href=&#34;https://imagemagick.org/Usage/draw/marker_R.dat&#34;&gt;marker_R.dat&lt;/a&gt;，每个通道都有一个非常小的输入图像，这是&lt;a href=&#34;https://imagemagick.org/Usage/morphology/#user&#34;&gt;用户定义&lt;/a&gt;的图像表示（原点在图像中心）。&lt;/p&gt;
&lt;p&gt;现在使用这些内核数据文件，我们可以将这些单点在透明的背景上 &lt;a href=&#34;https://imagemagick.org/Usage/convolve/#convolve&#34;&gt;Convolve&lt;/a&gt; 成我们彩色的标记图像。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert points_pixels.gif -alpha off &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_R.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_G.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_B.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -clone &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -morphology Convolve @marker_A.dat &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -delete &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -channel RGBA -combine point_markers.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/points_pixels.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/point_markers.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在IM v6.7.6-9之前，Combine Operator 要求图像的透明度通道以 &amp;ldquo;哑光&amp;quot;值而不是alpha值的形式给出，因此，由此产生的alpha通道需要被否定。EG:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  ... &lt;span class=&#34;s2&#34;&gt;&amp;#34;`cat marker_A.dat`&amp;#34;&lt;/span&gt; -negate &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只能使用小图像，像素点要足够分散，符号不要重叠。这是因为 &lt;a href=&#34;https://imagemagick.org/Usage/convolve/#convolve&#34;&gt;Convolve&lt;/a&gt; 会将重叠的区域加在一起，使其比预期的更亮。&lt;/p&gt;
&lt;p&gt;以上内容已被转换成UNIX shell脚本 &lt;a href=&#34;https://imagemagick.org/Usage/scripts/convolve_image&#34;&gt;convolve_image&lt;/a&gt;，以方便使用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convolve_image  points_pixels.gif marker.png   point_markers.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个技术源于IM论坛上的一个讨论-&lt;a href=&#34;https://imagemagick.org/Usage/forum_link.cgi?t=17259&amp;amp;p=64696&#34;&gt;IM 的有趣体验&lt;/a&gt;。用户希望在足球场的背景图上放置小人，让他们的位置在图片中拼出一个人的名字。&lt;/p&gt;
&lt;h4 id=&#34;分层&#34;&gt;分层&lt;/h4&gt;
&lt;p&gt;一种不同的技术，如&lt;a href=&#34;https://imagemagick.org/Usage/layers/&#34;&gt;图像层&lt;/a&gt;，使用你从源图像中提取的像素列表进行定位，可能是更好的方法。你可以先叠加更远的符号图像，然后再叠加前景图像，你可以通过编程选择或随机选择什么符号替换什么点。&lt;/p&gt;
&lt;p&gt;关于这个例子，请看&lt;a href=&#34;https://imagemagick.org/Usage/layers/#layer_pins&#34;&gt;地图中的图钉&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;绘制圆圈&#34;&gt;绘制圆圈&lt;/h4&gt;
&lt;p&gt;绘制选项为您提供了许多方法来完成一些非常基本的工作。绘制圆。&lt;/p&gt;
&lt;p&gt;例如，您可以在圆周上的任何一点上画一个圆，因此您需要计算一个中心点和一个半径为25像素的第二点。因此，您需要计算一个中心点和第二个点，这个点的半径（例如25像素）离第一个点的距离。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Firebrick  -fill tomato  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;circle 50,30 50,55&amp;#39;&lt;/span&gt;    circle_circle.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_circle.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.fmwconcepts.com/fmw/fmw.html&#34;&gt;Fred Weinhaus&lt;/a&gt; 指出，通过使用平移，你可以消除计算圆边坐标的需要，而直接给出半径即可。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke SeaGreen  -fill PaleGreen  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;translate 50,30 circle 0,0 25,0&amp;#39;&lt;/span&gt;    circle_circle_trans.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_circle_trans.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是当绘制多个圆时，上述操作需要对每个圆进行单独的 &lt;code&gt;-draw&lt;/code&gt; 操作，或者使用 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#push_context&#34;&gt;Context Pushing&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用椭圆可以直接指定半径为轴长&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Sienna  -fill Wheat  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;ellipse 50,30 25,25 0,360&amp;#39;&lt;/span&gt;    circle_ellipse.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_ellipse.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你也可以用 &lt;code&gt;stroke-lineecap round&lt;/code&gt; 画一条非常非常短的线来生成一个圆。描边的宽度可以设置圆的直径。注意线条必须有一定的长度（无论多小），否则画不出任何东西。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Blue  -strokewidth &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;stroke-linecap round line 50,30 50,30.0001&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_line.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_line.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这种技术，不幸的是不能勾勒出生成的圆，但对于覆盖大面积的区域，大笔触宽度是有用的。请看下面一些简单的例子。&lt;/p&gt;
&lt;p&gt;这种方法利用了 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#paths&#34;&gt;SVG 路径&lt;/a&gt;的绘制方法，所以可以在不需要计算任何额外坐标的情况下绘制圆形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Blue  -fill DodgerBlue  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 50,30  m 0,25  a 1,1 0 0,0 0,-50  a 1,1 0 1,0 0,50&amp;#39;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_path.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_path.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;只有最初的绝对移动 &amp;lsquo;M&amp;rsquo; 是用来定义中心的，接下来的路径组件中的 &amp;lsquo;25&amp;rsquo; 和 &amp;lsquo;50&amp;rsquo; 是定义相对于这个中心的圆的半径和直径。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在IM v6.4.3-5之前，相对移动SVG路径项 &amp;lsquo;m&amp;rsquo; 是被破坏的。 如果您的IM比这更早，圆可能只显示为一个像素。您可以通过将上面的 &amp;lsquo;m&amp;rsquo; 替换为 &amp;lsquo;l&amp;rsquo; 来修复旧版本的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://www.fmwconcepts.com/fmw/fmw.html&#34;&gt;Fred Weinhaus&lt;/a&gt; 添加了以下贝塞尔圆的方法。它非常接近真实的圆（虽然不精确），并且需要进行浮点计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;50&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;75&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# = cx ± radius&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;-3.25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;63.25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# = cy ± radius*1.275&lt;/span&gt;

  convert -size 100x60 xc:  -stroke Purple  -fill Violet  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bezier &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;bezier &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          circle_bezier.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_bezier.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果画一个精确的圆并不重要，你可以使用这个4 Bezier段 SVG 路径，它只使用圆的X和Y边界进行计算。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cx&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;50&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;nv&#34;&gt;cy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;30&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;x1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;25&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;x2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;75&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# X bounds = cx ± radius&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;y1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;5&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;nv&#34;&gt;y2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;55&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;c1&#34;&gt;# Y bounds = cy ± radius&lt;/span&gt;

  convert -size 100x60 xc:  -stroke Tomato  -fill Gold  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;path &amp;#39;M &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cx&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; Q &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; T &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cx&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$x2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cy&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$cx&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$y1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; z&amp;#39;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     circle_bezier_path.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_bezier_path.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢一个完全相对于中心起点绘制的，你可以使用这种技术。只使用半径值，使其生成简单，只使用 API 中的字符串函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x60 xc:  -stroke Orange  -fill LemonChiffon  -strokewidth &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 50,30  m 0,25  q 25,0 25,-25  t -25,-25  -25,25  25,25 z&amp;#39;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;     circle_bezier_path_rel.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/circle_bezier_path_rel.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你能想到其他画圆的方法吗？&lt;/p&gt;
&lt;h3 id=&#34;绘制箭头-定位旋转和缩放符号&#34;&gt;绘制箭头-定位、旋转和缩放符号&lt;/h3&gt;
&lt;p&gt;使用上述技术，你可以创建一个特殊的符号，如箭头，你可以定位，使其点在线的最末端，并画在它上面。如果你画的箭头后的线（典型的情况），那么箭头将被绘制在该行的顶部。&lt;/p&gt;
&lt;p&gt;然而，他们有三种类型的箭头，可以定义，每个类型的定义在不同的方式取决于它的使用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;测量时，你只是想用箭头头标记线的两端，以指示一些工程图中的测量极限。非常简单。&lt;/li&gt;
&lt;li&gt;矢量，显示一些数值的方向和强度。例如在天气风图中。需要一个尾巴，0,0点就是尾巴的末端。通常情况下，这样的向量会形成一个大网格。&lt;/li&gt;
&lt;li&gt;指标，指出一些细节。对于这个0,0点可能应该是箭尖，或者是箭头本身前面的一些距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;测量箭头&#34;&gt;测量箭头&lt;/h4&gt;
&lt;p&gt;简单地在一条线的末端添加一个箭头是比较容易做到的。基本上，您可以创建一个 &amp;lsquo;arrow head&amp;rsquo; &lt;a href=&#34;https://imagemagick.org/Usage/draw/#symbols&#34;&gt;符号&lt;/a&gt;，并将其画在正确的位置。&lt;/p&gt;
&lt;p&gt;例如&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 10,30 80,30&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 80,30  &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_horizontal.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arrow_horizontal.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，我画的符号，使其起点是线的最末端。这样一来，它就可以在之前画好的线上面向后画，形成一个非常漂亮的整齐的符号。&lt;/p&gt;
&lt;p&gt;箭头却有一个相关的方向。你可以在许多不同的角度创建大量的箭头定义，许多程序都这样做。但是既然箭头是一个矢量，那么为什么不把箭头作为一个矢量进行旋转呢。IM绘图命令内置了绘图旋转（&lt;a href=&#34;https://imagemagick.org/Usage/draw/#transform&#34;&gt;Canvas Warping&lt;/a&gt;），所以让我们使用它们。&lt;/p&gt;
&lt;p&gt;这样做还有一个好处，就是把位置从箭头头的 &lt;code&gt;path&lt;/code&gt; 定义中移出来，让你把整个路径指定为 &lt;code&gt;constant&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 25,55 70,10&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 70,10 rotate -45
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_rotate.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arrow_rotate.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果你喜欢改变箭头的大小，可以在旋转后增加一个 &lt;code&gt;scale&lt;/code&gt; 绘制选项。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 25,55 70,10&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 70,10 rotate -45 scale 2,2
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_scale.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arrow_scale.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，它是如何放大离开箭头的&amp;quot;尖端&amp;rdquo;，你指定的地方。这是处理箭头的一个非常重要的方面，因为它是唯一的终点，和角度的线，你正在添加箭头的事项。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;transforms&lt;/code&gt; 的顺序是很重要的，而且实际上与它们实际被处理的顺序是相反的。也就是先将比例尺应用于座标，然后是旋转，再是平移。如果座标变换不是按照这个顺序进行的，我们最终也会对箭头的最终位置进行缩放，而不是我们期望的位置。&lt;/p&gt;
&lt;p&gt;另外由于比例尺有两个数字，而原来的箭头头符号是水平设计的（角度为零），所以可以分别将箭头的宽度与高度进行比例。同时注意笔画宽度也随着箭头的大小而缩放，保持一致。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;line 25,55 70,10&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 translate 70,10 rotate -45 scale 2,1
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_scale_aspect.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arrow_scale_aspect.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在，当你在画布上翘起一个个箭头时，也许还有许多其他的绘画操作，你可能喜欢在一次 &lt;code&gt;[&amp;quot;-draw&amp;quot;](https://imagemagick.org/Usage/option_link.cgi?draw)&lt;/code&gt; 操作中把它们全部画完。说要画线，然后在两端添加箭头，需要不同的颜色、位置、旋转，甚至可能是不同的比例。这意味着我们需要将画布翘曲的范围限制在每个单独箭头头的绘制上。如果你不限制范围，你可能会在以后开始影响到其他后面的绘制操作，永远不能很确定你生成的是什么。&lt;/p&gt;
&lt;p&gt;为了限制翘曲的范围（以及所有其他的绘图属性），您将涉及到的部分包裹在一个 &lt;code&gt;graphic-context&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;arrow_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x60 xc: &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke black fill none
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 path &amp;#39;M 10,40 A 50,50 0 0,1 90,40&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 10,40 rotate 135
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke firebrick fill tomato
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 90,40 rotate 45
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$arrow_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_context.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arrow_context.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt; 主要是将当前所有的绘图属性保存起来，以备将来使用，而 &lt;code&gt;pop&lt;/code&gt; 则恢复这些属性，用之前保存的设置替换任何设置（颜色、扭曲、位置等）。这意味着在 &amp;lsquo;popping&amp;rsquo; 之后，&amp;lsquo;canvas warp&amp;rsquo; 会被取消，画图会回到修改之前的状态。&lt;/p&gt;
&lt;p&gt;上述技术只是生成箭头的一种方法，在绘制箭头作为测量距离的一部分时，如在技术图纸中，是一种很好的方法。&lt;/p&gt;
&lt;h4 id=&#34;矢量箭头&#34;&gt;矢量箭头&lt;/h4&gt;
&lt;p&gt;如前所述，矢量既显示方向，又显示某个数值的强度。这意味着箭头的长度是可变的，箭头头可以在任何位置远离向量的起点。&lt;/p&gt;
&lt;p&gt;现在，你可以做一些沉重的数学计算的位置，箭头头应该是地方给定的向量的长度和角度，但他们是一个更好的方法，这让 ImageMagick 为你做这些计算。&lt;/p&gt;
&lt;p&gt;解决的办法是在 &lt;a href=&#34;https://imagemagick.org/Usage/draw/#transform&#34;&gt;Warped Canvas Space&lt;/a&gt; 中画一条长度合适的水平线作为向量长度。当这条线画好后，只需将绘图空间再次转换到线的末端，而画布仍然是&amp;quot;扭曲的&amp;rdquo;(&lt;code&gt;warped&lt;/code&gt;)。现在你的位置已经正确了，只要正确的旋转就可以像正常的那样画出矢量的 &lt;code&gt;&#39;arrow head&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如，这里我以-35度角生成一个70像素长的矢量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  &lt;span class=&#34;nv&#34;&gt;vector_head&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 0,0  l -15,-5  +5,+5  -5,+5  +15,-5 z&amp;#39;&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;indicator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;path &amp;#39;M 10,0  l +15,+5  -5,-5  +5,-5  -15,+5  m +10,0 +20,0 &amp;#39;&amp;#34;&lt;/span&gt;

  convert -size 100x100 xc: &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;stroke black fill none  circle 20,50 23,50
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke blue fill skyblue
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 20,50 rotate -35
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   line 0,0  70,0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 70,0
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$vector_head&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 push graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke firebrick fill tomato
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 20,50 rotate 40
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$indicator&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   translate 40,0 rotate -40
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   stroke none fill firebrick
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                   text 3,6 &amp;#39;Center&amp;#39;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                 pop graphic-context
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;                &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          arrow_with_tails.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arrow_with_tails.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;指示箭头&#34;&gt;指示箭头&lt;/h4&gt;
&lt;p&gt;在上面我还演示了一个指示箭头，指向之前矢量箭头的起点。&lt;/p&gt;
&lt;p&gt;然而我没有像之前那样画箭头，而是将它创建为一个反向的箭头符号，它的起始点距离原点（或起始点）10像素。这是一个符号位于我想要指示的位置，所以我实际上并不希望箭头直接在那个位置上面，而是离它稍微远一点。&lt;/p&gt;
&lt;p&gt;现在，虽然指示符比向量处理起来更简单，通常不需要可变长度，但你通常要在指示符的远端添加文字来指定指示的内容。和之前一样，计算这个位置可能很困难，何必呢。&lt;/p&gt;
&lt;p&gt;文字定位的解决方法也和向量一样。保留原来用于绘制指示箭头的翘曲空间，并将原点转换到该箭头的尾端（在翘曲空间中水平40像素）。现在我们已经重新定位了，我们可以围绕这个新的位置解除扭曲，这样你就可以像正常的那样绘制文本（有轻微的偏移）。&lt;/p&gt;
&lt;p&gt;不幸的是，虽然默认的文字对齐方式是&amp;quot;左&amp;rdquo;，但目前你不能在 MVG 中指定文字对齐方式，作为重力的单独设置。如果这是一个问题，请在 IM bugs 论坛上提出请求，希望文本对齐（作为独立于重力定位）能够成为现实，尤其是它实际上是 SVG 规范的一部分。&lt;/p&gt;
&lt;h3 id=&#34;绘制对象&#34;&gt;绘制对象&lt;/h3&gt;
&lt;h4 id=&#34;宽广的色彩笔触&#34;&gt;宽广的色彩笔触&lt;/h4&gt;
&lt;p&gt;你不需要用路径或轮廓完全封闭填充区域，就能创造出各种形状。使用非常大和宽的&lt;a href=&#34;https://imagemagick.org/Usage/draw/#stroke&#34;&gt;笔触&lt;/a&gt;，你可以在画布上生成大面积的颜色和色块。&lt;/p&gt;
&lt;p&gt;例如，一个宽阔的笔触椭圆弧形可以生成一个漂亮的颜色区域，我实际上已经看到用于创建海报。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x100 xc: -fill none -stroke powderblue &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;stroke-width 70 ellipse -30,0 90,90 10,50&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -rotate &lt;span class=&#34;m&#34;&gt;180&lt;/span&gt;  arc_background.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/arc_background.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;或者你可以生成一个小丑相当复杂的笑容。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 100x100 xc: &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;fill none stroke-linecap round
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;             stroke-width 40 stroke tomato ellipse 50,0 70,70 65,115
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;             stroke-width 2  stroke black  ellipse 50,0 70,70 60,120
&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;             stroke-width 40 stroke palegreen line 50,40 50,40.01&amp;#39;&lt;/span&gt; clown.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/clown.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;你能想出什么办法？请告诉我们。&lt;/p&gt;
&lt;h4 id=&#34;圆柱体&#34;&gt;圆柱体&lt;/h4&gt;
&lt;p&gt;在 &lt;a href=&#34;https://imagemagick.org/Usage/forum_link.cgi?t=17550&#34;&gt;IM 论坛的讨论&lt;/a&gt;中，有一个关于使用 ImageMagick 绘制命令绘制圆柱体（特别是阴影圆柱体）的重要讨论。&lt;/p&gt;
&lt;p&gt;绘制圆柱体的诀窍是绘制 &lt;code&gt;roundrectangle&lt;/code&gt; 原语，使其末端形成椭圆形。也就是说，如果圆柱体的宽度为 50 像素，则将矩形的角分别舍去 25 和 12 像素。这就是矩形宽度的一半，然后再减半。&lt;/p&gt;
&lt;p&gt;这样，一个圆柱体就变成了两个相互叠加的圆角矩形。第二个颜色填充的 &lt;code&gt;&#39;end oval&#39;&lt;/code&gt; 的大小正好是两个角的两倍。例如&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 60x100 xc:white -stroke snow4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill chartreuse3    -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,95 25,12&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill chartreuse2    -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,29 25,12&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          cylinder.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/cylinder.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过将第一种填充色替换为渐变色（使用&lt;a href=&#34;https://imagemagick.org/Usage/canvas/#tile_memory&#34;&gt;记忆中的平铺技术&lt;/a&gt;），你可以让圆柱体看起来更像3D&amp;hellip;&amp;hellip;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 60x100 xc:white -stroke snow4 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          &lt;span class=&#34;se&#34;&gt;\(&lt;/span&gt; -size 1x60 gradient:chartreuse1-chartreuse4 -rotate -90 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;             -write mpr:shading +delete &lt;span class=&#34;se&#34;&gt;\)&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -tile mpr:shading  -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,95 25,12&amp;#39;&lt;/span&gt; +tile &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -fill chartreuse2  -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;roundrectangle 5,5 55,29 25,12&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          cylinder_shade.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/cylinder_shade.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过慢慢完善圆柱体的绘制（如IM论坛中讨论的那样），你可以走很长的路来生成非常复杂和具有视觉吸引力的圆柱体。这包括增加封闭半透明玻璃圆柱体、阴影效果和标签。&lt;/p&gt;
&lt;p&gt;该讨论的最终结果是一个脚本 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/scripts/cylinder_bar&#34;&gt;cylinder_bar&lt;/a&gt;&amp;quot;，生成一个圆柱体百分比条&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  cylinder_bar &lt;span class=&#34;m&#34;&gt;95&lt;/span&gt; cylinder_95.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/cylinder_95.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;该脚本可以生成任何尺寸的图像，根据该尺寸和脚本顶部定义的其他设置适当调整所有参数。还包括 &lt;code&gt;glass thickness&lt;/code&gt; 的概念，在一个封闭的半透明玻璃圆柱体和内部的彩色圆柱体之间创造一个间隙。&lt;/p&gt;
&lt;p&gt;请注意圆柱体非常微妙的阴影，特别是当绿色圆柱体的末端与玻璃圆柱体的末端重叠时。只要稍加预想，就能做出惊人的效果。&lt;/p&gt;
&lt;h3 id=&#34;在文字串中绘制特殊字符&#34;&gt;在文字串中绘制特殊字符&lt;/h3&gt;
&lt;h4 id=&#34;引号还是反斜杠&#34;&gt;引号还是反斜杠？&lt;/h4&gt;
&lt;p&gt;人们在使用 &lt;code&gt;-draw&lt;/code&gt; 时遇到的最大的问题之一是绘制字符，这些字符对 UNIX shell 和 DOS 命令行甚至其他语言如 C、Perl、PHP、R 或 Visual Basic 都有特殊意义。&lt;/p&gt;
&lt;p&gt;在这方面最大的罪魁祸首是两种类型的引号字符，以及变量替换字符，如美元 &lt;code&gt;&#39;$&#39;&lt;/code&gt; 和 shell 和 ImageMagick 的转义字符，反斜杠 &lt;code&gt;&#39;\&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;基本上作为 &lt;code&gt;-draw&lt;/code&gt; 的MVG参数需要加引号，而里面的 &lt;code&gt;&#39;text&#39;&lt;/code&gt; 字符串参数也可能需要一些额外的引号。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，用户通常会使用两个不同的引号字符，一个用于 shell，另一个用于 MVG 文本字符串。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;... text 0,0 &amp;#34;string&amp;#34; ...&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是，对于 windows 用户来说，这是唯一真正的选择，它有自己的引号问题和方法。或者他们会交换引号，用&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;... text 0,0 &amp;#39;string&amp;#39; ...&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它允许你包含 shell 变量替换(使用 &lt;code&gt;&#39;$&#39;&lt;/code&gt; 而不进行转义。)&lt;/p&gt;
&lt;p&gt;选择正确的形式可以解决大多数问题，但有些字符仍然存在困难，每个解决方案都取决于你到底使用哪一组引号，因为它们也定义了特殊字符应该如何转义。&lt;/p&gt;
&lt;p&gt;以下是四种情况下的引号，以及特殊字符的处理&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对 shell 参数使用单引号，对 MVG 文本字符串周围使用双引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;处理绘制文本字符串的最简单的技术是为包装 shell 参数使用单引号。然而，这意味着要在绘制的字符串中包含一个撇号，你需要离开 shell 的&amp;quot;单引号模式&amp;rdquo;，并在 shell 的单引号之外提供撇号。&lt;/p&gt;
&lt;p&gt;例如，这里是如何处理我提到的四个特殊字符。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 0,0 &amp;#34;  &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  \&amp;#34;  $  \\  &amp;#34; &amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_sd.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/text_special_sd.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，由于美元符号不需要转义，你也不能用它来替代 shell 变量的内容。&lt;/p&gt;
&lt;p&gt;重要的是要记住，反斜杠是IM绘图字符串处理的唯一特殊字符。同时，它存在的原因也纯粹是为了让你可以转义任何&amp;quot;IM 绘制字符串引号&amp;rdquo;，比如我们在上面使用的双引号。除此以外，其他所有的怪异都是由 UNIX 命令行 shell 引起的，而不是 IM。&lt;/p&gt;
&lt;p&gt;PC-DOS 有它自己的怪异之处，我希望在使用环境中的IM时，能对特殊字符进行转义。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 shell 参数中使用双引号。
在 MVG 文本字符串周围使用单引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你确实想在绘制的字符串中插入一个 &amp;lsquo;shell variable&amp;rsquo;，那么你将不得不在 shell 参数的外面使用双引号。这使得整个事情变得更加复杂，因为你失去了 shell 的保护，你现在不仅要转义美元 &lt;code&gt;&#39;$&#39;&lt;/code&gt; 符号，而且还要转义反斜杠 &lt;code&gt;&#39;\&#39;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;另一方面，shell 将不需要使用单引号字符作为它的参数结束限制字符，所以这方面被简化了。让我们总结一下我们的特殊字符短名单的结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 0,0 &amp;#39;  \\&amp;#39;  \&amp;#34;  \$  \\\\  &amp;#39; &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_ds.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/text_special_ds.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，如果你想画一个反斜线本身，MVG 文本字符串需要将反斜线加倍（如前面的例子），但是 shell 本身也需要将每个反斜线加倍，总共产生四个反斜线才能产生一个这样的字符。&lt;/p&gt;
&lt;p&gt;这种翻倍很快就会让人不知所措，需要大量的反斜杠才能达到你想要的效果。只要采取的是慢慢的、简单的方法，你就会针对自己的情况想出办法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用单引号进行 shell 论证。
与 MVG 文本字符串周围的单引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后，让我们总结一下最后两种引号组合。我将让你去弄清楚它们是如何被 shell 和 MVG 解码的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 0,0 &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  \&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  &amp;#34;  $  \\  &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_ss.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/text_special_ss.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在shell参数中使用双引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 MVG 文本字符串周围加上双引号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 250x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -draw &lt;span class=&#34;s2&#34;&gt;&amp;#34;text 0,0 \&amp;#34;  &amp;#39;  \\\&amp;#34;  \$  \\\\  \&amp;#34;&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage  text_special_dd.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/text_special_dd.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，来自命令行的 &lt;code&gt;-draw&lt;/code&gt; 参数既要处理命令行 shell，也要处理 MVG 文本字符串中的反斜杠和引号转义。其结果可能会让人感到困惑和棘手。只要记住，shell 对这两种引号的处理方式不同，而 MVG 文本字符串则不同。&lt;/p&gt;
&lt;p&gt;当然，在复杂的脚本中，更好的方法可能是完全避免 shell 和任何脚本问题。你可以通过读取 MVG 绘图文件中的 &lt;code&gt;-draw&lt;/code&gt; 参数来实现。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;-draw @drawfile.mvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当然，你仍然需要对你使用的任何引号字符进行反斜杠处理，以及对文本中的任何反斜杠进行处理。然而，这比起同时处理 shell 自己的引号和转义系统要简单得多。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -size 500x50 xc:lightblue  -font Candice -pointsize &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -gravity center     -draw @text_quotes.mvg      text_quotes.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/img_www/right.gif&#34; alt=&#34;img&#34;&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/text_quotes.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一张图片来自我使用的一个 &amp;ldquo;MVG&amp;rdquo; 文本文件。它不包含转义符或引号。因此，只有 MVG 引号和转义符是存在的。&lt;/p&gt;
&lt;p&gt;请注意，在上面的例子中，如果我对 MVG 文本字符串使用了单引号，唯一的变化是我需要对字符串中的单引号字符进行反斜杠处理，而不是双引号字符。&lt;/p&gt;
&lt;h4 id=&#34;关于百分比字符&#34;&gt;关于百分比字符&lt;/h4&gt;
&lt;p&gt;最后一点是关于 &lt;code&gt;&amp;quot;-draw text&amp;quot;&lt;/code&gt; 操作符中的特殊 &lt;code&gt;escape&lt;/code&gt; 字符。百分号字符 &lt;code&gt;&amp;quot;%&amp;quot;&lt;/code&gt; 应该&amp;quot;按原样&amp;quot;绘制。你不需要做任何特殊的操作来绘制它们。如果它们不能&amp;quot;按原样&amp;quot;绘制，那么你的IM版本较旧，应该尽快升级。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直到IM 6.2.4版本，&lt;code&gt;&amp;quot;%&amp;quot;&lt;/code&gt; 字符被用作转义字符，在绘制的文本字符串中包含额外的图像信息。现在不再是这样了，因为当SVG图像也试图绘制百分数字符时，这种转义符是混乱和不正确的。
百分号 &amp;ldquo;转义符 &amp;ldquo;的使用（以及&amp;rdquo;/n &amp;ldquo;换行符）被认为与 &lt;code&gt;-draw&lt;/code&gt; 操作符和MVG格式处理SVG图像格式的预期用途不兼容。因此，从 IM 6.2.4 版本开始，%转义就不适用了，反斜杠只能转义自己和周围的引号。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 250x50 xc:none -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -draw &lt;span class=&#34;s1&#34;&gt;&amp;#39;text 0,0 &amp;#34;%w\n%h&amp;#34;&amp;#39;&lt;/span&gt;    -trim +repage text_escapes.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/text_escapes.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于&amp;quot;百分比错误&amp;quot;的更多细节，以及在旧版 ImageMagick 中使用 &lt;code&gt;-draw&lt;/code&gt; 时避免该错误的方法，请参见 &lt;a href=&#34;https://imagemagick.org/Usage/bugs/draw_percent/&#34;&gt;Drawing a Percent Bug&lt;/a&gt; 页面。&lt;/p&gt;
&lt;h4 id=&#34;用注释代替绘制&#34;&gt;用注释代替绘制&lt;/h4&gt;
&lt;p&gt;避免这类问题的较好方法是使用 &lt;code&gt;[-annotate](https://imagemagick.org/Usage/option_link.cgi?annotate)&lt;/code&gt; 而不是  &lt;code&gt;draw&lt;/code&gt; 来绘制文本。这个操作符是 &lt;code&gt;draw&lt;/code&gt; 操作符的一个封装器，可以使用 &lt;code&gt;draw&lt;/code&gt; 的所有功能，但形式更简单。&lt;/p&gt;
&lt;p&gt;基本上这个操作符只需要一组引号（对于 shell）。这使得处理特殊字符变得更加简单。&lt;/p&gt;
&lt;p&gt;不幸的是，虽然你不再需要为 IM 转义引号，但你现在有百分比转义，如 &lt;code&gt;&#39;@&#39;&lt;/code&gt; 文件读取，&lt;code&gt;&#39;\n&#39;&lt;/code&gt; 换行，以及其他&lt;a href=&#34;https://imagemagick.org/Usage/basics/#arg_percent&#34;&gt;百分号转义&lt;/a&gt;扩展。&lt;/p&gt;
&lt;p&gt;例如，使用单引号&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 200x50 xc:none  -box white  -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;\@  &amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;  &amp;#34;  $  \\  %% &amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -trim +repage  annotate_s.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/annotate_s.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;而对于双引号&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 200x50 xc:none -box white -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\@  &amp;#39;  \&amp;#34;  \$  \\\\  %% &amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -trim +repage  annotate_d.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/annotate_d.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，如果你使用 &lt;code&gt;&#39;@&#39;&lt;/code&gt; 转义符从文件中读取字符串，所有的注释引号和转义符将被完全忽略。&lt;/p&gt;
&lt;p&gt;例如，我们在这里包含了一个图像的宽度和高度的信息!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    convert -size 200x50 xc:none -box white -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;            -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;%w\n%h&amp;#39;&lt;/span&gt; -trim +repage    annotate_percents.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然而，当从文件中读取注释字符串时，所有的转义都会被完全忽略。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n &lt;span class=&#34;s1&#34;&gt;&amp;#39;@ %w\n%h&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;      convert -size 200x50 xc:none -box white -pointsize &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -gravity center &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;              -annotate &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;@-&amp;#39;&lt;/span&gt;  -trim +repage  annotate_file.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/annotate_file.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;更多信息请参见 &lt;a href=&#34;https://imagemagick.org/Usage/text/#annotate&#34;&gt;Annotate Text Drawing Operator&lt;/a&gt;，特别是 &lt;a href=&#34;https://imagemagick.org/Usage/text/#escape_chars&#34;&gt;Annotate Escape Characters&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;im-和-svg-处理&#34;&gt;IM 和 SVG 处理&lt;/h2&gt;
&lt;h3 id=&#34;svg-输入驱动rsvg-与-msvg&#34;&gt;SVG 输入驱动。RSVG 与 MSVG&lt;/h3&gt;
&lt;p&gt;处理实际的 SVG 图像格式是一项非常复杂的工作。引擎需要处理 &lt;a href=&#34;http://www.w3.org/TR/SVG/&#34;&gt;SVG&amp;ndash;可缩放矢量图形&lt;/a&gt;文档所定义的所有方面。这需要大量的编程工作和时间。&lt;/p&gt;
&lt;p&gt;因此，ImageMagick 在 SVG 格式图像的处理上提供了两种方法。第一种是使用一个开源的 RSV G库，将 SVG 格式转换成 IM 没有问题的光栅图像。这个引擎几乎在 SVG 处理的所有方面都是完整的。&lt;/p&gt;
&lt;p&gt;第二种方法是IM尝试将 SVG 转换为 MVG，使用一个名为 MSVG 的内置IM方法。MSVG 试图将SVG图像转换成IM的 &lt;code&gt;-draw&lt;/code&gt; 运算符 &amp;ldquo;MVG&amp;quot;绘图语言。绘制 MVG 的很多功能都是专门为此而创建的。不幸的是，虽然基本的线条绘制和着色功能是存在的，但它远不是一个完整的 SVG 转换器。&lt;/p&gt;
&lt;p&gt;你可以通过使用特殊的输入格式 &amp;ldquo;MSVG:&amp;quot;（IM v6.3.4新增）读取 SVG 图像来强制使用内部的 MSVG 转换器。但如果 RSVG 库存在，大多数 ImageMagick 将使用它来渲染 &lt;code&gt;SVG&lt;/code&gt; 图像。&lt;/p&gt;
&lt;p&gt;要找出你的 IM 会做什么，请用&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -list format &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep SVG
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从括号中的 &amp;ldquo;RSVG&amp;rdquo; 可以看出，我自己的 IM 将使用我电脑上的 RSVG 库，并给出了版本。&lt;/p&gt;
&lt;p&gt;在这里，我&amp;quot;绘制&amp;quot;了一个小的、手工制作的 SVG 图像 &amp;ldquo;&lt;a href=&#34;https://imagemagick.org/Usage/draw/diagonal.svg&#34;&gt;diagonal.svg&lt;/a&gt;&amp;quot;（由论坛用户 &lt;a href=&#34;https://imagemagick.org/Usage/forum_link.cgi?u=8538&#34;&gt;penciledin&lt;/a&gt; 贡献），它在白色背景上创建了一个简单的对角线渐变的矩形。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert diagonal.svg  diagonal_rsvg.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/diagonal_rsvg.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;完美的。一个正确的对角线梯度被生成。&lt;/p&gt;
&lt;p&gt;然而，如果你使用内部的 MSVG（如果没有 RSVG 库，则为默认值）来渲染&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert msvg:diagonal.svg  diagonal_msvg.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/diagonal_msvg.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;正如你所看到的，内部 MSVG 转换失败，返回的是垂直梯度而不是对角线。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert msvg:diagonal.svg diagonal.mvg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你大概可以看到MSVG转换器是如何尝试将 SVG 转换为 MVG 绘图命令的。&lt;/p&gt;
&lt;p&gt;当前内部 MSVG 已知失败的地方包括&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非垂直梯度(没有转换到新的MVG梯度处理)&lt;/li&gt;
&lt;li&gt;沿着弯曲路径的文字&lt;/li&gt;
&lt;li&gt;文本对齐（与重力分开）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然而大多数基本的绘图动作都被处理了。&lt;/p&gt;
&lt;p&gt;还请记住，MVG 语言实际上可以处理 SVG 不能处理的事情，包括使用重力来定位图像和文本。重力不是 SVG 规范的一部分，尽管它是 IM 文本和字体处理的一个组成部分。&lt;/p&gt;
&lt;p&gt;另外请记住，MVG 没有 SVG 所拥有的容器机制。内部的 MSVG 转换器用图形上下文的推送和弹出代替了 XML 容器（见上面的 MVG  输出），效果是一样的。
SVG 的设置&lt;/p&gt;
&lt;p&gt;SVG 图像格式是一种矢量格式（请参见&lt;a href=&#34;https://imagemagick.org/Usage/formats/#vector&#34;&gt;关于矢量图像格式的一句话&lt;/a&gt;），因此图像通常没有一个默认的&amp;quot;大小&amp;rdquo;，而是以特定的 &lt;code&gt; &amp;quot;-density&amp;quot;&lt;/code&gt; 来 &amp;ldquo;绘制&amp;quot;或&amp;quot;渲染&amp;rdquo;，就像 postscript 一样（默认密度是72dpi）。&lt;/p&gt;
&lt;p&gt;另外，如果 SVG 没有 &amp;ldquo;绘制&amp;quot;背景，您可以通过使用 &lt;code&gt;-background&lt;/code&gt; 设置指定要使用的背景颜色。&lt;/p&gt;
&lt;p&gt;例如这里是另一个小的 SVG 图像 &amp;ldquo;home.svg&amp;rdquo;，它已经使用3种不同的密度，3种不同的背景进行&amp;quot;渲染&amp;rdquo;，包括一个透明的背景。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -density &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt;                      home.svg  home_1.gif

  convert              -background skyblue home.svg  home_2.gif

  convert -density &lt;span class=&#34;m&#34;&gt;144&lt;/span&gt; -background none    home.svg  home_3.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/home_1.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/home_2.gif&#34; alt=&#34;img&#34;&gt;
&lt;img src=&#34;https://imagemagick.org/Usage/draw/home_3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;请注意，我使用了 PNG 格式的图片来制作上面例子中较大的透明背景版本。由于半透明的边缘像素，这产生的图像比 GIF 图像格式产生的图像更干净。当最终图像中涉及到透明度时，总是建议使用 PNG。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我发现有些 SVG 图像不能缩放。也就是说，它们被定义为&amp;quot;像素&amp;rdquo;，而不是现实世界中的长度，如&amp;quot;点&amp;rdquo;、&amp;ldquo;英寸&amp;quot;或&amp;quot;毫米&amp;rdquo;。因此，虽然 &lt;code&gt;-density&lt;/code&gt; 设置可能会改变图像的整体大小（以现实世界为单位），但 &amp;ldquo;像素 &amp;ldquo;的大小不会改变，因此图像本身的大小也不会改变。然而这样的SVG图像是相当罕见的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更糟糕的是，一些 SVG 图像使用了&amp;quot;像素&amp;quot;和 &amp;ldquo;点&amp;quot;的混合测量，除非作者故意这样做，否则你可能会得到一个真正的混乱，你可以尝试使用不同的密度，而不是作者想要的。幸运的是，这种情况更加罕见。&lt;/p&gt;
&lt;p&gt;一个简单的解决方法就是将 SVG 中所有的 &amp;ldquo;像素&amp;quot;单位改成&amp;quot;点&amp;rdquo;，但也不能盲目的使用，以防故意使用&amp;quot;像素&amp;rdquo;。&lt;/p&gt;
&lt;h2 id=&#34;svg-输出处理&#34;&gt;SVG 输出处理&lt;/h2&gt;
&lt;p&gt;从 IM v6.4.2 开始，IM 可以将任何位图图像转换为 SVG 矢量图! 转换并不总是成功的，但较大和/或较简单的图像（如位图蒙版）会转换得很好。&lt;/p&gt;
&lt;p&gt;例如，我在这里将一个可怕的位图形状转换为SVG图像，然后再将其转换回来，以便将位图平滑为一个适当的反锯齿形状。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert -pointsize &lt;span class=&#34;m&#34;&gt;72&lt;/span&gt; -font Candice label:A -threshold 50% &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;          -trim +repage -bordercolor white -border 5x5 A.gif

  convert A.gif  A.svg

  convert A.svg  A.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/A.gif&#34; alt=&#34;img&#34;&gt; -&amp;gt; &lt;img src=&#34;https://imagemagick.org/Usage/draw/A.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;然而，要使之工作，必须安装&amp;quot;开发&amp;quot;的 &lt;a href=&#34;http://autotrace.sourceforge.net/&#34;&gt;AutoTrace&lt;/a&gt; 库，并在IM中配置 &lt;code&gt;-with-autotrace&lt;/code&gt; 开关。&lt;/p&gt;
&lt;p&gt;如果没有安装 &lt;a href=&#34;http://autotrace.sourceforge.net/&#34;&gt;AutoTrace&lt;/a&gt; 库并将其编译到 IM 中，那么生成的 SVG 输出将是大量的单像素圆圈，生成一个二进制结果，而不是一个平滑的 SVG 轮廓图像。这样的图像比较巨大，通过 SVG 渲染往往需要很长的时间来渲染。&lt;/p&gt;
&lt;p&gt;其实需要一种更好的默认栅格到矢量的技术，可能会使用 Morphology skeletion 和 MAT 技术。&lt;/p&gt;
&lt;p&gt;有一个 &lt;code&gt;autotrace:&lt;/code&gt; &lt;a href=&#34;https://imagemagick.org/Usage/files/#delegates&#34;&gt;输入代理&lt;/a&gt;，来&amp;quot;平滑输入位图图像&amp;rdquo;，直接使用 &amp;ldquo;autotrace&amp;rdquo; 命令一次性完成上述所有步骤。然而我最后一次看到这个代理已经消失了。&lt;/p&gt;
&lt;p&gt;你应该这样使用它&amp;hellip;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;  convert autotrace:A.gif  A_traced.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://imagemagick.org/Usage/draw/A_traced.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然这并不能让你从 &amp;ldquo;autotrace&amp;rdquo; 命令中得到 SVG 输出，只是通过 SVG 过滤输入的图像来平滑它。&lt;/p&gt;
&lt;p&gt;作为一种替代方法，你可以直接使用 &amp;ldquo;autotrace&amp;rdquo; 命令，如 &lt;a href=&#34;https://imagemagick.org/Usage/transform/#edge_vector&#34;&gt;Raster to Vector Edging&lt;/a&gt; 和 &lt;a href=&#34;https://imagemagick.org/Usage/morphology/#autotrace_skeleton&#34;&gt;Skeleton using Autotrace&lt;/a&gt; 示例所示。&lt;/p&gt;
&lt;p&gt;你也可以看看 &lt;a href=&#34;https://imagemagick.org/Usage/forum_link.cgi?u=39994&#34;&gt;cancerberosgx&lt;/a&gt; 的结果，在&lt;a href=&#34;https://imagemagick.org/Usage/forum_link.cgi?p=167161&#34;&gt;生成 SVG 图像&lt;/a&gt;，他研究了转换照片的解决方案。&lt;/p&gt;
&lt;h2 id=&#34;非im矢量图形编辑器&#34;&gt;非IM矢量图形编辑器&lt;/h2&gt;
&lt;p&gt;ImageMagick 是一个像素数组处理器，它一般不会保存矢量图像（&amp;lsquo;MVG&amp;rsquo; 是唯一的例外），只会读取图像并将其转换为像素数组。&lt;/p&gt;
&lt;p&gt;其他像素图像编辑器也是如此，如 Gimp、Photoshop 等。&lt;/p&gt;
&lt;p&gt;对于编辑和处理基于矢量的图像，可以使用以下程序，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sodipodi 基于SVG的矢量图形编辑器。&lt;/li&gt;
&lt;li&gt;Xfig 简单但非常好的矢量对象编辑器。(适用于标志、地图和在页面上排列照片)&lt;/li&gt;
&lt;li&gt;Dia&lt;/li&gt;
&lt;li&gt;AutoTrace 将位图数组中的形状转换为矢量轮廓。&lt;/li&gt;
&lt;li&gt;Sketch 基于 Python 的曲线文字矢量编辑器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，这不是一个完整的列表。即使是许多文字处理程序，如 OpenOffice、Word 和 TeX，一般都有各种简单的，虽然往往难以使用的对象编辑器。&lt;/p&gt;
&lt;p&gt;然而对于一般将矢量图形格式转换为不同的矢量格式，不要使用 ImageMagick。ImageMagick 本质上是一个光栅图像或位图图形转换器和操作器，而且永远都是这样。更多信息请参见 &lt;a href=&#34;https://imagemagick.org/Usage/formats/#vector&#34;&gt;A word about Vector Image formats&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建于: 24 March 2004&lt;/li&gt;
&lt;li&gt;更新于: 14 March 2011&lt;/li&gt;
&lt;li&gt;作者: Anthony Thyssen, &lt;a href=&#34;mailto:Anthony.Thyssen@gmail.com&#34;&gt;Anthony.Thyssen@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Examples Generated with:  [version image]&lt;/li&gt;
&lt;li&gt;URL: &lt;a href=&#34;http://www.imagemagick.org/Usage/draw/&#34;&gt;http://www.imagemagick.org/Usage/draw/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/imagemagick">imagemagick</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/image">image</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/imagemagick-drawing/</guid>
                <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>ImageMagick - Transform</title>
                <link>https://ohmyweekly.github.io/notes/imagemagick-transform/</link>
                
                
                <description>&lt;blockquote&gt;ImageMagick Transform&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imagemagick.org/Usage/transform/index.html&#34;&gt;https://imagemagick.org/Usage/transform/index.html&lt;/a&gt;&lt;/p&gt;
</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/imagemagick">imagemagick</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/transform">transform</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/imagemagick-transform/</guid>
                <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>ImageMagick 笔记</title>
                <link>https://ohmyweekly.github.io/notes/imagemagick-notes/</link>
                
                
                <description>&lt;blockquote&gt;ImageMagick&lt;/blockquote&gt;&lt;h2 id=&#34;几个有意思的-imagemagick-脚本&#34;&gt;几个有意思的 ImageMagick 脚本&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/randomclipart/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/randomclipart/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/sketching/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/sketching/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/sphericalpano2cube/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/surroundblur/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/surroundblur/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/transfercolor/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/transfercolor/index.php&lt;/a&gt;
&lt;a href=&#34;http://www.fmwconcepts.com/imagemagick/colorcells/index.php&#34;&gt;http://www.fmwconcepts.com/imagemagick/colorcells/index.php&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;给图片添加网格线&#34;&gt;给图片添加网格线&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./glasseffects -e none -k simple -o &lt;span class=&#34;s1&#34;&gt;&amp;#39;#FFDAB9&amp;#39;&lt;/span&gt; -t single -m overlay -c &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; -w &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -s &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; -r &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; in.jpeg out.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./grid -o 0.3 -s &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; -c white in.jpeg out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;折叠图片&#34;&gt;折叠图片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./picturefold -o &lt;span class=&#34;m&#34;&gt;80&lt;/span&gt; -h &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; in.jpeg out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给图片添加心形图片&#34;&gt;给图片添加心形图片&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./randomclipart -d &lt;span class=&#34;s2&#34;&gt;&amp;#34;64,16&amp;#34;&lt;/span&gt; -a &lt;span class=&#34;s2&#34;&gt;&amp;#34;45,-45&amp;#34;&lt;/span&gt; -p &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt; -c random in.jpeg heart.png out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给图片分成带颜色的方块&#34;&gt;给图片分成带颜色的方块&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;./colorcells -n 8,8 -d 100,100 in.jpeg out.jpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/programming">programming</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/imagemagick">imagemagick</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/image">image</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/imagemagick-notes/</guid>
                <pubDate>Sun, 05 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>FFmpeg</title>
                <link>https://ohmyweekly.github.io/notes/ffmpeg/</link>
                
                
                <description>&lt;blockquote&gt;FFmpeg&lt;/blockquote&gt;&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;global_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;input_file_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; -i input_url&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; ... &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;output_file_options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; output_url&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;描述&#34;&gt;描述&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; 是一款非常快速的视频和音频转换器，它还可以从实时音频/视频源中抓取。它还可以在任意采样率之间进行转换，并通过高质量的多相滤波器在飞行中调整视频大小。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 从任意数量的输入&amp;quot;文件&amp;rdquo;（可以是常规文件、管道、网络流、抓取设备等）中读取，由 &lt;code&gt;-i&lt;/code&gt; 选项指定，并写入任意数量的输出&amp;quot;文件&amp;rdquo;，由一个普通的输出 url 指定。在命令行中找到的任何不能被解释为选项的东西都被认为是一个输出 url。&lt;/p&gt;
&lt;p&gt;原则上，每个输入或输出 url 可以包含任意数量的不同类型的流（视频/音频/字幕/附件/数据）。允许的流的数量和/或类型可能受到容器格式的限制。选择哪些输入的流将进入哪些输出，可以自动完成，也可以使用 &lt;code&gt;-map&lt;/code&gt; 选项完成（请参见流选择章节）。&lt;/p&gt;
&lt;p&gt;要在选项中引用输入文件，您必须使用它们的索引（基于 &lt;code&gt;0&lt;/code&gt;）。例如，第一个输入文件是 &lt;code&gt;0&lt;/code&gt;，第二个是 &lt;code&gt;1&lt;/code&gt;，等等。同样，一个文件中的流也用它们的索引来表示。例如，&lt;code&gt;2:3&lt;/code&gt; 指的是第三个输入文件中的第四个流。也请参见流指定符一章。&lt;/p&gt;
&lt;p&gt;一般来说，选项会应用到下一个指定的文件。因此，顺序是很重要的，您可以在命令行中多次出现同一个选项。每次出现都会被应用到下一个输入或输出文件。这条规则的例外是全局选项（例如 verbosity level），应该先指定。&lt;/p&gt;
&lt;p&gt;不要混合输入和输出文件-首先指定所有输入文件，然后再指定所有输出文件。也不要混合属于不同文件的选项。所有选项只适用于下一个输入或输出文件，并在文件之间被重置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要将输出文件的视频比特率设置为 64 kbit/s:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.avi -b:v 64k -bufsize 64k output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;要强制输出文件的帧率为24帧/秒:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.avi -r &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;强制输入文件的帧率（仅对原始格式有效）为1帧/秒，输出文件的帧率为24帧/秒:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -r &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -i input.m2v -r &lt;span class=&#34;m&#34;&gt;24&lt;/span&gt; output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原始输入文件可能需要格式选项。&lt;/p&gt;
&lt;h2 id=&#34;详情描述&#34;&gt;详情描述&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 中每个输出的转码过程可以用下面的图来描述:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______              ______________
|       |            |              |
| input |  demuxer   | encoded data |   decoder
| file  | ---------&amp;gt; | packets      | -----+
|_______|            |______________|      |
                                           v
                                       _________
                                      |         |
                                      | decoded |
                                      | frames  |
                                      |_________|
 ________             ______________       |
|        |           |              |      |
| output | &amp;lt;-------- | encoded data | &amp;lt;----+
| file   |   muxer   | packets      |   encoder
|________|           |______________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 调用 libavformat 库（包含 demuxers）来读取输入文件，并从其中获取包含编码数据的数据包。当有多个输入文件时，&lt;code&gt;ffmpeg&lt;/code&gt; 试图通过跟踪任何活动输入流上的最低时间戳来保持它们的同步。&lt;/p&gt;
&lt;p&gt;编码后的数据包会被传递给解码器（除非为流选择了 streamcopy，详见下文）。解码器产生未压缩的帧（原始视频/PCM音频/&amp;hellip;），这些帧可以通过过滤进一步处理（见下一节）。过滤后，这些帧被传给编码器，编码器对它们进行编码并输出编码数据包。最后，这些帧被传给 muxer，muxer 将编码后的数据包写入输出文件。&lt;/p&gt;
&lt;h2 id=&#34;滤波&#34;&gt;滤波&lt;/h2&gt;
&lt;p&gt;在编码之前，&lt;code&gt;ffmpeg&lt;/code&gt; 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。&lt;code&gt;ffmpeg&lt;/code&gt; 区分了两种类型的滤波图：简单和复杂。&lt;/p&gt;
&lt;h3 id=&#34;简单的滤波图&#34;&gt;简单的滤波图&lt;/h3&gt;
&lt;p&gt;简单的滤波图是指那些只有一个输入和输出的滤波图，两者类型相同。在上图中，它们可以通过简单地在解码和编码之间插入一个额外的步骤来表示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________                        ______________
|         |                      |              |
| decoded |                      | encoded data |
| frames  |\                   _ | packets      |
|_________| \                  /||______________|
             \   __________   /
  simple     _\||          | /  encoder
  filtergraph   | filtered |/
                | frames   |
                |__________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;简单的滤波图是用 per-stream &lt;code&gt;-filter&lt;/code&gt; 选项配置的（视频和音频分别用 &lt;code&gt;-vf&lt;/code&gt; 和 &lt;code&gt;-af&lt;/code&gt; 别名）。例如，一个简单的视频滤波图可以是这样的:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______        _____________        _______        ________
|       |      |             |      |       |      |        |
| input | ---&amp;gt; | deinterlace | ---&amp;gt; | scale | ---&amp;gt; | output |
|_______|      |_____________|      |_______|      |________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意，有些滤镜会改变帧的属性，但不会改变帧的内容。例如，上面例子中的 &lt;code&gt;fps&lt;/code&gt; 过滤器改变了帧数，但没有触及帧内容。另一个例子是 &lt;code&gt;setpts&lt;/code&gt; 过滤器，它只设置了时间戳，而在其他方面没有改变帧的内容。&lt;/p&gt;
&lt;h3 id=&#34;复杂的滤波图&#34;&gt;复杂的滤波图&lt;/h3&gt;
&lt;p&gt;复杂的滤波图是那些不能简单地描述为应用于一个流的线性处理链的图。例如，当图形有一个以上的输入和/或输出时，或者当输出流类型与输入不同时，就会出现这种情况。它们可以用下图来表示:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _________
|         |
| input 0 |\                    __________
|_________| \                  |          |
             \   _________    /| output 0 |
              \ |         |  / |__________|
 _________     \| complex | /
|         |     |         |/
| input 1 |----&amp;gt;| filter  |\
|_________|     |         | \   __________
               /| graph   |  \ |          |
              / |         |   \| output 1 |
 _________   /  |_________|    |__________|
|         | /
| input 2 |/
|_________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;复杂的滤波图是用 &lt;code&gt;-filter_complex&lt;/code&gt; 选项配置的。注意这个选项是全局性的，因为复杂的滤波图，就其本质而言，不能明确地与一个单一的流或文件相关联。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-lavfi&lt;/code&gt; 选项相当于 &lt;code&gt;-filter_complex&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;一个简单的例子是 &lt;code&gt;overlay&lt;/code&gt; 滤波器，它有两个视频输入和一个视频输出，其中一个视频叠加在另一个视频上。它的音频对应的是 &lt;code&gt;amix&lt;/code&gt; 滤波器。&lt;/p&gt;
&lt;h2 id=&#34;流复制&#34;&gt;流复制&lt;/h2&gt;
&lt;p&gt;流复制是通过向 &lt;code&gt;-codec&lt;/code&gt; 选项提供 &lt;code&gt;copy&lt;/code&gt; 参数来选择的模式，它使 &lt;code&gt;ffmpeg&lt;/code&gt; 省略了对指定流的解码和编码步骤，因此它只做解复用(demuxing)和混叠(muxing)。它对于改变容器格式或修改容器级元数据非常有用。上面的图，在这种情况下，会简化成这样:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; _______              ______________            ________
|       |            |              |          |        |
| input |  demuxer   | encoded data |  muxer   | output |
| file  | ---------&amp;gt; | packets      | -------&amp;gt; | file   |
|_______|            |______________|          |________|
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于不需要解码或编码，所以速度非常快，而且没有质量损失。但是，由于很多因素的影响，在某些情况下可能无法工作。应用过滤器显然也是不可能的，因为过滤器是在未压缩的数据上工作的。&lt;/p&gt;
&lt;h2 id=&#34;流选择&#34;&gt;流选择&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ffmpeg&lt;/code&gt; 提供了 &lt;code&gt;-map&lt;/code&gt; 选项来手动控制每个输出文件的流选择。用户可以跳过 &lt;code&gt;-map&lt;/code&gt; 选项，让 &lt;code&gt;ffmpeg&lt;/code&gt; 执行自动流选择，如下所述。&lt;code&gt;-vn / -an / -sn / -dn&lt;/code&gt; 选项可以分别用来跳过视频、音频、字幕和数据流，无论是手动映射还是自动选择，但那些复杂的滤波图输出的流除外。&lt;/p&gt;
&lt;h3 id=&#34;描述-1&#34;&gt;描述：&lt;/h3&gt;
&lt;p&gt;下面的小节描述了涉及到流选择的各种规则。接下来的例子将展示这些规则是如何在实践中应用的。&lt;/p&gt;
&lt;p&gt;虽然我们尽力准确地反映了程序的行为，但 FFmpeg 仍在不断地开发中，代码可能会在写这篇文章的时候有所改变。&lt;/p&gt;
&lt;h4 id=&#34;自动选择流&#34;&gt;自动选择流&lt;/h4&gt;
&lt;p&gt;在没有任何特定输出文件的映射选项的情况下，&lt;code&gt;ffmpeg&lt;/code&gt; 会检查输出格式，以检查哪些类型的流可以被包含在其中，即视频、音频和/或字幕。对于每一种可接受的流类型，&lt;code&gt;ffmpeg&lt;/code&gt; 将从所有输入中选择一个可用的流。&lt;/p&gt;
&lt;p&gt;它将根据以下标准选择该流:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于视频，它是最高分辨率的流,&lt;/li&gt;
&lt;li&gt;对于音频来说，它是拥有最多通道的流,&lt;/li&gt;
&lt;li&gt;对于字幕，它是第一个找到的字幕流，但有一个注意事项。输出格式的默认字幕编码器可以是基于文本的，也可以是基于图像的，而且只会选择相同类型的字幕流。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在几个相同类型的流速率相同的情况下，会选择指数最低的流。&lt;/p&gt;
&lt;p&gt;数据流或附件流不会被自动选择，只能使用 &lt;code&gt;-map&lt;/code&gt; 来包含。&lt;/p&gt;
&lt;h4 id=&#34;手动选择流&#34;&gt;手动选择流&lt;/h4&gt;
&lt;p&gt;当使用 &lt;code&gt;-map&lt;/code&gt; 时，只有用户映射的流才会被包含在该输出文件中，下面描述的滤波图输出可能是一个例外。&lt;/p&gt;
&lt;h4 id=&#34;复杂的滤波图-1&#34;&gt;复杂的滤波图&lt;/h4&gt;
&lt;p&gt;如果有任何复杂的滤波图输出流带有未标记的填补(pad)，它们将被添加到第一个输出文件中。如果流类型不被输出格式支持，这将导致一个致命的错误。在没有 &lt;code&gt;map&lt;/code&gt; 选项的情况下，包含这些流会导致自动选择流的类型被跳过。如果存在 &lt;code&gt;map&lt;/code&gt; 选项，这些滤波图流会被包含在映射流之外。&lt;/p&gt;
&lt;p&gt;带有标签填补的复杂滤波图输出流必须被映射一次，而且是精确地映射一次。&lt;/p&gt;
&lt;h4 id=&#34;流处理&#34;&gt;流处理&lt;/h4&gt;
&lt;p&gt;流处理是独立于流选择的，下面描述的字幕除外。流处理是通过针对特定输出文件中的流的 &lt;code&gt;-codec&lt;/code&gt; 选项来设置的。特别是，编解码器选项是在流选择过程之后由 &lt;code&gt;ffmpeg&lt;/code&gt; 应用的，因此不会影响后者。如果没有为某个流类型指定 &lt;code&gt;-codec&lt;/code&gt; 选项，&lt;code&gt;ffmpeg&lt;/code&gt; 将选择输出文件 muxer 注册的默认编码器。&lt;/p&gt;
&lt;p&gt;字幕存在一个例外。&lt;code&gt;ffmpeg&lt;/code&gt; 不会验证指定的编码器是否可以转换所选的流，也不会验证转换后的流是否可以在输出格式中接受。这通常也适用于：当用户手动设置编码器时，流选择过程不能检查编码后的流是否能被混入输出文件中。如果不能，&lt;code&gt;ffmpeg&lt;/code&gt; 将中止，所有的输出文件将无法被处理。&lt;/p&gt;
&lt;h2 id=&#34;示例&#34;&gt;示例&lt;/h2&gt;
&lt;p&gt;下面的例子说明了 &lt;code&gt;ffmpeg&lt;/code&gt; 流选择方法的行为、怪癖和限制。&lt;/p&gt;
&lt;p&gt;它们假设以下三个输入文件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;input file &#39;A.avi&#39;
      stream 0: video 640x360
      stream 1: audio 2 channels

input file &#39;B.mp4&#39;
      stream 0: video 1920x1080
      stream 1: audio 2 channels
      stream 2: subtitles (text)
      stream 3: audio 5.1 channels
      stream 4: subtitles (text)

input file &#39;C.mkv&#39;
      stream 0: video 1280x720
      stream 1: audio 2 channels
      stream 2: subtitles (image)
&lt;/code&gt;&lt;/pre&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/ffmpeg">ffmpeg</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/ffmpeg">ffmpeg</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tiktok">tiktok</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/ffmpeg/</guid>
                <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
            
            <item>
                <title>使用 FFmpeg 提取抖音短视频中的音乐</title>
                <link>https://ohmyweekly.github.io/notes/ffmpeg-notes/</link>
                
                
                <description>&lt;blockquote&gt;Use FFmpeg to extract music in TikTok&lt;/blockquote&gt;&lt;p&gt;抖音短视频有很多好听的歌, 网易云音乐、QQ音乐和虾米音乐上都没有, 但是可以把视频转成 mp3 格式。 使用 &lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;FFmpeg&lt;/a&gt; 来搞定。点击抖音上的转发按钮, 如果「保存本地」的按钮不是灰色的, 表示可以下载到手机上。下载完后, 再转发到电脑上, 下载好 ffmpeg:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;brew install ffmpeg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;从视频中采集音频httpsstackoverflowcomquestions9913032how-can-i-extract-audio-from-video-with-ffmpeg2741382427413824&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/9913032/how-can-i-extract-audio-from-video-with-ffmpeg/27413824#27413824&#34;&gt;从视频中采集音频&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -f mp3 -vn output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -q:a &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -map a output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者只截取全部音频中的一小段:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -ss 00:00:03 -t 0:0:14 -i alcastar.mp4 -f mp3 -vn alcastar.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;-ss  00:00:03&lt;/code&gt; 用于指定要截取的音频的起始时间, 即从第三秒开始截取; &lt;code&gt;-t 0:0:14&lt;/code&gt; 用于指定要截取的音频的持续时长, 即截取 14 秒的音频。&lt;code&gt; -i alcastar.mp4&lt;/code&gt; 用于指定输入文件,  即下载好的视频文件; &lt;code&gt;-f mp3&lt;/code&gt; 用于指定输出格式为 mp3; &lt;code&gt;-vn&lt;/code&gt; 即 no vedio, 即不保留视频; 最后的 alcastar.mp3 是输出文件名。&lt;/p&gt;
&lt;h2 id=&#34;去除音频中的静音httpsstackoverflowcomquestions25697596using-ffmpeg-with-silencedetect-to-remove-audio-silence2941197329411973&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/25697596/using-ffmpeg-with-silencedetect-to-remove-audio-silence/29411973#29411973&#34;&gt;去除音频中的静音&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp3 -af &lt;span class=&#34;nv&#34;&gt;silenceremove&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;1:0:-50dB output.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;给视频添加字幕httpsenwikipediaorgwikilist_of_iso_639-2_codes&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes&#34;&gt;给视频添加字幕&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i input.mp4 -i SRT文件 -c copy -c:s mov_text -metadata:s:s:0  &lt;span class=&#34;nv&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&amp;lt;language code&amp;gt; output.mp4 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;移除超过1秒的静止画面httpsstackoverflowcomquestions40966394how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg4097778640977786&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/questions/40966394/how-to-simply-remove-duplicate-frames-from-a-video-using-ffmpeg/40977786#40977786&#34;&gt;移除超过1秒的静止画面&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -i in.mp4 -vf
&lt;span class=&#34;s2&#34;&gt;&amp;#34;select=&amp;#39;if(gt(scene,0.01),st(1,t),lte(t-ld(1),1))&amp;#39;,setpts=N/FRAME_RATE/TB&amp;#34;&lt;/span&gt;
trimmed.mp4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将图片和音频合成视频&#34;&gt;将图片和音频合成视频&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -loop &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -i &lt;span class=&#34;nv&#34;&gt;$image&lt;/span&gt; -i &lt;span class=&#34;nv&#34;&gt;$audio_file&lt;/span&gt; -q:v &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -c:a copy  -shortest &lt;span class=&#34;nv&#34;&gt;$video_file&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;将多个视频合并成一个&#34;&gt;将多个视频合并成一个&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ffmpeg -safe &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; -f concat -i &lt;span class=&#34;nv&#34;&gt;$list_file&lt;/span&gt; -c:v libx264 &lt;span class=&#34;nv&#34;&gt;$final&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;list file 的格式是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file &#39;./data_1.ts&#39;
file &#39;./data_2.ts&#39;
file &#39;./data_3.ts&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
                
                        <author>焉知非鱼@fakeEmailToMakeValidatorHappy.com (焉知非鱼)</author>
                
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/categories/ffmpeg">ffmpeg</category>
                                
                            
                        
                     
                        
                             
                            
                                
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/ffmpeg">ffmpeg</category>
                                 
                                    <category domain="https://ohmyweekly.github.io/tags/tiktok">tiktok</category>
                                
                            
                        
                    
                
                <guid>https://ohmyweekly.github.io/notes/ffmpeg-notes/</guid>
                <pubDate>Sat, 04 Jul 2020 00:00:00 +0800</pubDate>
            </item>
        
    </channel>
</rss>


